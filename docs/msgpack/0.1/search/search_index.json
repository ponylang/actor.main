{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages /tmp/tmp.A5vVG1JKko/msgpack/0.1/msgpack buffered builtin collections ponytest time","title":"msgpack"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack--index/","text":"Pony MessagePack Pure Pony package to support encoding to and decoding from the MessagePack serialization format. Usage Currently, the only API available is a low-level encoding API. See MessagePackEncoder for more details. Public Types primitive MessagePackEncoder Private Types primitive _Size primitive _Limit primitive _FormatName","title":"Package"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack--index/#pony-messagepack","text":"Pure Pony package to support encoding to and decoding from the MessagePack serialization format.","title":"Pony MessagePack"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack--index/#usage","text":"Currently, the only API available is a low-level encoding API. See MessagePackEncoder for more details.","title":"Usage"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack--index/#public-types","text":"primitive MessagePackEncoder","title":"Public Types"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack--index/#private-types","text":"primitive _Size primitive _Limit primitive _FormatName","title":"Private Types"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/","text":"MessagePackEncoder [Source] Implements low-level encoding into the MessagePack serialization format . You should be familiar with how MessagePack encodes messages if you use this API directly. There are very few guardrails preventing you from creating invalid documents. This is particularly true when using the array and map format family encoding methods. primitive val MessagePackEncoder Constructors create [Source] new val create() : MessagePackEncoder val^ Returns MessagePackEncoder val^ Public Functions nil [Source] nil format stores nil in 1 byte. fun box nil( b: Writer ref) : None val Parameters b: Writer ref Returns None val bool [Source] bool format family stores false or true in 1 byte. fun box bool( b: Writer ref, t_or_f: Bool val) : None val Parameters b: Writer ref t_or_f: Bool val Returns None val positive_fixint [Source] positive fixnum stores 7-bit positive integer. Max value that can be encoded is 127 . Attemping to encode an out of range value will result in an error . fun box positive_fixint( b: Writer ref, v: U8 val) : None val ? Parameters b: Writer ref v: U8 val Returns None val ? negative_fixint [Source] negative fixnum stores 5-bit negative integer. Max value that can be encoded is -1 . Min value that can be encoded is -32 . Attemping to encode an out of range value will result in an error . fun box negative_fixint( b: Writer ref, v: I8 val) : None val ? Parameters b: Writer ref v: I8 val Returns None val ? uint_8 [Source] uint 8 stores a 8-bit unsigned integer. fun box uint_8( b: Writer ref, v: U8 val) : None val Parameters b: Writer ref v: U8 val Returns None val uint_16 [Source] uint 16 stores a 16-bit big-endian unsigned integer. fun box uint_16( b: Writer ref, v: U16 val) : None val Parameters b: Writer ref v: U16 val Returns None val uint_32 [Source] uint 32 stores a 32-bit big-endian unsigned integer. fun box uint_32( b: Writer ref, v: U32 val) : None val Parameters b: Writer ref v: U32 val Returns None val uint_64 [Source] uint 64 stores a 64-bit big-endian unsigned integer. fun box uint_64( b: Writer ref, v: U64 val) : None val Parameters b: Writer ref v: U64 val Returns None val int_8 [Source] int 8 stores a 8-bit signed integer. fun box int_8( b: Writer ref, v: I8 val) : None val Parameters b: Writer ref v: I8 val Returns None val int_16 [Source] int 16 stores a 16-bit big-endian signed integer. fun box int_16( b: Writer ref, v: I16 val) : None val Parameters b: Writer ref v: I16 val Returns None val int_32 [Source] int 32 stores a 32-bit big-endian signed integer. fun box int_32( b: Writer ref, v: I32 val) : None val Parameters b: Writer ref v: I32 val Returns None val int_64 [Source] int 64 stores a 64-bit big-endian signed integer. fun box int_64( b: Writer ref, v: I64 val) : None val Parameters b: Writer ref v: I64 val Returns None val float_32 [Source] float 32 stores a floating point number in IEEE 754 single precision floating point number format. fun box float_32( b: Writer ref, v: F32 val) : None val Parameters b: Writer ref v: F32 val Returns None val float_64 [Source] float 64 stores a floating point number in IEEE 754 double precision floating point number format. fun box float_64( b: Writer ref, v: F64 val) : None val Parameters b: Writer ref v: F64 val Returns None val fixstr [Source] fixstr stores a byte array whose length is upto 31 bytes. Attempting to encode a ByteSeq larger than 31 bytes will result in an error . fun box fixstr( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? str_8 [Source] str 8 stores a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a ByteSeq larger than (2^8)-1 bytes will result in an error . fun box str_8( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? str_16 [Source] str 16 stores a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a ByteSeq larger than (2^16)-1 bytes will result in an error . fun box str_16( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? str_32 [Source] str 32 stores a byte array whose length is upto (2^32)-1. Attempting to encode a ByteSeq larger than (2^32)-1 bytes will result in an error . fun box str_32( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? bin_8 [Source] bin 8 stores a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a ByteSeq larger than (2^8)-1 bytes will result in an error . fun box bin_8( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? bin_16 [Source] bin 16 stores a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a ByteSeq larger than (2^16)-1 bytes will result in an error . fun box bin_16( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? bin_32 [Source] bin 32 stores a byte array whose length is upto (2^32)-1 bytes. Attempting to encode a ByteSeq larger than (2^32)-1 bytes will result in an error . fun box bin_32( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) Returns None val ? fixarray [Source] Creates a header for a MessagePack \"fixarray\". This only creates the header. s number of array items should be written via other methods after this is called. fixarray stores an array whose length is upto 15 elements. Attempting to encode a value larger than 15 will result in an error . fun box fixarray( b: Writer ref, s: U8 val) : None val ? Parameters b: Writer ref s: U8 val Returns None val ? array_16 [Source] Creates a header for a MessagePack \"array_16\". This only creates the header. s number of array items should be written via other methods after this is called. array 16 stores an array whose length is upto (2^16)-1 elements. Attempting to encode a value larger than (2^16)-1 bytes will result in an error . fun box array_16( b: Writer ref, s: U16 val) : None val Parameters b: Writer ref s: U16 val Returns None val array_32 [Source] Creates a header for a MessagePack \"array_32\". This only creates the header. s number of array items should be written via other methods after this is called. array 32 stores an array whose length is upto (2^32)-1 elements. Attempting to encode a value larger than (2^32)-1 bytes will result in an error . fun box array_32( b: Writer ref, s: U32 val) : None val Parameters b: Writer ref s: U32 val Returns None val fixmap [Source] Creates a header for a MessagePack \"fixmap\". This only creates the header. s number of map items should be written via other methods after this is called. fixmap stores a map whose length is upto 15 elements. Attempting to encode a value larger than 15 will result in an error . fun box fixmap( b: Writer ref, s: U8 val) : None val ? Parameters b: Writer ref s: U8 val Returns None val ? map_16 [Source] Creates a header for a MessagePack \"map_16\". This only creates the header. s number of map items should be written via other methods after this is called. map 16 stores an array whose length is upto (2^16)-1 elements. Attempting to encode a value larger than (2^16)-1 bytes will result in an error . fun box map_16( b: Writer ref, s: U16 val) : None val Parameters b: Writer ref s: U16 val Returns None val map_32 [Source] Creates a header for a MessagePack \"map_32\". This only creates the header. s number of map items should be written via other methods after this is called. map 32 stores an array whose length is upto (2^32)-1 elements. Attempting to encode a value larger than (2^32)-1 bytes will result in an error . fun box map_32( b: Writer ref, s: U32 val) : None val Parameters b: Writer ref s: U32 val Returns None val fixext_1 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 1 stores an integer and a byte array whose length is 1 byte. Attempting to encode a ByteSeq that is not 1 element in size will result in an error . fun box fixext_1( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? fixext_2 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 2 stores an integer and a byte array whose length is 2 byte. Attempting to encode a ByteSeq that is not 2 element in size will result in an error . fun box fixext_2( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? fixext_4 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 4 stores an integer and a byte array whose length is 4 byte. Attempting to encode a ByteSeq that is not 4 element in size will result in an error . fun box fixext_4( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? fixext_8 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 8 stores an integer and a byte array whose length is 8 byte. Attempting to encode a ByteSeq that is not 8 element in size will result in an error . fun box fixext_8( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? fixext_16 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 16 stores an integer and a byte array whose length is 16 byte. Attempting to encode a ByteSeq that is not 16 element in size will result in an error . fun box fixext_16( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? ext_8 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 8 stores an integer and a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a ByteSeq that is larger than (2^8)-1 bytes in size will result in an error . fun box ext_8( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? ext_16 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 16 stores an integer and a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a ByteSeq that is larger than (2^16)-1 bytes in size will result in an error . fun box ext_16( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? ext_32 [Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 32 stores an integer and a byte array whose length is upto (2^32)-1 bytes. Attempting to encode a ByteSeq that is larger than (2^32)-1 bytes in size will result in an error . fun box ext_32( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ? Parameters b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val) Returns None val ? eq [Source] fun box eq( that: MessagePackEncoder val) : Bool val Parameters that: MessagePackEncoder val Returns Bool val ne [Source] fun box ne( that: MessagePackEncoder val) : Bool val Parameters that: MessagePackEncoder val Returns Bool val Private Functions _write_type [Source] fun box _write_type( b: Writer ref, t: U8 val) : None val Parameters b: Writer ref t: U8 val Returns None val _write_fixed_value [Source] fun box _write_fixed_value( b: Writer ref, v: U8 val) : None val Parameters b: Writer ref v: U8 val Returns None val _write_btye_array_8 [Source] fun box _write_btye_array_8( b: Writer ref, v: (String val | Array[U8 val] val), t: U8 val) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) t: U8 val Returns None val ? _write_btye_array_16 [Source] fun box _write_btye_array_16( b: Writer ref, v: (String val | Array[U8 val] val), t: U8 val) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) t: U8 val Returns None val ? _write_btye_array_32 [Source] fun box _write_btye_array_32( b: Writer ref, v: (String val | Array[U8 val] val), t: U8 val) : None val ? Parameters b: Writer ref v: ( String val | Array [ U8 val] val) t: U8 val Returns None val ?","title":"primitive MessagePackEncoder"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#messagepackencoder","text":"[Source] Implements low-level encoding into the MessagePack serialization format . You should be familiar with how MessagePack encodes messages if you use this API directly. There are very few guardrails preventing you from creating invalid documents. This is particularly true when using the array and map format family encoding methods. primitive val MessagePackEncoder","title":"MessagePackEncoder"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#create","text":"[Source] new val create() : MessagePackEncoder val^","title":"create"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns","text":"MessagePackEncoder val^","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#nil","text":"[Source] nil format stores nil in 1 byte. fun box nil( b: Writer ref) : None val","title":"nil"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters","text":"b: Writer ref","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_1","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#bool","text":"[Source] bool format family stores false or true in 1 byte. fun box bool( b: Writer ref, t_or_f: Bool val) : None val","title":"bool"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_1","text":"b: Writer ref t_or_f: Bool val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_2","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#positive_fixint","text":"[Source] positive fixnum stores 7-bit positive integer. Max value that can be encoded is 127 . Attemping to encode an out of range value will result in an error . fun box positive_fixint( b: Writer ref, v: U8 val) : None val ?","title":"positive_fixint"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_2","text":"b: Writer ref v: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_3","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#negative_fixint","text":"[Source] negative fixnum stores 5-bit negative integer. Max value that can be encoded is -1 . Min value that can be encoded is -32 . Attemping to encode an out of range value will result in an error . fun box negative_fixint( b: Writer ref, v: I8 val) : None val ?","title":"negative_fixint"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_3","text":"b: Writer ref v: I8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_4","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#uint_8","text":"[Source] uint 8 stores a 8-bit unsigned integer. fun box uint_8( b: Writer ref, v: U8 val) : None val","title":"uint_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_4","text":"b: Writer ref v: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_5","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#uint_16","text":"[Source] uint 16 stores a 16-bit big-endian unsigned integer. fun box uint_16( b: Writer ref, v: U16 val) : None val","title":"uint_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_5","text":"b: Writer ref v: U16 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_6","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#uint_32","text":"[Source] uint 32 stores a 32-bit big-endian unsigned integer. fun box uint_32( b: Writer ref, v: U32 val) : None val","title":"uint_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_6","text":"b: Writer ref v: U32 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_7","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#uint_64","text":"[Source] uint 64 stores a 64-bit big-endian unsigned integer. fun box uint_64( b: Writer ref, v: U64 val) : None val","title":"uint_64"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_7","text":"b: Writer ref v: U64 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_8","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#int_8","text":"[Source] int 8 stores a 8-bit signed integer. fun box int_8( b: Writer ref, v: I8 val) : None val","title":"int_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_8","text":"b: Writer ref v: I8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_9","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#int_16","text":"[Source] int 16 stores a 16-bit big-endian signed integer. fun box int_16( b: Writer ref, v: I16 val) : None val","title":"int_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_9","text":"b: Writer ref v: I16 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_10","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#int_32","text":"[Source] int 32 stores a 32-bit big-endian signed integer. fun box int_32( b: Writer ref, v: I32 val) : None val","title":"int_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_10","text":"b: Writer ref v: I32 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_11","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#int_64","text":"[Source] int 64 stores a 64-bit big-endian signed integer. fun box int_64( b: Writer ref, v: I64 val) : None val","title":"int_64"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_11","text":"b: Writer ref v: I64 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_12","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#float_32","text":"[Source] float 32 stores a floating point number in IEEE 754 single precision floating point number format. fun box float_32( b: Writer ref, v: F32 val) : None val","title":"float_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_12","text":"b: Writer ref v: F32 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_13","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#float_64","text":"[Source] float 64 stores a floating point number in IEEE 754 double precision floating point number format. fun box float_64( b: Writer ref, v: F64 val) : None val","title":"float_64"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_13","text":"b: Writer ref v: F64 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_14","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixstr","text":"[Source] fixstr stores a byte array whose length is upto 31 bytes. Attempting to encode a ByteSeq larger than 31 bytes will result in an error . fun box fixstr( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"fixstr"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_14","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_15","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#str_8","text":"[Source] str 8 stores a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a ByteSeq larger than (2^8)-1 bytes will result in an error . fun box str_8( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"str_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_15","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_16","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#str_16","text":"[Source] str 16 stores a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a ByteSeq larger than (2^16)-1 bytes will result in an error . fun box str_16( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"str_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_16","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_17","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#str_32","text":"[Source] str 32 stores a byte array whose length is upto (2^32)-1. Attempting to encode a ByteSeq larger than (2^32)-1 bytes will result in an error . fun box str_32( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"str_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_17","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_18","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#bin_8","text":"[Source] bin 8 stores a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a ByteSeq larger than (2^8)-1 bytes will result in an error . fun box bin_8( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"bin_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_18","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_19","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#bin_16","text":"[Source] bin 16 stores a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a ByteSeq larger than (2^16)-1 bytes will result in an error . fun box bin_16( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"bin_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_19","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_20","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#bin_32","text":"[Source] bin 32 stores a byte array whose length is upto (2^32)-1 bytes. Attempting to encode a ByteSeq larger than (2^32)-1 bytes will result in an error . fun box bin_32( b: Writer ref, v: (String val | Array[U8 val] val)) : None val ?","title":"bin_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_20","text":"b: Writer ref v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_21","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixarray","text":"[Source] Creates a header for a MessagePack \"fixarray\". This only creates the header. s number of array items should be written via other methods after this is called. fixarray stores an array whose length is upto 15 elements. Attempting to encode a value larger than 15 will result in an error . fun box fixarray( b: Writer ref, s: U8 val) : None val ?","title":"fixarray"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_21","text":"b: Writer ref s: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_22","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#array_16","text":"[Source] Creates a header for a MessagePack \"array_16\". This only creates the header. s number of array items should be written via other methods after this is called. array 16 stores an array whose length is upto (2^16)-1 elements. Attempting to encode a value larger than (2^16)-1 bytes will result in an error . fun box array_16( b: Writer ref, s: U16 val) : None val","title":"array_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_22","text":"b: Writer ref s: U16 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_23","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#array_32","text":"[Source] Creates a header for a MessagePack \"array_32\". This only creates the header. s number of array items should be written via other methods after this is called. array 32 stores an array whose length is upto (2^32)-1 elements. Attempting to encode a value larger than (2^32)-1 bytes will result in an error . fun box array_32( b: Writer ref, s: U32 val) : None val","title":"array_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_23","text":"b: Writer ref s: U32 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_24","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixmap","text":"[Source] Creates a header for a MessagePack \"fixmap\". This only creates the header. s number of map items should be written via other methods after this is called. fixmap stores a map whose length is upto 15 elements. Attempting to encode a value larger than 15 will result in an error . fun box fixmap( b: Writer ref, s: U8 val) : None val ?","title":"fixmap"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_24","text":"b: Writer ref s: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_25","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#map_16","text":"[Source] Creates a header for a MessagePack \"map_16\". This only creates the header. s number of map items should be written via other methods after this is called. map 16 stores an array whose length is upto (2^16)-1 elements. Attempting to encode a value larger than (2^16)-1 bytes will result in an error . fun box map_16( b: Writer ref, s: U16 val) : None val","title":"map_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_25","text":"b: Writer ref s: U16 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_26","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#map_32","text":"[Source] Creates a header for a MessagePack \"map_32\". This only creates the header. s number of map items should be written via other methods after this is called. map 32 stores an array whose length is upto (2^32)-1 elements. Attempting to encode a value larger than (2^32)-1 bytes will result in an error . fun box map_32( b: Writer ref, s: U32 val) : None val","title":"map_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_26","text":"b: Writer ref s: U32 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_27","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixext_1","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 1 stores an integer and a byte array whose length is 1 byte. Attempting to encode a ByteSeq that is not 1 element in size will result in an error . fun box fixext_1( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"fixext_1"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_27","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_28","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixext_2","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 2 stores an integer and a byte array whose length is 2 byte. Attempting to encode a ByteSeq that is not 2 element in size will result in an error . fun box fixext_2( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"fixext_2"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_28","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_29","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixext_4","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 4 stores an integer and a byte array whose length is 4 byte. Attempting to encode a ByteSeq that is not 4 element in size will result in an error . fun box fixext_4( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"fixext_4"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_29","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_30","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixext_8","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 8 stores an integer and a byte array whose length is 8 byte. Attempting to encode a ByteSeq that is not 8 element in size will result in an error . fun box fixext_8( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"fixext_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_30","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_31","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#fixext_16","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 16 stores an integer and a byte array whose length is 16 byte. Attempting to encode a ByteSeq that is not 16 element in size will result in an error . fun box fixext_16( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"fixext_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_31","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_32","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#ext_8","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 8 stores an integer and a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a ByteSeq that is larger than (2^8)-1 bytes in size will result in an error . fun box ext_8( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"ext_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_32","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_33","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#ext_16","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 16 stores an integer and a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a ByteSeq that is larger than (2^16)-1 bytes in size will result in an error . fun box ext_16( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"ext_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_33","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_34","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#ext_32","text":"[Source] Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value v to be encoded, but a unique type identifier t as well. Type identifiers 0 to 127 are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 32 stores an integer and a byte array whose length is upto (2^32)-1 bytes. Attempting to encode a ByteSeq that is larger than (2^32)-1 bytes in size will result in an error . fun box ext_32( b: Writer ref, t: U8 val, v: (String val | Array[U8 val] val)) : None val ?","title":"ext_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_34","text":"b: Writer ref t: U8 val v: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_35","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#eq","text":"[Source] fun box eq( that: MessagePackEncoder val) : Bool val","title":"eq"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_35","text":"that: MessagePackEncoder val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_36","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#ne","text":"[Source] fun box ne( that: MessagePackEncoder val) : Bool val","title":"ne"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_36","text":"that: MessagePackEncoder val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_37","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#private-functions","text":"","title":"Private Functions"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#_write_type","text":"[Source] fun box _write_type( b: Writer ref, t: U8 val) : None val","title":"_write_type"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_37","text":"b: Writer ref t: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_38","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#_write_fixed_value","text":"[Source] fun box _write_fixed_value( b: Writer ref, v: U8 val) : None val","title":"_write_fixed_value"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_38","text":"b: Writer ref v: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_39","text":"None val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#_write_btye_array_8","text":"[Source] fun box _write_btye_array_8( b: Writer ref, v: (String val | Array[U8 val] val), t: U8 val) : None val ?","title":"_write_btye_array_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_39","text":"b: Writer ref v: ( String val | Array [ U8 val] val) t: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_40","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#_write_btye_array_16","text":"[Source] fun box _write_btye_array_16( b: Writer ref, v: (String val | Array[U8 val] val), t: U8 val) : None val ?","title":"_write_btye_array_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_40","text":"b: Writer ref v: ( String val | Array [ U8 val] val) t: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_41","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#_write_btye_array_32","text":"[Source] fun box _write_btye_array_32( b: Writer ref, v: (String val | Array[U8 val] val), t: U8 val) : None val ?","title":"_write_btye_array_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#parameters_41","text":"b: Writer ref v: ( String val | Array [ U8 val] val) t: U8 val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-MessagePackEncoder/#returns_42","text":"None val ?","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/","text":"_FormatName [Source] primitive val _FormatName Constructors create [Source] new val create() : _FormatName val^ Returns _FormatName val^ Public Functions positive_fixint [Source] fun box positive_fixint() : U8 val Returns U8 val fixmap [Source] fun box fixmap() : U8 val Returns U8 val fixarray [Source] fun box fixarray() : U8 val Returns U8 val fixstr [Source] fun box fixstr() : U8 val Returns U8 val nil [Source] fun box nil() : U8 val Returns U8 val falsey [Source] fun box falsey() : U8 val Returns U8 val truthy [Source] fun box truthy() : U8 val Returns U8 val bin_8 [Source] fun box bin_8() : U8 val Returns U8 val bin_16 [Source] fun box bin_16() : U8 val Returns U8 val bin_32 [Source] fun box bin_32() : U8 val Returns U8 val ext_8 [Source] fun box ext_8() : U8 val Returns U8 val ext_16 [Source] fun box ext_16() : U8 val Returns U8 val ext_32 [Source] fun box ext_32() : U8 val Returns U8 val float_32 [Source] fun box float_32() : U8 val Returns U8 val float_64 [Source] fun box float_64() : U8 val Returns U8 val uint_8 [Source] fun box uint_8() : U8 val Returns U8 val uint_16 [Source] fun box uint_16() : U8 val Returns U8 val uint_32 [Source] fun box uint_32() : U8 val Returns U8 val uint_64 [Source] fun box uint_64() : U8 val Returns U8 val int_8 [Source] fun box int_8() : U8 val Returns U8 val int_16 [Source] fun box int_16() : U8 val Returns U8 val int_32 [Source] fun box int_32() : U8 val Returns U8 val int_64 [Source] fun box int_64() : U8 val Returns U8 val fixext_1 [Source] fun box fixext_1() : U8 val Returns U8 val fixext_2 [Source] fun box fixext_2() : U8 val Returns U8 val fixext_4 [Source] fun box fixext_4() : U8 val Returns U8 val fixext_8 [Source] fun box fixext_8() : U8 val Returns U8 val fixext_16 [Source] fun box fixext_16() : U8 val Returns U8 val str_8 [Source] fun box str_8() : U8 val Returns U8 val str_16 [Source] fun box str_16() : U8 val Returns U8 val str_32 [Source] fun box str_32() : U8 val Returns U8 val array_16 [Source] fun box array_16() : U8 val Returns U8 val array_32 [Source] fun box array_32() : U8 val Returns U8 val map_16 [Source] fun box map_16() : U8 val Returns U8 val map_32 [Source] fun box map_32() : U8 val Returns U8 val negative_fixint [Source] fun box negative_fixint() : U8 val Returns U8 val eq [Source] fun box eq( that: _FormatName val) : Bool val Parameters that: _FormatName val Returns Bool val ne [Source] fun box ne( that: _FormatName val) : Bool val Parameters that: _FormatName val Returns Bool val","title":"primitive _FormatName"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#_formatname","text":"[Source] primitive val _FormatName","title":"_FormatName"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#create","text":"[Source] new val create() : _FormatName val^","title":"create"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns","text":"_FormatName val^","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#positive_fixint","text":"[Source] fun box positive_fixint() : U8 val","title":"positive_fixint"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_1","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixmap","text":"[Source] fun box fixmap() : U8 val","title":"fixmap"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_2","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixarray","text":"[Source] fun box fixarray() : U8 val","title":"fixarray"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_3","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixstr","text":"[Source] fun box fixstr() : U8 val","title":"fixstr"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_4","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#nil","text":"[Source] fun box nil() : U8 val","title":"nil"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_5","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#falsey","text":"[Source] fun box falsey() : U8 val","title":"falsey"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_6","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#truthy","text":"[Source] fun box truthy() : U8 val","title":"truthy"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_7","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#bin_8","text":"[Source] fun box bin_8() : U8 val","title":"bin_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_8","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#bin_16","text":"[Source] fun box bin_16() : U8 val","title":"bin_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_9","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#bin_32","text":"[Source] fun box bin_32() : U8 val","title":"bin_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_10","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#ext_8","text":"[Source] fun box ext_8() : U8 val","title":"ext_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_11","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#ext_16","text":"[Source] fun box ext_16() : U8 val","title":"ext_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_12","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#ext_32","text":"[Source] fun box ext_32() : U8 val","title":"ext_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_13","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#float_32","text":"[Source] fun box float_32() : U8 val","title":"float_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_14","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#float_64","text":"[Source] fun box float_64() : U8 val","title":"float_64"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_15","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#uint_8","text":"[Source] fun box uint_8() : U8 val","title":"uint_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_16","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#uint_16","text":"[Source] fun box uint_16() : U8 val","title":"uint_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_17","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#uint_32","text":"[Source] fun box uint_32() : U8 val","title":"uint_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_18","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#uint_64","text":"[Source] fun box uint_64() : U8 val","title":"uint_64"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_19","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#int_8","text":"[Source] fun box int_8() : U8 val","title":"int_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_20","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#int_16","text":"[Source] fun box int_16() : U8 val","title":"int_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_21","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#int_32","text":"[Source] fun box int_32() : U8 val","title":"int_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_22","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#int_64","text":"[Source] fun box int_64() : U8 val","title":"int_64"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_23","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixext_1","text":"[Source] fun box fixext_1() : U8 val","title":"fixext_1"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_24","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixext_2","text":"[Source] fun box fixext_2() : U8 val","title":"fixext_2"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_25","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixext_4","text":"[Source] fun box fixext_4() : U8 val","title":"fixext_4"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_26","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixext_8","text":"[Source] fun box fixext_8() : U8 val","title":"fixext_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_27","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#fixext_16","text":"[Source] fun box fixext_16() : U8 val","title":"fixext_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_28","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#str_8","text":"[Source] fun box str_8() : U8 val","title":"str_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_29","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#str_16","text":"[Source] fun box str_16() : U8 val","title":"str_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_30","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#str_32","text":"[Source] fun box str_32() : U8 val","title":"str_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_31","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#array_16","text":"[Source] fun box array_16() : U8 val","title":"array_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_32","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#array_32","text":"[Source] fun box array_32() : U8 val","title":"array_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_33","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#map_16","text":"[Source] fun box map_16() : U8 val","title":"map_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_34","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#map_32","text":"[Source] fun box map_32() : U8 val","title":"map_32"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_35","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#negative_fixint","text":"[Source] fun box negative_fixint() : U8 val","title":"negative_fixint"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_36","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#eq","text":"[Source] fun box eq( that: _FormatName val) : Bool val","title":"eq"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#parameters","text":"that: _FormatName val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_37","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#ne","text":"[Source] fun box ne( that: _FormatName val) : Bool val","title":"ne"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#parameters_1","text":"that: _FormatName val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_FormatName/#returns_38","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/","text":"_Limit [Source] primitive val _Limit Constructors create [Source] new val create() : _Limit val^ Returns _Limit val^ Public Functions fixarray [Source] fun box fixarray() : U8 val Returns U8 val fixmap [Source] fun box fixmap() : U8 val Returns U8 val fixstr [Source] fun box fixstr() : USize val Returns USize val positive_fixint [Source] fun box positive_fixint() : U8 val Returns U8 val negative_fixint_low [Source] fun box negative_fixint_low() : I8 val Returns I8 val negative_fixint_high [Source] fun box negative_fixint_high() : I8 val Returns I8 val eq [Source] fun box eq( that: _Limit val) : Bool val Parameters that: _Limit val Returns Bool val ne [Source] fun box ne( that: _Limit val) : Bool val Parameters that: _Limit val Returns Bool val","title":"primitive _Limit"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#_limit","text":"[Source] primitive val _Limit","title":"_Limit"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#create","text":"[Source] new val create() : _Limit val^","title":"create"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns","text":"_Limit val^","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#fixarray","text":"[Source] fun box fixarray() : U8 val","title":"fixarray"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_1","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#fixmap","text":"[Source] fun box fixmap() : U8 val","title":"fixmap"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_2","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#fixstr","text":"[Source] fun box fixstr() : USize val","title":"fixstr"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_3","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#positive_fixint","text":"[Source] fun box positive_fixint() : U8 val","title":"positive_fixint"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_4","text":"U8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#negative_fixint_low","text":"[Source] fun box negative_fixint_low() : I8 val","title":"negative_fixint_low"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_5","text":"I8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#negative_fixint_high","text":"[Source] fun box negative_fixint_high() : I8 val","title":"negative_fixint_high"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_6","text":"I8 val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#eq","text":"[Source] fun box eq( that: _Limit val) : Bool val","title":"eq"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#parameters","text":"that: _Limit val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_7","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#ne","text":"[Source] fun box ne( that: _Limit val) : Bool val","title":"ne"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#parameters_1","text":"that: _Limit val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Limit/#returns_8","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/","text":"_Size [Source] primitive val _Size Constructors create [Source] new val create() : _Size val^ Returns _Size val^ Public Functions fixext_1 [Source] fun box fixext_1() : USize val Returns USize val fixext_2 [Source] fun box fixext_2() : USize val Returns USize val fixext_4 [Source] fun box fixext_4() : USize val Returns USize val fixext_8 [Source] fun box fixext_8() : USize val Returns USize val fixext_16 [Source] fun box fixext_16() : USize val Returns USize val eq [Source] fun box eq( that: _Size val) : Bool val Parameters that: _Size val Returns Bool val ne [Source] fun box ne( that: _Size val) : Bool val Parameters that: _Size val Returns Bool val","title":"primitive _Size"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#_size","text":"[Source] primitive val _Size","title":"_Size"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#constructors","text":"","title":"Constructors"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#create","text":"[Source] new val create() : _Size val^","title":"create"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns","text":"_Size val^","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#public-functions","text":"","title":"Public Functions"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#fixext_1","text":"[Source] fun box fixext_1() : USize val","title":"fixext_1"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_1","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#fixext_2","text":"[Source] fun box fixext_2() : USize val","title":"fixext_2"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_2","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#fixext_4","text":"[Source] fun box fixext_4() : USize val","title":"fixext_4"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_3","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#fixext_8","text":"[Source] fun box fixext_8() : USize val","title":"fixext_8"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_4","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#fixext_16","text":"[Source] fun box fixext_16() : USize val","title":"fixext_16"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_5","text":"USize val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#eq","text":"[Source] fun box eq( that: _Size val) : Bool val","title":"eq"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#parameters","text":"that: _Size val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_6","text":"Bool val","title":"Returns"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#ne","text":"[Source] fun box ne( that: _Size val) : Bool val","title":"ne"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#parameters_1","text":"that: _Size val","title":"Parameters"},{"location":"-tmp-tmp.A5vVG1JKko-msgpack-0.1-msgpack-_Size/#returns_7","text":"Bool val","title":"Returns"},{"location":"buffered--index/","text":"Buffered Package The Buffered package provides two classes, Writer and Reader , for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats. Example program use buffered actor Main new create(env: Env) = let reader = Reader let writer = Writer writer.u32_be(42) writer.f32_be(3.14) let b = recover iso Array[U8] end for chunk in writer.done().values() do b.append(chunk) end reader.append(consume b) try env.out.print(reader.u32_be()?.string()) // prints 42 env.out.print(reader.f32_be()?.string()) // prints 3.14 end Public Types class Writer class Reader","title":"Package"},{"location":"buffered--index/#buffered-package","text":"The Buffered package provides two classes, Writer and Reader , for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats.","title":"Buffered Package"},{"location":"buffered--index/#example-program","text":"use buffered actor Main new create(env: Env) = let reader = Reader let writer = Writer writer.u32_be(42) writer.f32_be(3.14) let b = recover iso Array[U8] end for chunk in writer.done().values() do b.append(chunk) end reader.append(consume b) try env.out.print(reader.u32_be()?.string()) // prints 42 env.out.print(reader.f32_be()?.string()) // prints 3.14 end","title":"Example program"},{"location":"buffered--index/#public-types","text":"class Writer class Reader","title":"Public Types"},{"location":"buffered-Reader/","text":"Reader [Source] Store network data and provide a parsing interface. Reader provides a way to extract typed data from a sequence of bytes. The Reader manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the Reader using the append method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a Reader to decode a message of this type and print them: use buffered use collections class Notify is InputNotify let _env: Env new create(env: Env) = _env = env fun ref apply(data: Array[U8] iso) = let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print( [( + f.string() + ), ( + str + )] ) end end end actor Main new create(env: Env) = env.input(recover Notify(env) end, 1024) class ref Reader Constructors create [Source] new iso create() : Reader iso^ Returns Reader iso^ Public Functions size [Source] Return the number of available bytes. fun box size() : USize val Returns USize val clear [Source] Discard all pending data. fun ref clear() : None val Returns None val append [Source] Add a chunk of data. fun ref append( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val skip [Source] Skip n bytes. fun ref skip( n: USize val) : None val ? Parameters n: USize val Returns None val ? block [Source] Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the Reader . fun ref block( len: USize val) : Array[U8 val] iso^ ? Parameters len: USize val Returns Array [ U8 val] iso^ ? read_until [Source] Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. fun ref read_until( separator: U8 val) : Array[U8 val] iso^ ? Parameters separator: U8 val Returns Array [ U8 val] iso^ ? line [Source] Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set keep_line_breaks to true to keep the line breaks in the returned line. fun ref line( keep_line_breaks: Bool val = seq) : String iso^ ? Parameters keep_line_breaks: Bool val = seq Returns String iso^ ? u8 [Source] Get a U8. Raise an error if there isn't enough data. fun ref u8() : U8 val ? Returns U8 val ? i8 [Source] Get an I8. fun ref i8() : I8 val ? Returns I8 val ? u16_be [Source] Get a big-endian U16. fun ref u16_be() : U16 val ? Returns U16 val ? u16_le [Source] Get a little-endian U16. fun ref u16_le() : U16 val ? Returns U16 val ? i16_be [Source] Get a big-endian I16. fun ref i16_be() : I16 val ? Returns I16 val ? i16_le [Source] Get a little-endian I16. fun ref i16_le() : I16 val ? Returns I16 val ? u32_be [Source] Get a big-endian U32. fun ref u32_be() : U32 val ? Returns U32 val ? u32_le [Source] Get a little-endian U32. fun ref u32_le() : U32 val ? Returns U32 val ? i32_be [Source] Get a big-endian I32. fun ref i32_be() : I32 val ? Returns I32 val ? i32_le [Source] Get a little-endian I32. fun ref i32_le() : I32 val ? Returns I32 val ? u64_be [Source] Get a big-endian U64. fun ref u64_be() : U64 val ? Returns U64 val ? u64_le [Source] Get a little-endian U64. fun ref u64_le() : U64 val ? Returns U64 val ? i64_be [Source] Get a big-endian I64. fun ref i64_be() : I64 val ? Returns I64 val ? i64_le [Source] Get a little-endian I64. fun ref i64_le() : I64 val ? Returns I64 val ? u128_be [Source] Get a big-endian U128. fun ref u128_be() : U128 val ? Returns U128 val ? u128_le [Source] Get a little-endian U128. fun ref u128_le() : U128 val ? Returns U128 val ? i128_be [Source] Get a big-endian I129. fun ref i128_be() : I128 val ? Returns I128 val ? i128_le [Source] Get a little-endian I128. fun ref i128_le() : I128 val ? Returns I128 val ? f32_be [Source] Get a big-endian F32. fun ref f32_be() : F32 val ? Returns F32 val ? f32_le [Source] Get a little-endian F32. fun ref f32_le() : F32 val ? Returns F32 val ? f64_be [Source] Get a big-endian F64. fun ref f64_be() : F64 val ? Returns F64 val ? f64_le [Source] Get a little-endian F64. fun ref f64_le() : F64 val ? Returns F64 val ? peek_u8 [Source] Peek at a U8 at the given offset. Raise an error if there isn't enough data. fun box peek_u8( offset: USize val = seq) : U8 val ? Parameters offset: USize val = seq Returns U8 val ? peek_i8 [Source] Peek at an I8. fun box peek_i8( offset: USize val = seq) : I8 val ? Parameters offset: USize val = seq Returns I8 val ? peek_u16_be [Source] Peek at a big-endian U16. fun box peek_u16_be( offset: USize val = seq) : U16 val ? Parameters offset: USize val = seq Returns U16 val ? peek_u16_le [Source] Peek at a little-endian U16. fun box peek_u16_le( offset: USize val = seq) : U16 val ? Parameters offset: USize val = seq Returns U16 val ? peek_i16_be [Source] Peek at a big-endian I16. fun box peek_i16_be( offset: USize val = seq) : I16 val ? Parameters offset: USize val = seq Returns I16 val ? peek_i16_le [Source] Peek at a little-endian I16. fun box peek_i16_le( offset: USize val = seq) : I16 val ? Parameters offset: USize val = seq Returns I16 val ? peek_u32_be [Source] Peek at a big-endian U32. fun box peek_u32_be( offset: USize val = seq) : U32 val ? Parameters offset: USize val = seq Returns U32 val ? peek_u32_le [Source] Peek at a little-endian U32. fun box peek_u32_le( offset: USize val = seq) : U32 val ? Parameters offset: USize val = seq Returns U32 val ? peek_i32_be [Source] Peek at a big-endian I32. fun box peek_i32_be( offset: USize val = seq) : I32 val ? Parameters offset: USize val = seq Returns I32 val ? peek_i32_le [Source] Peek at a little-endian I32. fun box peek_i32_le( offset: USize val = seq) : I32 val ? Parameters offset: USize val = seq Returns I32 val ? peek_u64_be [Source] Peek at a big-endian U64. fun box peek_u64_be( offset: USize val = seq) : U64 val ? Parameters offset: USize val = seq Returns U64 val ? peek_u64_le [Source] Peek at a little-endian U64. fun box peek_u64_le( offset: USize val = seq) : U64 val ? Parameters offset: USize val = seq Returns U64 val ? peek_i64_be [Source] Peek at a big-endian I64. fun box peek_i64_be( offset: USize val = seq) : I64 val ? Parameters offset: USize val = seq Returns I64 val ? peek_i64_le [Source] Peek at a little-endian I64. fun box peek_i64_le( offset: USize val = seq) : I64 val ? Parameters offset: USize val = seq Returns I64 val ? peek_u128_be [Source] Peek at a big-endian U128. fun box peek_u128_be( offset: USize val = seq) : U128 val ? Parameters offset: USize val = seq Returns U128 val ? peek_u128_le [Source] Peek at a little-endian U128. fun box peek_u128_le( offset: USize val = seq) : U128 val ? Parameters offset: USize val = seq Returns U128 val ? peek_i128_be [Source] Peek at a big-endian I129. fun box peek_i128_be( offset: USize val = seq) : I128 val ? Parameters offset: USize val = seq Returns I128 val ? peek_i128_le [Source] Peek at a little-endian I128. fun box peek_i128_le( offset: USize val = seq) : I128 val ? Parameters offset: USize val = seq Returns I128 val ? peek_f32_be [Source] Peek at a big-endian F32. fun box peek_f32_be( offset: USize val = seq) : F32 val ? Parameters offset: USize val = seq Returns F32 val ? peek_f32_le [Source] Peek at a little-endian F32. fun box peek_f32_le( offset: USize val = seq) : F32 val ? Parameters offset: USize val = seq Returns F32 val ? peek_f64_be [Source] Peek at a big-endian F64. fun box peek_f64_be( offset: USize val = seq) : F64 val ? Parameters offset: USize val = seq Returns F64 val ? peek_f64_le [Source] Peek at a little-endian F64. fun box peek_f64_le( offset: USize val = seq) : F64 val ? Parameters offset: USize val = seq Returns F64 val ? Private Functions _byte [Source] Get a single byte. fun ref _byte() : U8 val ? Returns U8 val ? _peek_byte [Source] Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. fun box _peek_byte( offset: USize val = seq) : U8 val ? Parameters offset: USize val = seq Returns U8 val ? _distance_of [Source] Get the distance to the first occurrence of the given byte fun ref _distance_of( byte: U8 val) : USize val ? Parameters byte: U8 val Returns USize val ? _search_length [Source] Get the length of a pending line. Raise an error if there is no pending line. fun ref _search_length() : USize val ? Returns USize val ?","title":"class Reader"},{"location":"buffered-Reader/#reader","text":"[Source] Store network data and provide a parsing interface. Reader provides a way to extract typed data from a sequence of bytes. The Reader manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the Reader using the append method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a Reader to decode a message of this type and print them: use buffered use collections class Notify is InputNotify let _env: Env new create(env: Env) = _env = env fun ref apply(data: Array[U8] iso) = let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print( [( + f.string() + ), ( + str + )] ) end end end actor Main new create(env: Env) = env.input(recover Notify(env) end, 1024) class ref Reader","title":"Reader"},{"location":"buffered-Reader/#constructors","text":"","title":"Constructors"},{"location":"buffered-Reader/#create","text":"[Source] new iso create() : Reader iso^","title":"create"},{"location":"buffered-Reader/#returns","text":"Reader iso^","title":"Returns"},{"location":"buffered-Reader/#public-functions","text":"","title":"Public Functions"},{"location":"buffered-Reader/#size","text":"[Source] Return the number of available bytes. fun box size() : USize val","title":"size"},{"location":"buffered-Reader/#returns_1","text":"USize val","title":"Returns"},{"location":"buffered-Reader/#clear","text":"[Source] Discard all pending data. fun ref clear() : None val","title":"clear"},{"location":"buffered-Reader/#returns_2","text":"None val","title":"Returns"},{"location":"buffered-Reader/#append","text":"[Source] Add a chunk of data. fun ref append( data: (String val | Array[U8 val] val)) : None val","title":"append"},{"location":"buffered-Reader/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"buffered-Reader/#returns_3","text":"None val","title":"Returns"},{"location":"buffered-Reader/#skip","text":"[Source] Skip n bytes. fun ref skip( n: USize val) : None val ?","title":"skip"},{"location":"buffered-Reader/#parameters_1","text":"n: USize val","title":"Parameters"},{"location":"buffered-Reader/#returns_4","text":"None val ?","title":"Returns"},{"location":"buffered-Reader/#block","text":"[Source] Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the Reader . fun ref block( len: USize val) : Array[U8 val] iso^ ?","title":"block"},{"location":"buffered-Reader/#parameters_2","text":"len: USize val","title":"Parameters"},{"location":"buffered-Reader/#returns_5","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"buffered-Reader/#read_until","text":"[Source] Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. fun ref read_until( separator: U8 val) : Array[U8 val] iso^ ?","title":"read_until"},{"location":"buffered-Reader/#parameters_3","text":"separator: U8 val","title":"Parameters"},{"location":"buffered-Reader/#returns_6","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"buffered-Reader/#line","text":"[Source] Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set keep_line_breaks to true to keep the line breaks in the returned line. fun ref line( keep_line_breaks: Bool val = seq) : String iso^ ?","title":"line"},{"location":"buffered-Reader/#parameters_4","text":"keep_line_breaks: Bool val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_7","text":"String iso^ ?","title":"Returns"},{"location":"buffered-Reader/#u8","text":"[Source] Get a U8. Raise an error if there isn't enough data. fun ref u8() : U8 val ?","title":"u8"},{"location":"buffered-Reader/#returns_8","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#i8","text":"[Source] Get an I8. fun ref i8() : I8 val ?","title":"i8"},{"location":"buffered-Reader/#returns_9","text":"I8 val ?","title":"Returns"},{"location":"buffered-Reader/#u16_be","text":"[Source] Get a big-endian U16. fun ref u16_be() : U16 val ?","title":"u16_be"},{"location":"buffered-Reader/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#u16_le","text":"[Source] Get a little-endian U16. fun ref u16_le() : U16 val ?","title":"u16_le"},{"location":"buffered-Reader/#returns_11","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#i16_be","text":"[Source] Get a big-endian I16. fun ref i16_be() : I16 val ?","title":"i16_be"},{"location":"buffered-Reader/#returns_12","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#i16_le","text":"[Source] Get a little-endian I16. fun ref i16_le() : I16 val ?","title":"i16_le"},{"location":"buffered-Reader/#returns_13","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#u32_be","text":"[Source] Get a big-endian U32. fun ref u32_be() : U32 val ?","title":"u32_be"},{"location":"buffered-Reader/#returns_14","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#u32_le","text":"[Source] Get a little-endian U32. fun ref u32_le() : U32 val ?","title":"u32_le"},{"location":"buffered-Reader/#returns_15","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#i32_be","text":"[Source] Get a big-endian I32. fun ref i32_be() : I32 val ?","title":"i32_be"},{"location":"buffered-Reader/#returns_16","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#i32_le","text":"[Source] Get a little-endian I32. fun ref i32_le() : I32 val ?","title":"i32_le"},{"location":"buffered-Reader/#returns_17","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#u64_be","text":"[Source] Get a big-endian U64. fun ref u64_be() : U64 val ?","title":"u64_be"},{"location":"buffered-Reader/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#u64_le","text":"[Source] Get a little-endian U64. fun ref u64_le() : U64 val ?","title":"u64_le"},{"location":"buffered-Reader/#returns_19","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#i64_be","text":"[Source] Get a big-endian I64. fun ref i64_be() : I64 val ?","title":"i64_be"},{"location":"buffered-Reader/#returns_20","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#i64_le","text":"[Source] Get a little-endian I64. fun ref i64_le() : I64 val ?","title":"i64_le"},{"location":"buffered-Reader/#returns_21","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#u128_be","text":"[Source] Get a big-endian U128. fun ref u128_be() : U128 val ?","title":"u128_be"},{"location":"buffered-Reader/#returns_22","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#u128_le","text":"[Source] Get a little-endian U128. fun ref u128_le() : U128 val ?","title":"u128_le"},{"location":"buffered-Reader/#returns_23","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#i128_be","text":"[Source] Get a big-endian I129. fun ref i128_be() : I128 val ?","title":"i128_be"},{"location":"buffered-Reader/#returns_24","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#i128_le","text":"[Source] Get a little-endian I128. fun ref i128_le() : I128 val ?","title":"i128_le"},{"location":"buffered-Reader/#returns_25","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#f32_be","text":"[Source] Get a big-endian F32. fun ref f32_be() : F32 val ?","title":"f32_be"},{"location":"buffered-Reader/#returns_26","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#f32_le","text":"[Source] Get a little-endian F32. fun ref f32_le() : F32 val ?","title":"f32_le"},{"location":"buffered-Reader/#returns_27","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#f64_be","text":"[Source] Get a big-endian F64. fun ref f64_be() : F64 val ?","title":"f64_be"},{"location":"buffered-Reader/#returns_28","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#f64_le","text":"[Source] Get a little-endian F64. fun ref f64_le() : F64 val ?","title":"f64_le"},{"location":"buffered-Reader/#returns_29","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u8","text":"[Source] Peek at a U8 at the given offset. Raise an error if there isn't enough data. fun box peek_u8( offset: USize val = seq) : U8 val ?","title":"peek_u8"},{"location":"buffered-Reader/#parameters_5","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_30","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i8","text":"[Source] Peek at an I8. fun box peek_i8( offset: USize val = seq) : I8 val ?","title":"peek_i8"},{"location":"buffered-Reader/#parameters_6","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_31","text":"I8 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u16_be","text":"[Source] Peek at a big-endian U16. fun box peek_u16_be( offset: USize val = seq) : U16 val ?","title":"peek_u16_be"},{"location":"buffered-Reader/#parameters_7","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_32","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u16_le","text":"[Source] Peek at a little-endian U16. fun box peek_u16_le( offset: USize val = seq) : U16 val ?","title":"peek_u16_le"},{"location":"buffered-Reader/#parameters_8","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_33","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i16_be","text":"[Source] Peek at a big-endian I16. fun box peek_i16_be( offset: USize val = seq) : I16 val ?","title":"peek_i16_be"},{"location":"buffered-Reader/#parameters_9","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_34","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i16_le","text":"[Source] Peek at a little-endian I16. fun box peek_i16_le( offset: USize val = seq) : I16 val ?","title":"peek_i16_le"},{"location":"buffered-Reader/#parameters_10","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_35","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u32_be","text":"[Source] Peek at a big-endian U32. fun box peek_u32_be( offset: USize val = seq) : U32 val ?","title":"peek_u32_be"},{"location":"buffered-Reader/#parameters_11","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_36","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u32_le","text":"[Source] Peek at a little-endian U32. fun box peek_u32_le( offset: USize val = seq) : U32 val ?","title":"peek_u32_le"},{"location":"buffered-Reader/#parameters_12","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_37","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i32_be","text":"[Source] Peek at a big-endian I32. fun box peek_i32_be( offset: USize val = seq) : I32 val ?","title":"peek_i32_be"},{"location":"buffered-Reader/#parameters_13","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_38","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i32_le","text":"[Source] Peek at a little-endian I32. fun box peek_i32_le( offset: USize val = seq) : I32 val ?","title":"peek_i32_le"},{"location":"buffered-Reader/#parameters_14","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_39","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u64_be","text":"[Source] Peek at a big-endian U64. fun box peek_u64_be( offset: USize val = seq) : U64 val ?","title":"peek_u64_be"},{"location":"buffered-Reader/#parameters_15","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_40","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u64_le","text":"[Source] Peek at a little-endian U64. fun box peek_u64_le( offset: USize val = seq) : U64 val ?","title":"peek_u64_le"},{"location":"buffered-Reader/#parameters_16","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_41","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i64_be","text":"[Source] Peek at a big-endian I64. fun box peek_i64_be( offset: USize val = seq) : I64 val ?","title":"peek_i64_be"},{"location":"buffered-Reader/#parameters_17","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_42","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i64_le","text":"[Source] Peek at a little-endian I64. fun box peek_i64_le( offset: USize val = seq) : I64 val ?","title":"peek_i64_le"},{"location":"buffered-Reader/#parameters_18","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_43","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u128_be","text":"[Source] Peek at a big-endian U128. fun box peek_u128_be( offset: USize val = seq) : U128 val ?","title":"peek_u128_be"},{"location":"buffered-Reader/#parameters_19","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_44","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u128_le","text":"[Source] Peek at a little-endian U128. fun box peek_u128_le( offset: USize val = seq) : U128 val ?","title":"peek_u128_le"},{"location":"buffered-Reader/#parameters_20","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_45","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i128_be","text":"[Source] Peek at a big-endian I129. fun box peek_i128_be( offset: USize val = seq) : I128 val ?","title":"peek_i128_be"},{"location":"buffered-Reader/#parameters_21","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_46","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i128_le","text":"[Source] Peek at a little-endian I128. fun box peek_i128_le( offset: USize val = seq) : I128 val ?","title":"peek_i128_le"},{"location":"buffered-Reader/#parameters_22","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_47","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f32_be","text":"[Source] Peek at a big-endian F32. fun box peek_f32_be( offset: USize val = seq) : F32 val ?","title":"peek_f32_be"},{"location":"buffered-Reader/#parameters_23","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_48","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f32_le","text":"[Source] Peek at a little-endian F32. fun box peek_f32_le( offset: USize val = seq) : F32 val ?","title":"peek_f32_le"},{"location":"buffered-Reader/#parameters_24","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_49","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f64_be","text":"[Source] Peek at a big-endian F64. fun box peek_f64_be( offset: USize val = seq) : F64 val ?","title":"peek_f64_be"},{"location":"buffered-Reader/#parameters_25","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_50","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f64_le","text":"[Source] Peek at a little-endian F64. fun box peek_f64_le( offset: USize val = seq) : F64 val ?","title":"peek_f64_le"},{"location":"buffered-Reader/#parameters_26","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_51","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#private-functions","text":"","title":"Private Functions"},{"location":"buffered-Reader/#_byte","text":"[Source] Get a single byte. fun ref _byte() : U8 val ?","title":"_byte"},{"location":"buffered-Reader/#returns_52","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#_peek_byte","text":"[Source] Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. fun box _peek_byte( offset: USize val = seq) : U8 val ?","title":"_peek_byte"},{"location":"buffered-Reader/#parameters_27","text":"offset: USize val = seq","title":"Parameters"},{"location":"buffered-Reader/#returns_53","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#_distance_of","text":"[Source] Get the distance to the first occurrence of the given byte fun ref _distance_of( byte: U8 val) : USize val ?","title":"_distance_of"},{"location":"buffered-Reader/#parameters_28","text":"byte: U8 val","title":"Parameters"},{"location":"buffered-Reader/#returns_54","text":"USize val ?","title":"Returns"},{"location":"buffered-Reader/#_search_length","text":"[Source] Get the length of a pending line. Raise an error if there is no pending line. fun ref _search_length() : USize val ?","title":"_search_length"},{"location":"buffered-Reader/#returns_55","text":"USize val ?","title":"Returns"},{"location":"buffered-Writer/","text":"Writer [Source] A buffer for building messages. Writer provides an way to create byte sequences using common data encodings. The Writer manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call done() to get the message's ByteSeq s, and you can then reuse the Writer for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: message_length - the number of bytes in the message as a big-endian 32-bit integer list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a write buffer to encode an array of tuples as a message of this type: use buffered actor Main new create(env: Env) = let wb = Writer let messages = [[(F32(3597.82), Anderson ); (F32(-7979.3), Graham )] [(F32(3.14159), Hopper ); (F32(-83.83), Jones )]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end class ref Writer Constructors create [Source] new iso create() : Writer iso^ Returns Writer iso^ Public Functions reserve_chunks [Source] Reserve space for size' chunks. This needs to be recalled after every call to done as done resets the chunks. fun ref reserve_chunks( size': USize val) : None val Parameters size': USize val Returns None val reserve_current [Source] Reserve space for size bytes in _current . fun ref reserve_current( size': USize val) : None val Parameters size': USize val Returns None val size [Source] fun box size() : USize val Returns USize val u8 [Source] Write a byte to the buffer. fun ref u8( data: U8 val) : None val Parameters data: U8 val Returns None val u16_le [Source] Write a U16 to the buffer in little-endian byte order. fun ref u16_le( data: U16 val) : None val Parameters data: U16 val Returns None val u16_be [Source] Write a U16 to the buffer in big-endian byte order. fun ref u16_be( data: U16 val) : None val Parameters data: U16 val Returns None val i16_le [Source] Write an I16 to the buffer in little-endian byte order. fun ref i16_le( data: I16 val) : None val Parameters data: I16 val Returns None val i16_be [Source] Write an I16 to the buffer in big-endian byte order. fun ref i16_be( data: I16 val) : None val Parameters data: I16 val Returns None val u32_le [Source] Write a U32 to the buffer in little-endian byte order. fun ref u32_le( data: U32 val) : None val Parameters data: U32 val Returns None val u32_be [Source] Write a U32 to the buffer in big-endian byte order. fun ref u32_be( data: U32 val) : None val Parameters data: U32 val Returns None val i32_le [Source] Write an I32 to the buffer in little-endian byte order. fun ref i32_le( data: I32 val) : None val Parameters data: I32 val Returns None val i32_be [Source] Write an I32 to the buffer in big-endian byte order. fun ref i32_be( data: I32 val) : None val Parameters data: I32 val Returns None val f32_le [Source] Write an F32 to the buffer in little-endian byte order. fun ref f32_le( data: F32 val) : None val Parameters data: F32 val Returns None val f32_be [Source] Write an F32 to the buffer in big-endian byte order. fun ref f32_be( data: F32 val) : None val Parameters data: F32 val Returns None val u64_le [Source] Write a U64 to the buffer in little-endian byte order. fun ref u64_le( data: U64 val) : None val Parameters data: U64 val Returns None val u64_be [Source] Write a U64 to the buffer in big-endian byte order. fun ref u64_be( data: U64 val) : None val Parameters data: U64 val Returns None val i64_le [Source] Write an I64 to the buffer in little-endian byte order. fun ref i64_le( data: I64 val) : None val Parameters data: I64 val Returns None val i64_be [Source] Write an I64 to the buffer in big-endian byte order. fun ref i64_be( data: I64 val) : None val Parameters data: I64 val Returns None val f64_le [Source] Write an F64 to the buffer in little-endian byte order. fun ref f64_le( data: F64 val) : None val Parameters data: F64 val Returns None val f64_be [Source] Write an F64 to the buffer in big-endian byte order. fun ref f64_be( data: F64 val) : None val Parameters data: F64 val Returns None val u128_le [Source] Write a U128 to the buffer in little-endian byte order. fun ref u128_le( data: U128 val) : None val Parameters data: U128 val Returns None val u128_be [Source] Write a U128 to the buffer in big-endian byte order. fun ref u128_be( data: U128 val) : None val Parameters data: U128 val Returns None val i128_le [Source] Write an I128 to the buffer in little-endian byte order. fun ref i128_le( data: I128 val) : None val Parameters data: I128 val Returns None val i128_be [Source] Write an I128 to the buffer in big-endian byte order. fun ref i128_be( data: I128 val) : None val Parameters data: I128 val Returns None val write [Source] Write a ByteSeq to the buffer. fun ref write( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val writev [Source] Write ByteSeqs to the buffer. fun ref writev( data: ByteSeqIter val) : None val Parameters data: ByteSeqIter val Returns None val done [Source] Return an array of buffered ByteSeqs and reset the Writer's buffer. fun ref done() : Array[(String val | Array[U8 val] val)] iso^ Returns Array [( String val | Array [ U8 val] val)] iso^ Private Functions _append_current [Source] fun ref _append_current() : None val Returns None val","title":"class Writer"},{"location":"buffered-Writer/#writer","text":"[Source] A buffer for building messages. Writer provides an way to create byte sequences using common data encodings. The Writer manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call done() to get the message's ByteSeq s, and you can then reuse the Writer for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: message_length - the number of bytes in the message as a big-endian 32-bit integer list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a write buffer to encode an array of tuples as a message of this type: use buffered actor Main new create(env: Env) = let wb = Writer let messages = [[(F32(3597.82), Anderson ); (F32(-7979.3), Graham )] [(F32(3.14159), Hopper ); (F32(-83.83), Jones )]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end class ref Writer","title":"Writer"},{"location":"buffered-Writer/#constructors","text":"","title":"Constructors"},{"location":"buffered-Writer/#create","text":"[Source] new iso create() : Writer iso^","title":"create"},{"location":"buffered-Writer/#returns","text":"Writer iso^","title":"Returns"},{"location":"buffered-Writer/#public-functions","text":"","title":"Public Functions"},{"location":"buffered-Writer/#reserve_chunks","text":"[Source] Reserve space for size' chunks. This needs to be recalled after every call to done as done resets the chunks. fun ref reserve_chunks( size': USize val) : None val","title":"reserve_chunks"},{"location":"buffered-Writer/#parameters","text":"size': USize val","title":"Parameters"},{"location":"buffered-Writer/#returns_1","text":"None val","title":"Returns"},{"location":"buffered-Writer/#reserve_current","text":"[Source] Reserve space for size bytes in _current . fun ref reserve_current( size': USize val) : None val","title":"reserve_current"},{"location":"buffered-Writer/#parameters_1","text":"size': USize val","title":"Parameters"},{"location":"buffered-Writer/#returns_2","text":"None val","title":"Returns"},{"location":"buffered-Writer/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"buffered-Writer/#returns_3","text":"USize val","title":"Returns"},{"location":"buffered-Writer/#u8","text":"[Source] Write a byte to the buffer. fun ref u8( data: U8 val) : None val","title":"u8"},{"location":"buffered-Writer/#parameters_2","text":"data: U8 val","title":"Parameters"},{"location":"buffered-Writer/#returns_4","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u16_le","text":"[Source] Write a U16 to the buffer in little-endian byte order. fun ref u16_le( data: U16 val) : None val","title":"u16_le"},{"location":"buffered-Writer/#parameters_3","text":"data: U16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_5","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u16_be","text":"[Source] Write a U16 to the buffer in big-endian byte order. fun ref u16_be( data: U16 val) : None val","title":"u16_be"},{"location":"buffered-Writer/#parameters_4","text":"data: U16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_6","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i16_le","text":"[Source] Write an I16 to the buffer in little-endian byte order. fun ref i16_le( data: I16 val) : None val","title":"i16_le"},{"location":"buffered-Writer/#parameters_5","text":"data: I16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_7","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i16_be","text":"[Source] Write an I16 to the buffer in big-endian byte order. fun ref i16_be( data: I16 val) : None val","title":"i16_be"},{"location":"buffered-Writer/#parameters_6","text":"data: I16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_8","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u32_le","text":"[Source] Write a U32 to the buffer in little-endian byte order. fun ref u32_le( data: U32 val) : None val","title":"u32_le"},{"location":"buffered-Writer/#parameters_7","text":"data: U32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_9","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u32_be","text":"[Source] Write a U32 to the buffer in big-endian byte order. fun ref u32_be( data: U32 val) : None val","title":"u32_be"},{"location":"buffered-Writer/#parameters_8","text":"data: U32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_10","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i32_le","text":"[Source] Write an I32 to the buffer in little-endian byte order. fun ref i32_le( data: I32 val) : None val","title":"i32_le"},{"location":"buffered-Writer/#parameters_9","text":"data: I32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_11","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i32_be","text":"[Source] Write an I32 to the buffer in big-endian byte order. fun ref i32_be( data: I32 val) : None val","title":"i32_be"},{"location":"buffered-Writer/#parameters_10","text":"data: I32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_12","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f32_le","text":"[Source] Write an F32 to the buffer in little-endian byte order. fun ref f32_le( data: F32 val) : None val","title":"f32_le"},{"location":"buffered-Writer/#parameters_11","text":"data: F32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_13","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f32_be","text":"[Source] Write an F32 to the buffer in big-endian byte order. fun ref f32_be( data: F32 val) : None val","title":"f32_be"},{"location":"buffered-Writer/#parameters_12","text":"data: F32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_14","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u64_le","text":"[Source] Write a U64 to the buffer in little-endian byte order. fun ref u64_le( data: U64 val) : None val","title":"u64_le"},{"location":"buffered-Writer/#parameters_13","text":"data: U64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_15","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u64_be","text":"[Source] Write a U64 to the buffer in big-endian byte order. fun ref u64_be( data: U64 val) : None val","title":"u64_be"},{"location":"buffered-Writer/#parameters_14","text":"data: U64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_16","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i64_le","text":"[Source] Write an I64 to the buffer in little-endian byte order. fun ref i64_le( data: I64 val) : None val","title":"i64_le"},{"location":"buffered-Writer/#parameters_15","text":"data: I64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_17","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i64_be","text":"[Source] Write an I64 to the buffer in big-endian byte order. fun ref i64_be( data: I64 val) : None val","title":"i64_be"},{"location":"buffered-Writer/#parameters_16","text":"data: I64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_18","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f64_le","text":"[Source] Write an F64 to the buffer in little-endian byte order. fun ref f64_le( data: F64 val) : None val","title":"f64_le"},{"location":"buffered-Writer/#parameters_17","text":"data: F64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_19","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f64_be","text":"[Source] Write an F64 to the buffer in big-endian byte order. fun ref f64_be( data: F64 val) : None val","title":"f64_be"},{"location":"buffered-Writer/#parameters_18","text":"data: F64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_20","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u128_le","text":"[Source] Write a U128 to the buffer in little-endian byte order. fun ref u128_le( data: U128 val) : None val","title":"u128_le"},{"location":"buffered-Writer/#parameters_19","text":"data: U128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_21","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u128_be","text":"[Source] Write a U128 to the buffer in big-endian byte order. fun ref u128_be( data: U128 val) : None val","title":"u128_be"},{"location":"buffered-Writer/#parameters_20","text":"data: U128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_22","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i128_le","text":"[Source] Write an I128 to the buffer in little-endian byte order. fun ref i128_le( data: I128 val) : None val","title":"i128_le"},{"location":"buffered-Writer/#parameters_21","text":"data: I128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_23","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i128_be","text":"[Source] Write an I128 to the buffer in big-endian byte order. fun ref i128_be( data: I128 val) : None val","title":"i128_be"},{"location":"buffered-Writer/#parameters_22","text":"data: I128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_24","text":"None val","title":"Returns"},{"location":"buffered-Writer/#write","text":"[Source] Write a ByteSeq to the buffer. fun ref write( data: (String val | Array[U8 val] val)) : None val","title":"write"},{"location":"buffered-Writer/#parameters_23","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"buffered-Writer/#returns_25","text":"None val","title":"Returns"},{"location":"buffered-Writer/#writev","text":"[Source] Write ByteSeqs to the buffer. fun ref writev( data: ByteSeqIter val) : None val","title":"writev"},{"location":"buffered-Writer/#parameters_24","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"buffered-Writer/#returns_26","text":"None val","title":"Returns"},{"location":"buffered-Writer/#done","text":"[Source] Return an array of buffered ByteSeqs and reset the Writer's buffer. fun ref done() : Array[(String val | Array[U8 val] val)] iso^","title":"done"},{"location":"buffered-Writer/#returns_27","text":"Array [( String val | Array [ U8 val] val)] iso^","title":"Returns"},{"location":"buffered-Writer/#private-functions","text":"","title":"Private Functions"},{"location":"buffered-Writer/#_append_current","text":"[Source] fun ref _append_current() : None val","title":"_append_current"},{"location":"buffered-Writer/#returns_28","text":"None val","title":"Returns"},{"location":"builtin--index/","text":"Builtin package The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries. Public Types primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface DisposableActor interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq trait Real trait Integer trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform primitive None struct MaybePointer interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth Private Types primitive _UTF32Encoder primitive _SignedCheckedArithmetic trait _ArithmeticConvertible trait _SignedInteger trait _UnsignedInteger primitive _ToString trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Package"},{"location":"builtin--index/#builtin-package","text":"The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.","title":"Builtin package"},{"location":"builtin--index/#public-types","text":"primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface DisposableActor interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq trait Real trait Integer trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform primitive None struct MaybePointer interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth","title":"Public Types"},{"location":"builtin--index/#private-types","text":"primitive _UTF32Encoder primitive _SignedCheckedArithmetic trait _ArithmeticConvertible trait _SignedInteger trait _UnsignedInteger primitive _ToString trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Private Types"},{"location":"builtin-AmbientAuth/","text":"AmbientAuth [Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth Constructors _create [Source] new val _create() : AmbientAuth val^ Returns AmbientAuth val^ Public Functions eq [Source] fun box eq( that: AmbientAuth val) : Bool val Parameters that: AmbientAuth val Returns Bool val ne [Source] fun box ne( that: AmbientAuth val) : Bool val Parameters that: AmbientAuth val Returns Bool val","title":"primitive AmbientAuth"},{"location":"builtin-AmbientAuth/#ambientauth","text":"[Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth","title":"AmbientAuth"},{"location":"builtin-AmbientAuth/#constructors","text":"","title":"Constructors"},{"location":"builtin-AmbientAuth/#_create","text":"[Source] new val _create() : AmbientAuth val^","title":"_create"},{"location":"builtin-AmbientAuth/#returns","text":"AmbientAuth val^","title":"Returns"},{"location":"builtin-AmbientAuth/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AmbientAuth/#eq","text":"[Source] fun box eq( that: AmbientAuth val) : Bool val","title":"eq"},{"location":"builtin-AmbientAuth/#parameters","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-AmbientAuth/#ne","text":"[Source] fun box ne( that: AmbientAuth val) : Bool val","title":"ne"},{"location":"builtin-AmbientAuth/#parameters_1","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Any/","text":"Any [Source] interface tag Any","title":"interface Any"},{"location":"builtin-Any/#any","text":"[Source] interface tag Any","title":"Any"},{"location":"builtin-Array/","text":"Array[A: A] [Source] Contiguous, resizable memory to store elements of type A. Usage Creating an Array of String. let array: Array[String] = [ dog ; cat ; wombat ] // array.size() == 3 // array.space() = 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space. let array = Array(10) // array.size() == 0 // array.space() = 10 Accessing elements can be done via the apply(i: USize): this- A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method. let array: Array[String] = [ dog ; cat ; wombat ] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == wombat else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a FIFO queue using those methods. while (array.size() 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method. for element in array.values() do // do something with element end Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref Implements Seq [A] ref Constructors create [Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = seq) : Array[A] ref^ Parameters len: USize val = seq Returns Array [A] ref^ init [Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^ Parameters from: A^ len: USize val Returns Array [A] ref^ from_cpointer [Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = seq) : Array[A] ref^ Parameters ptr: Pointer [A] ref len: USize val alloc: USize val = seq Returns Array [A] ref^ Public Functions cpointer [Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = seq) : Pointer[A] tag Parameters offset: USize val = seq Returns Pointer [A] tag size [Source] The number of elements in the array. fun box size() : USize val Returns USize val space [Source] The available space in the array. fun box space() : USize val Returns USize val reserve [Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val compact [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val Returns None val undefined[optional B: (A Real [B] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A Real[B] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val Parameters len: USize val Returns None val read_u8[optional B: (A Real [B] val U8 val)] [Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A Real[B] val U8 val)]( offset: USize val) : U8 val ? Parameters offset: USize val Returns U8 val ? read_u16[optional B: (A Real [B] val U8 val)] [Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A Real[B] val U8 val)]( offset: USize val) : U16 val ? Parameters offset: USize val Returns U16 val ? read_u32[optional B: (A Real [B] val U8 val)] [Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A Real[B] val U8 val)]( offset: USize val) : U32 val ? Parameters offset: USize val Returns U32 val ? read_u64[optional B: (A Real [B] val U8 val)] [Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A Real[B] val U8 val)]( offset: USize val) : U64 val ? Parameters offset: USize val Returns U64 val ? read_u128[optional B: (A Real [B] val U8 val)] [Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A Real[B] val U8 val)]( offset: USize val) : U128 val ? Parameters offset: USize val Returns U128 val ? apply [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? update_u8[optional B: (A Real [B] val U8 val)] [Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U8 val) : U8 val ? Parameters offset: USize val value: U8 val Returns U8 val ? update_u16[optional B: (A Real [B] val U8 val)] [Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U16 val) : U16 val ? Parameters offset: USize val value: U16 val Returns U16 val ? update_u32[optional B: (A Real [B] val U8 val)] [Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U32 val) : U32 val ? Parameters offset: USize val value: U32 val Returns U32 val ? update_u64[optional B: (A Real [B] val U8 val)] [Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U64 val) : U64 val ? Parameters offset: USize val value: U64 val Returns U64 val ? update_u128[optional B: (A Real [B] val U8 val)] [Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U128 val) : U128 val ? Parameters offset: USize val value: U128 val Returns U128 val ? update [Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters i: USize val value: A Returns A^ ? insert [Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. fun ref insert( i: USize val, value: A) : None val ? Parameters i: USize val value: A Returns None val ? delete [Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ? Parameters i: USize val Returns A^ ? truncate [Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val trim_in_place [Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val Parameters from: USize val = seq to: USize val = seq Returns None val trim [Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : Array[A] val Parameters from: USize val = seq to: USize val = seq Returns Array [A] val chop [Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the right portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. fun iso chop( split_point: USize val) : (Array[A] iso^ , Array[A] iso^) Parameters split_point: USize val Returns ( Array [A] iso^ , Array [A] iso^) copy_from[optional B: (A Real [B] val U8 val)] [Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A Real[B] val U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val Returns None val copy_to [Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this- A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters dst: Array [this- A!] ref src_idx: USize val dst_idx: USize val len: USize val Returns None val remove [Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val Parameters i: USize val n: USize val Returns None val clear [Source] Remove all elements from the array. fun ref clear() : None val Returns None val push_u8[optional B: (A Real [B] val U8 val)] [Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A Real[B] val U8 val)]( value: U8 val) : None val Parameters value: U8 val Returns None val push_u16[optional B: (A Real [B] val U8 val)] [Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A Real[B] val U8 val)]( value: U16 val) : None val Parameters value: U16 val Returns None val push_u32[optional B: (A Real [B] val U8 val)] [Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A Real[B] val U8 val)]( value: U32 val) : None val Parameters value: U32 val Returns None val push_u64[optional B: (A Real [B] val U8 val)] [Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A Real[B] val U8 val)]( value: U64 val) : None val Parameters value: U64 val Returns None val push_u128[optional B: (A Real [B] val U8 val)] [Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A Real[B] val U8 val)]( value: U128 val) : None val Parameters value: U128 val Returns None val push [Source] Add an element to the end of the array. fun ref push( value: A) : None val Parameters value: A Returns None val pop [Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ? Returns A^ ? unshift [Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val Parameters value: A Returns None val shift [Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ? Returns A^ ? append [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq Returns None val find [Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ? Parameters value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq Returns USize val ? contains [Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) = l == r} . fun box contains( value: A!, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : Bool val Parameters value: A! predicate: {(box- A!, box- A!): Bool}[A] val = seq Returns Bool val rfind [Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ? Parameters value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq Returns USize val ? clone [Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this- A!] ref^ Returns Array [this- A!] ref^ slice [Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = seq, to: USize val = seq, step: USize val = seq) : Array[this- A!] ref^ Parameters from: USize val = seq to: USize val = seq step: USize val = seq Returns Array [this- A!] ref^ permute [Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this- A!] ref^ ? Parameters indices: Iterator [ USize val] ref Returns Array [this- A!] ref^ ? reverse [Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this- A!] ref^ Returns Array [this- A!] ref^ reverse_in_place [Source] Reverse the array in place. fun ref reverse_in_place() : None val Returns None val swap_elements [Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ? Parameters i: USize val j: USize val Returns None val ? keys [Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this- Array[A] ref] ref^ Returns ArrayKeys [A, this- Array [A] ref] ref^ values [Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this- Array[A] ref] ref^ Returns ArrayValues [A, this- Array [A] ref] ref^ pairs [Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this- Array[A] ref] ref^ Returns ArrayPairs [A, this- Array [A] ref] ref^ Private Functions _copy_to [Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this- A!] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val Parameters ptr: Pointer [this- A!] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq Returns None val _element_size [Source] Element size in bytes for an element. fun box _element_size() : USize val Returns USize val","title":"class Array"},{"location":"builtin-Array/#array91a-a93","text":"[Source] Contiguous, resizable memory to store elements of type A.","title":"Array[A: A]"},{"location":"builtin-Array/#usage","text":"Creating an Array of String. let array: Array[String] = [ dog ; cat ; wombat ] // array.size() == 3 // array.space() = 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space. let array = Array(10) // array.size() == 0 // array.space() = 10 Accessing elements can be done via the apply(i: USize): this- A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method. let array: Array[String] = [ dog ; cat ; wombat ] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == wombat else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a FIFO queue using those methods. while (array.size() 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method. for element in array.values() do // do something with element end","title":"Usage"},{"location":"builtin-Array/#memory-allocation","text":"Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref","title":"Memory allocation"},{"location":"builtin-Array/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"builtin-Array/#constructors","text":"","title":"Constructors"},{"location":"builtin-Array/#create","text":"[Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = seq) : Array[A] ref^","title":"create"},{"location":"builtin-Array/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#init","text":"[Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^","title":"init"},{"location":"builtin-Array/#parameters_1","text":"from: A^ len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_1","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#from_cpointer","text":"[Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = seq) : Array[A] ref^","title":"from_cpointer"},{"location":"builtin-Array/#parameters_2","text":"ptr: Pointer [A] ref len: USize val alloc: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_2","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Array/#cpointer","text":"[Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = seq) : Pointer[A] tag","title":"cpointer"},{"location":"builtin-Array/#parameters_3","text":"offset: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_3","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Array/#size","text":"[Source] The number of elements in the array. fun box size() : USize val","title":"size"},{"location":"builtin-Array/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-Array/#space","text":"[Source] The available space in the array. fun box space() : USize val","title":"space"},{"location":"builtin-Array/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-Array/#reserve","text":"[Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Array/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Array/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val","title":"compact"},{"location":"builtin-Array/#returns_7","text":"None val","title":"Returns"},{"location":"builtin-Array/#undefined91optional-b-a-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A Real[B] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"builtin-Array/#parameters_5","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Array/#read_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A Real[B] val U8 val)]( offset: USize val) : U8 val ?","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_6","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#read_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A Real[B] val U8 val)]( offset: USize val) : U16 val ?","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_7","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#read_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A Real[B] val U8 val)]( offset: USize val) : U32 val ?","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_8","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_11","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#read_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A Real[B] val U8 val)]( offset: USize val) : U64 val ?","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_9","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_12","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#read_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A Real[B] val U8 val)]( offset: USize val) : U128 val ?","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_10","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_13","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"builtin-Array/#parameters_11","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_14","text":"this- A ?","title":"Returns"},{"location":"builtin-Array/#update_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U8 val) : U8 val ?","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_12","text":"offset: USize val value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_15","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#update_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U16 val) : U16 val ?","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_13","text":"offset: USize val value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_16","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#update_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U32 val) : U32 val ?","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_14","text":"offset: USize val value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_17","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#update_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U64 val) : U64 val ?","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_15","text":"offset: USize val value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#update_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A Real[B] val U8 val)]( offset: USize val, value: U128 val) : U128 val ?","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_16","text":"offset: USize val value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_19","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Array/#parameters_17","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_20","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#insert","text":"[Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. fun ref insert( i: USize val, value: A) : None val ?","title":"insert"},{"location":"builtin-Array/#parameters_18","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_21","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#delete","text":"[Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ?","title":"delete"},{"location":"builtin-Array/#parameters_19","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_22","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#truncate","text":"[Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Array/#parameters_20","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_23","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim_in_place","text":"[Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val","title":"trim_in_place"},{"location":"builtin-Array/#parameters_21","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_24","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim","text":"[Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : Array[A] val","title":"trim"},{"location":"builtin-Array/#parameters_22","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_25","text":"Array [A] val","title":"Returns"},{"location":"builtin-Array/#chop","text":"[Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the right portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. fun iso chop( split_point: USize val) : (Array[A] iso^ , Array[A] iso^)","title":"chop"},{"location":"builtin-Array/#parameters_23","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_26","text":"( Array [A] iso^ , Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#copy_from91optional-b-a-real91b93-val-u8-val93","text":"[Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A Real[B] val U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_24","text":"src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_27","text":"None val","title":"Returns"},{"location":"builtin-Array/#copy_to","text":"[Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this- A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_to"},{"location":"builtin-Array/#parameters_25","text":"dst: Array [this- A!] ref src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_28","text":"None val","title":"Returns"},{"location":"builtin-Array/#remove","text":"[Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val","title":"remove"},{"location":"builtin-Array/#parameters_26","text":"i: USize val n: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_29","text":"None val","title":"Returns"},{"location":"builtin-Array/#clear","text":"[Source] Remove all elements from the array. fun ref clear() : None val","title":"clear"},{"location":"builtin-Array/#returns_30","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A Real[B] val U8 val)]( value: U8 val) : None val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_27","text":"value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_31","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A Real[B] val U8 val)]( value: U16 val) : None val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_28","text":"value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_32","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A Real[B] val U8 val)]( value: U32 val) : None val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_29","text":"value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_33","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A Real[B] val U8 val)]( value: U64 val) : None val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_30","text":"value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_34","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A Real[B] val U8 val)]( value: U128 val) : None val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_31","text":"value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-Array/#push","text":"[Source] Add an element to the end of the array. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Array/#parameters_32","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_36","text":"None val","title":"Returns"},{"location":"builtin-Array/#pop","text":"[Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Array/#returns_37","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#unshift","text":"[Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Array/#parameters_33","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-Array/#shift","text":"[Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Array/#returns_39","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"builtin-Array/#parameters_34","text":"seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_40","text":"None val","title":"Returns"},{"location":"builtin-Array/#concat","text":"[Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"builtin-Array/#parameters_35","text":"iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-Array/#find","text":"[Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ?","title":"find"},{"location":"builtin-Array/#parameters_36","text":"value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_42","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#contains","text":"[Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) = l == r} . fun box contains( value: A!, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : Bool val","title":"contains"},{"location":"builtin-Array/#parameters_37","text":"value: A! predicate: {(box- A!, box- A!): Bool}[A] val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_43","text":"Bool val","title":"Returns"},{"location":"builtin-Array/#rfind","text":"[Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = seq, nth: USize val = seq, predicate: {(box- A!, box- A!): Bool}[A] val = seq) : USize val ?","title":"rfind"},{"location":"builtin-Array/#parameters_38","text":"value: A! offset: USize val = seq nth: USize val = seq predicate: {(box- A!, box- A!): Bool}[A] val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_44","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#clone","text":"[Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this- A!] ref^","title":"clone"},{"location":"builtin-Array/#returns_45","text":"Array [this- A!] ref^","title":"Returns"},{"location":"builtin-Array/#slice","text":"[Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = seq, to: USize val = seq, step: USize val = seq) : Array[this- A!] ref^","title":"slice"},{"location":"builtin-Array/#parameters_39","text":"from: USize val = seq to: USize val = seq step: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_46","text":"Array [this- A!] ref^","title":"Returns"},{"location":"builtin-Array/#permute","text":"[Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this- A!] ref^ ?","title":"permute"},{"location":"builtin-Array/#parameters_40","text":"indices: Iterator [ USize val] ref","title":"Parameters"},{"location":"builtin-Array/#returns_47","text":"Array [this- A!] ref^ ?","title":"Returns"},{"location":"builtin-Array/#reverse","text":"[Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this- A!] ref^","title":"reverse"},{"location":"builtin-Array/#returns_48","text":"Array [this- A!] ref^","title":"Returns"},{"location":"builtin-Array/#reverse_in_place","text":"[Source] Reverse the array in place. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-Array/#returns_49","text":"None val","title":"Returns"},{"location":"builtin-Array/#swap_elements","text":"[Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ?","title":"swap_elements"},{"location":"builtin-Array/#parameters_41","text":"i: USize val j: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_50","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#keys","text":"[Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this- Array[A] ref] ref^","title":"keys"},{"location":"builtin-Array/#returns_51","text":"ArrayKeys [A, this- Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#values","text":"[Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this- Array[A] ref] ref^","title":"values"},{"location":"builtin-Array/#returns_52","text":"ArrayValues [A, this- Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#pairs","text":"[Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this- Array[A] ref] ref^","title":"pairs"},{"location":"builtin-Array/#returns_53","text":"ArrayPairs [A, this- Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Array/#_copy_to","text":"[Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this- A!] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val","title":"_copy_to"},{"location":"builtin-Array/#parameters_42","text":"ptr: Pointer [this- A!] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq","title":"Parameters"},{"location":"builtin-Array/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-Array/#_element_size","text":"[Source] Element size in bytes for an element. fun box _element_size() : USize val","title":"_element_size"},{"location":"builtin-Array/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-ArrayKeys/","text":"ArrayKeys[A: A, B: Array [A] #read] [Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref Implements Iterator [ USize val] ref Constructors create [Source] new ref create( array: B) : ArrayKeys[A, B] ref^ Parameters array: B Returns ArrayKeys [A, B] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : USize val Returns USize val","title":"class ArrayKeys"},{"location":"builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93","text":"[Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref","title":"ArrayKeys[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayKeys/#implements","text":"Iterator [ USize val] ref","title":"Implements"},{"location":"builtin-ArrayKeys/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayKeys/#create","text":"[Source] new ref create( array: B) : ArrayKeys[A, B] ref^","title":"create"},{"location":"builtin-ArrayKeys/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayKeys/#returns","text":"ArrayKeys [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayKeys/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayKeys/#next","text":"[Source] fun ref next() : USize val","title":"next"},{"location":"builtin-ArrayKeys/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-ArrayPairs/","text":"ArrayPairs[A: A, B: Array [A] #read] [Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B- A)] ref Implements Iterator [( USize val , B- A)] ref Constructors create [Source] new ref create( array: B) : ArrayPairs[A, B] ref^ Parameters array: B Returns ArrayPairs [A, B] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : (USize val , B- A) ? Returns ( USize val , B- A) ?","title":"class ArrayPairs"},{"location":"builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93","text":"[Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B- A)] ref","title":"ArrayPairs[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayPairs/#implements","text":"Iterator [( USize val , B- A)] ref","title":"Implements"},{"location":"builtin-ArrayPairs/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayPairs/#create","text":"[Source] new ref create( array: B) : ArrayPairs[A, B] ref^","title":"create"},{"location":"builtin-ArrayPairs/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayPairs/#returns","text":"ArrayPairs [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayPairs/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayPairs/#next","text":"[Source] fun ref next() : (USize val , B- A) ?","title":"next"},{"location":"builtin-ArrayPairs/#returns_2","text":"( USize val , B- A) ?","title":"Returns"},{"location":"builtin-ArrayValues/","text":"ArrayValues[A: A, B: Array [A] #read] [Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B- A] ref Implements Iterator [B- A] ref Constructors create [Source] new ref create( array: B) : ArrayValues[A, B] ref^ Parameters array: B Returns ArrayValues [A, B] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : B- A ? Returns B- A ? rewind [Source] fun ref rewind() : ArrayValues[A, B] ref Returns ArrayValues [A, B] ref","title":"class ArrayValues"},{"location":"builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93","text":"[Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B- A] ref","title":"ArrayValues[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayValues/#implements","text":"Iterator [B- A] ref","title":"Implements"},{"location":"builtin-ArrayValues/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayValues/#create","text":"[Source] new ref create( array: B) : ArrayValues[A, B] ref^","title":"create"},{"location":"builtin-ArrayValues/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayValues/#returns","text":"ArrayValues [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayValues/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayValues/#next","text":"[Source] fun ref next() : B- A ?","title":"next"},{"location":"builtin-ArrayValues/#returns_2","text":"B- A ?","title":"Returns"},{"location":"builtin-ArrayValues/#rewind","text":"[Source] fun ref rewind() : ArrayValues[A, B] ref","title":"rewind"},{"location":"builtin-ArrayValues/#returns_3","text":"ArrayValues [A, B] ref","title":"Returns"},{"location":"builtin-AsioEvent/","text":"AsioEvent [Source] Functions for asynchronous event notification. primitive val AsioEvent Constructors create [Source] new val create() : AsioEvent val^ Returns AsioEvent val^ Public Functions none [Source] An empty event. fun box none() : Pointer[AsioEvent val] tag Returns Pointer [ AsioEvent val] tag readable [Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val Parameters flags: U32 val Returns Bool val writeable [Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val Parameters flags: U32 val Returns Bool val disposable [Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val Parameters flags: U32 val Returns Bool val dispose [Source] fun box dispose() : U32 val Returns U32 val read [Source] fun box read() : U32 val Returns U32 val write [Source] fun box write() : U32 val Returns U32 val timer [Source] fun box timer() : U32 val Returns U32 val signal [Source] fun box signal() : U32 val Returns U32 val read_write [Source] fun box read_write() : U32 val Returns U32 val oneshot [Source] fun box oneshot() : U32 val Returns U32 val read_write_oneshot [Source] fun box read_write_oneshot() : U32 val Returns U32 val eq [Source] fun box eq( that: AsioEvent val) : Bool val Parameters that: AsioEvent val Returns Bool val ne [Source] fun box ne( that: AsioEvent val) : Bool val Parameters that: AsioEvent val Returns Bool val","title":"primitive AsioEvent"},{"location":"builtin-AsioEvent/#asioevent","text":"[Source] Functions for asynchronous event notification. primitive val AsioEvent","title":"AsioEvent"},{"location":"builtin-AsioEvent/#constructors","text":"","title":"Constructors"},{"location":"builtin-AsioEvent/#create","text":"[Source] new val create() : AsioEvent val^","title":"create"},{"location":"builtin-AsioEvent/#returns","text":"AsioEvent val^","title":"Returns"},{"location":"builtin-AsioEvent/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AsioEvent/#none","text":"[Source] An empty event. fun box none() : Pointer[AsioEvent val] tag","title":"none"},{"location":"builtin-AsioEvent/#returns_1","text":"Pointer [ AsioEvent val] tag","title":"Returns"},{"location":"builtin-AsioEvent/#readable","text":"[Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val","title":"readable"},{"location":"builtin-AsioEvent/#parameters","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#writeable","text":"[Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val","title":"writeable"},{"location":"builtin-AsioEvent/#parameters_1","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#disposable","text":"[Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val","title":"disposable"},{"location":"builtin-AsioEvent/#parameters_2","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#dispose","text":"[Source] fun box dispose() : U32 val","title":"dispose"},{"location":"builtin-AsioEvent/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read","text":"[Source] fun box read() : U32 val","title":"read"},{"location":"builtin-AsioEvent/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#write","text":"[Source] fun box write() : U32 val","title":"write"},{"location":"builtin-AsioEvent/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#timer","text":"[Source] fun box timer() : U32 val","title":"timer"},{"location":"builtin-AsioEvent/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#signal","text":"[Source] fun box signal() : U32 val","title":"signal"},{"location":"builtin-AsioEvent/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write","text":"[Source] fun box read_write() : U32 val","title":"read_write"},{"location":"builtin-AsioEvent/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshot","text":"[Source] fun box oneshot() : U32 val","title":"oneshot"},{"location":"builtin-AsioEvent/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write_oneshot","text":"[Source] fun box read_write_oneshot() : U32 val","title":"read_write_oneshot"},{"location":"builtin-AsioEvent/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#eq","text":"[Source] fun box eq( that: AsioEvent val) : Bool val","title":"eq"},{"location":"builtin-AsioEvent/#parameters_3","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#ne","text":"[Source] fun box ne( that: AsioEvent val) : Bool val","title":"ne"},{"location":"builtin-AsioEvent/#parameters_4","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEventID/","text":"AsioEventID [Source] type AsioEventID is Pointer[AsioEvent val] tag Type Alias For Pointer [ AsioEvent val] tag","title":"type AsioEventID"},{"location":"builtin-AsioEventID/#asioeventid","text":"[Source] type AsioEventID is Pointer[AsioEvent val] tag","title":"AsioEventID"},{"location":"builtin-AsioEventID/#type-alias-for","text":"Pointer [ AsioEvent val] tag","title":"Type Alias For"},{"location":"builtin-AsioEventNotify/","text":"AsioEventNotify [Source] interface tag AsioEventNotify Private Behaviours _event_notify [Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"interface AsioEventNotify"},{"location":"builtin-AsioEventNotify/#asioeventnotify","text":"[Source] interface tag AsioEventNotify","title":"AsioEventNotify"},{"location":"builtin-AsioEventNotify/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-AsioEventNotify/#_event_notify","text":"[Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-AsioEventNotify/#parameters","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Bool/","text":"Bool [Source] primitive val Bool is Stringable box Implements Stringable box Constructors create [Source] new val create( from: Bool val) : Bool val^ Parameters from: Bool val Returns Bool val^ Public Functions eq [Source] fun box eq( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val ne [Source] fun box ne( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_and [Source] fun box op_and( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_or [Source] fun box op_or( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_xor [Source] fun box op_xor( y: Bool val) : Bool val Parameters y: Bool val Returns Bool val op_not [Source] fun box op_not() : Bool val Returns Bool val string [Source] fun box string() : String iso^ Returns String iso^","title":"primitive Bool"},{"location":"builtin-Bool/#bool","text":"[Source] primitive val Bool is Stringable box","title":"Bool"},{"location":"builtin-Bool/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-Bool/#constructors","text":"","title":"Constructors"},{"location":"builtin-Bool/#create","text":"[Source] new val create( from: Bool val) : Bool val^","title":"create"},{"location":"builtin-Bool/#parameters","text":"from: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns","text":"Bool val^","title":"Returns"},{"location":"builtin-Bool/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Bool/#eq","text":"[Source] fun box eq( y: Bool val) : Bool val","title":"eq"},{"location":"builtin-Bool/#parameters_1","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#ne","text":"[Source] fun box ne( y: Bool val) : Bool val","title":"ne"},{"location":"builtin-Bool/#parameters_2","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_and","text":"[Source] fun box op_and( y: Bool val) : Bool val","title":"op_and"},{"location":"builtin-Bool/#parameters_3","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_or","text":"[Source] fun box op_or( y: Bool val) : Bool val","title":"op_or"},{"location":"builtin-Bool/#parameters_4","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_xor","text":"[Source] fun box op_xor( y: Bool val) : Bool val","title":"op_xor"},{"location":"builtin-Bool/#parameters_5","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_not","text":"[Source] fun box op_not() : Bool val","title":"op_not"},{"location":"builtin-Bool/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Bool/#returns_7","text":"String iso^","title":"Returns"},{"location":"builtin-ByteSeq/","text":"ByteSeq [Source] type ByteSeq is (String val | Array[U8 val] val) Type Alias For ( String val | Array [ U8 val] val)","title":"type ByteSeq"},{"location":"builtin-ByteSeq/#byteseq","text":"[Source] type ByteSeq is (String val | Array[U8 val] val)","title":"ByteSeq"},{"location":"builtin-ByteSeq/#type-alias-for","text":"( String val | Array [ U8 val] val)","title":"Type Alias For"},{"location":"builtin-ByteSeqIter/","text":"ByteSeqIter [Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter Public Functions values [Source] fun box values() : Iterator[(this- String box | this- Array[U8 val] box)] ref Returns Iterator [(this- String box | this- Array [ U8 val] box)] ref","title":"interface ByteSeqIter"},{"location":"builtin-ByteSeqIter/#byteseqiter","text":"[Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter","title":"ByteSeqIter"},{"location":"builtin-ByteSeqIter/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ByteSeqIter/#values","text":"[Source] fun box values() : Iterator[(this- String box | this- Array[U8 val] box)] ref","title":"values"},{"location":"builtin-ByteSeqIter/#returns","text":"Iterator [(this- String box | this- Array [ U8 val] box)] ref","title":"Returns"},{"location":"builtin-Comparable/","text":"Comparable[A: Comparable [A] #read] [Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref Implements Equatable [A] ref Public Functions lt [Source] fun box lt( that: box- A) : Bool val Parameters that: box- A Returns Bool val le [Source] fun box le( that: box- A) : Bool val Parameters that: box- A Returns Bool val ge [Source] fun box ge( that: box- A) : Bool val Parameters that: box- A Returns Bool val gt [Source] fun box gt( that: box- A) : Bool val Parameters that: box- A Returns Bool val compare [Source] fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) eq [Source] fun box eq( that: box- A) : Bool val Parameters that: box- A Returns Bool val ne [Source] fun box ne( that: box- A) : Bool val Parameters that: box- A Returns Bool val","title":"interface Comparable"},{"location":"builtin-Comparable/#comparable91a-comparable91a93-read93","text":"[Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref","title":"Comparable[A: Comparable[A] #read]"},{"location":"builtin-Comparable/#implements","text":"Equatable [A] ref","title":"Implements"},{"location":"builtin-Comparable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Comparable/#lt","text":"[Source] fun box lt( that: box- A) : Bool val","title":"lt"},{"location":"builtin-Comparable/#parameters","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#le","text":"[Source] fun box le( that: box- A) : Bool val","title":"le"},{"location":"builtin-Comparable/#parameters_1","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ge","text":"[Source] fun box ge( that: box- A) : Bool val","title":"ge"},{"location":"builtin-Comparable/#parameters_2","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#gt","text":"[Source] fun box gt( that: box- A) : Bool val","title":"gt"},{"location":"builtin-Comparable/#parameters_3","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#compare","text":"[Source] fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Comparable/#parameters_4","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_4","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Comparable/#eq","text":"[Source] fun box eq( that: box- A) : Bool val","title":"eq"},{"location":"builtin-Comparable/#parameters_5","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ne","text":"[Source] fun box ne( that: box- A) : Bool val","title":"ne"},{"location":"builtin-Comparable/#parameters_6","text":"that: box- A","title":"Parameters"},{"location":"builtin-Comparable/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Compare/","text":"Compare [Source] type Compare is (Less val | Equal val | Greater val) Type Alias For ( Less val | Equal val | Greater val)","title":"type Compare"},{"location":"builtin-Compare/#compare","text":"[Source] type Compare is (Less val | Equal val | Greater val)","title":"Compare"},{"location":"builtin-Compare/#type-alias-for","text":"( Less val | Equal val | Greater val)","title":"Type Alias For"},{"location":"builtin-DisposableActor/","text":"DisposableActor [Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor Public Behaviours dispose [Source] be dispose()","title":"interface DisposableActor"},{"location":"builtin-DisposableActor/#disposableactor","text":"[Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor","title":"DisposableActor"},{"location":"builtin-DisposableActor/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-DisposableActor/#dispose","text":"[Source] be dispose()","title":"dispose"},{"location":"builtin-DoNotOptimise/","text":"DoNotOptimise [Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise Constructors create [Source] new val create() : DoNotOptimise val^ Returns DoNotOptimise val^ Public Functions apply[A: A] [Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val Parameters obj: A Returns None val observe [Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val Returns None val eq [Source] fun box eq( that: DoNotOptimise val) : Bool val Parameters that: DoNotOptimise val Returns Bool val ne [Source] fun box ne( that: DoNotOptimise val) : Bool val Parameters that: DoNotOptimise val Returns Bool val","title":"primitive DoNotOptimise"},{"location":"builtin-DoNotOptimise/#donotoptimise","text":"[Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise","title":"DoNotOptimise"},{"location":"builtin-DoNotOptimise/#constructors","text":"","title":"Constructors"},{"location":"builtin-DoNotOptimise/#create","text":"[Source] new val create() : DoNotOptimise val^","title":"create"},{"location":"builtin-DoNotOptimise/#returns","text":"DoNotOptimise val^","title":"Returns"},{"location":"builtin-DoNotOptimise/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-DoNotOptimise/#apply91a-a93","text":"[Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val","title":"apply[A: A]"},{"location":"builtin-DoNotOptimise/#parameters","text":"obj: A","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#observe","text":"[Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val","title":"observe"},{"location":"builtin-DoNotOptimise/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#eq","text":"[Source] fun box eq( that: DoNotOptimise val) : Bool val","title":"eq"},{"location":"builtin-DoNotOptimise/#parameters_1","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-DoNotOptimise/#ne","text":"[Source] fun box ne( that: DoNotOptimise val) : Bool val","title":"ne"},{"location":"builtin-DoNotOptimise/#parameters_2","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Env/","text":"Env [Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env Constructors _create [Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^ Parameters argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val Returns Env ref^ create [Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^ Parameters root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val Returns Env val^ Public fields let root: ( AmbientAuth val | None val) [Source] The root capability. Can be None for artificially constructed Env instances. let input: InputStream tag [Source] Stdin represented as an actor. let out: OutStream tag [Source] Stdout let err: OutStream tag [Source] Stderr let args: Array [ String val] val [Source] The command line used to start the program. let vars: Array [ String val] val [Source] The program's environment variables. let exitcode: {(I32)} val [Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. Private Functions _count_strings [Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val Parameters data: Pointer [ Pointer [ U8 val] ref] val Returns USize val _strings_from_pointers [Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^ Parameters data: Pointer [ Pointer [ U8 val] ref] val len: USize val Returns Array [ String val] iso^","title":"class Env"},{"location":"builtin-Env/#env","text":"[Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env","title":"Env"},{"location":"builtin-Env/#constructors","text":"","title":"Constructors"},{"location":"builtin-Env/#_create","text":"[Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^","title":"_create"},{"location":"builtin-Env/#parameters","text":"argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns","text":"Env ref^","title":"Returns"},{"location":"builtin-Env/#create","text":"[Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^","title":"create"},{"location":"builtin-Env/#parameters_1","text":"root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val","title":"Parameters"},{"location":"builtin-Env/#returns_1","text":"Env val^","title":"Returns"},{"location":"builtin-Env/#public-fields","text":"","title":"Public fields"},{"location":"builtin-Env/#let-root-ambientauth-val-none-val","text":"[Source] The root capability. Can be None for artificially constructed Env instances.","title":"let root: (AmbientAuth val | None val)"},{"location":"builtin-Env/#let-input-inputstream-tag","text":"[Source] Stdin represented as an actor.","title":"let input: InputStream tag"},{"location":"builtin-Env/#let-out-outstream-tag","text":"[Source] Stdout","title":"let out: OutStream tag"},{"location":"builtin-Env/#let-err-outstream-tag","text":"[Source] Stderr","title":"let err: OutStream tag"},{"location":"builtin-Env/#let-args-array91string-val93-val","text":"[Source] The command line used to start the program.","title":"let args: Array[String val] val"},{"location":"builtin-Env/#let-vars-array91string-val93-val","text":"[Source] The program's environment variables.","title":"let vars: Array[String val] val"},{"location":"builtin-Env/#let-exitcode-i32-val","text":"[Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.","title":"let exitcode: {(I32)} val"},{"location":"builtin-Env/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Env/#_count_strings","text":"[Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val","title":"_count_strings"},{"location":"builtin-Env/#parameters_2","text":"data: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Env/#_strings_from_pointers","text":"[Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^","title":"_strings_from_pointers"},{"location":"builtin-Env/#parameters_3","text":"data: Pointer [ Pointer [ U8 val] ref] val len: USize val","title":"Parameters"},{"location":"builtin-Env/#returns_3","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-Equal/","text":"Equal [Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref Implements Equatable [( Less val | Equal val | Greater val)] ref Constructors create [Source] new val create() : Equal val^ Returns Equal val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val ne [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val","title":"primitive Equal"},{"location":"builtin-Equal/#equal","text":"[Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref","title":"Equal"},{"location":"builtin-Equal/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Equal/#constructors","text":"","title":"Constructors"},{"location":"builtin-Equal/#create","text":"[Source] new val create() : Equal val^","title":"create"},{"location":"builtin-Equal/#returns","text":"Equal val^","title":"Returns"},{"location":"builtin-Equal/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equal/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Equal/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Equal/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Equal/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Equal/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Equal/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/","text":"Equatable[A: Equatable [A] #read] [Source] interface ref Equatable[A: Equatable[A] #read] Public Functions eq [Source] fun box eq( that: box- A) : Bool val Parameters that: box- A Returns Bool val ne [Source] fun box ne( that: box- A) : Bool val Parameters that: box- A Returns Bool val","title":"interface Equatable"},{"location":"builtin-Equatable/#equatable91a-equatable91a93-read93","text":"[Source] interface ref Equatable[A: Equatable[A] #read]","title":"Equatable[A: Equatable[A] #read]"},{"location":"builtin-Equatable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equatable/#eq","text":"[Source] fun box eq( that: box- A) : Bool val","title":"eq"},{"location":"builtin-Equatable/#parameters","text":"that: box- A","title":"Parameters"},{"location":"builtin-Equatable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/#ne","text":"[Source] fun box ne( that: box- A) : Bool val","title":"ne"},{"location":"builtin-Equatable/#parameters_1","text":"that: box- A","title":"Parameters"},{"location":"builtin-Equatable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-F32/","text":"F32 [Source] primitive val F32 is FloatingPoint[F32 val] val Implements FloatingPoint [ F32 val] val Constructors create [Source] new val create( value: F32 val = seq) : F32 val^ Parameters value: F32 val = seq Returns F32 val^ pi [Source] new val pi() : F32 val^ Returns F32 val^ e [Source] new val e() : F32 val^ Returns F32 val^ _nan [Source] new val _nan() : F32 val^ Returns F32 val^ _inf [Source] new val _inf( negative: Bool val) : F32 val^ Parameters negative: Bool val Returns F32 val^ from_bits [Source] new val from_bits( i: U32 val) : F32 val^ Parameters i: U32 val Returns F32 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F32 val^ Parameters a: B Returns F32 val^ min_value [Source] Minimum negative value representable. new val min_value() : F32 val^ Returns F32 val^ max_value [Source] Maximum positive value representable. new val max_value() : F32 val^ Returns F32 val^ min_normalised [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^ Returns F32 val^ epsilon [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^ Returns F32 val^ Public Functions bits [Source] fun box bits() : U32 val Returns U32 val radix [Source] Exponent radix. fun tag radix() : U8 val Returns U8 val precision2 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns U8 val precision10 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns U8 val min_exp2 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns I16 val min_exp10 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns I16 val max_exp2 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns I16 val max_exp10 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns I16 val abs [Source] fun box abs() : F32 val Returns F32 val ceil [Source] fun box ceil() : F32 val Returns F32 val floor [Source] fun box floor() : F32 val Returns F32 val round [Source] fun box round() : F32 val Returns F32 val trunc [Source] fun box trunc() : F32 val Returns F32 val min [Source] fun box min( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val max [Source] fun box max( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val finite [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns Bool val infinite [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns Bool val nan [Source] Check whether this number is NaN. fun box nan() : Bool val Returns Bool val ldexp [Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val Parameters x: F32 val exponent: I32 val Returns F32 val frexp [Source] fun box frexp() : (F32 val , U32 val) Returns ( F32 val , U32 val) log [Source] fun box log() : F32 val Returns F32 val log2 [Source] fun box log2() : F32 val Returns F32 val log10 [Source] fun box log10() : F32 val Returns F32 val logb [Source] fun box logb() : F32 val Returns F32 val pow [Source] fun box pow( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val powi [Source] fun box powi( y: I32 val) : F32 val Parameters y: I32 val Returns F32 val sqrt [Source] fun box sqrt() : F32 val Returns F32 val sqrt_unsafe [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val Returns F32 val cbrt [Source] fun box cbrt() : F32 val Returns F32 val exp [Source] fun box exp() : F32 val Returns F32 val exp2 [Source] fun box exp2() : F32 val Returns F32 val cos [Source] fun box cos() : F32 val Returns F32 val sin [Source] fun box sin() : F32 val Returns F32 val tan [Source] fun box tan() : F32 val Returns F32 val cosh [Source] fun box cosh() : F32 val Returns F32 val sinh [Source] fun box sinh() : F32 val Returns F32 val tanh [Source] fun box tanh() : F32 val Returns F32 val acos [Source] fun box acos() : F32 val Returns F32 val asin [Source] fun box asin() : F32 val Returns F32 val atan [Source] fun box atan() : F32 val Returns F32 val atan2 [Source] fun box atan2( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val acosh [Source] fun box acosh() : F32 val Returns F32 val asinh [Source] fun box asinh() : F32 val Returns F32 val atanh [Source] fun box atanh() : F32 val Returns F32 val copysign [Source] fun box copysign( sign: F32 val) : F32 val Parameters sign: F32 val Returns F32 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i128 [Source] fun box i128() : I128 val Returns I128 val u128 [Source] fun box u128() : U128 val Returns U128 val i128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns I128 val u128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns U128 val add_unsafe [Source] fun box add_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val sub_unsafe [Source] fun box sub_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val mul_unsafe [Source] fun box mul_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val div_unsafe [Source] fun box div_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val divrem_unsafe [Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val) Parameters y: F32 val Returns ( F32 val , F32 val) rem_unsafe [Source] fun box rem_unsafe( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val neg_unsafe [Source] fun box neg_unsafe() : F32 val Returns F32 val eq_unsafe [Source] fun box eq_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ne_unsafe [Source] fun box ne_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val lt_unsafe [Source] fun box lt_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val le_unsafe [Source] fun box le_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ge_unsafe [Source] fun box ge_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val gt_unsafe [Source] fun box gt_unsafe( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val string [Source] fun box string() : String iso^ Returns String iso^ add [Source] fun box add( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val sub [Source] fun box sub( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val mul [Source] fun box mul( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val div [Source] fun box div( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val divrem [Source] fun box divrem( y: F32 val) : (F32 val , F32 val) Parameters y: F32 val Returns ( F32 val , F32 val) rem [Source] fun box rem( y: F32 val) : F32 val Parameters y: F32 val Returns F32 val neg [Source] fun box neg() : F32 val Returns F32 val eq [Source] fun box eq( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ne [Source] fun box ne( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val lt [Source] fun box lt( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val le [Source] fun box le( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val ge [Source] fun box ge( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val gt [Source] fun box gt( y: F32 val) : Bool val Parameters y: F32 val Returns Bool val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: F32 val) : (Less val | Equal val | Greater val) Parameters that: F32 val Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : F32 val Returns F32 val","title":"primitive F32"},{"location":"builtin-F32/#f32","text":"[Source] primitive val F32 is FloatingPoint[F32 val] val","title":"F32"},{"location":"builtin-F32/#implements","text":"FloatingPoint [ F32 val] val","title":"Implements"},{"location":"builtin-F32/#constructors","text":"","title":"Constructors"},{"location":"builtin-F32/#create","text":"[Source] new val create( value: F32 val = seq) : F32 val^","title":"create"},{"location":"builtin-F32/#parameters","text":"value: F32 val = seq","title":"Parameters"},{"location":"builtin-F32/#returns","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#pi","text":"[Source] new val pi() : F32 val^","title":"pi"},{"location":"builtin-F32/#returns_1","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#e","text":"[Source] new val e() : F32 val^","title":"e"},{"location":"builtin-F32/#returns_2","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_nan","text":"[Source] new val _nan() : F32 val^","title":"_nan"},{"location":"builtin-F32/#returns_3","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_inf","text":"[Source] new val _inf( negative: Bool val) : F32 val^","title":"_inf"},{"location":"builtin-F32/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F32/#returns_4","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from_bits","text":"[Source] new val from_bits( i: U32 val) : F32 val^","title":"from_bits"},{"location":"builtin-F32/#parameters_2","text":"i: U32 val","title":"Parameters"},{"location":"builtin-F32/#returns_5","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F32 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F32/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F32/#returns_6","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F32 val^","title":"min_value"},{"location":"builtin-F32/#returns_7","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F32 val^","title":"max_value"},{"location":"builtin-F32/#returns_8","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^","title":"min_normalised"},{"location":"builtin-F32/#returns_9","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^","title":"epsilon"},{"location":"builtin-F32/#returns_10","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F32/#bits","text":"[Source] fun box bits() : U32 val","title":"bits"},{"location":"builtin-F32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F32/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F32/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F32/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F32/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F32/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F32/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F32/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#abs","text":"[Source] fun box abs() : F32 val","title":"abs"},{"location":"builtin-F32/#returns_19","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#ceil","text":"[Source] fun box ceil() : F32 val","title":"ceil"},{"location":"builtin-F32/#returns_20","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#floor","text":"[Source] fun box floor() : F32 val","title":"floor"},{"location":"builtin-F32/#returns_21","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#round","text":"[Source] fun box round() : F32 val","title":"round"},{"location":"builtin-F32/#returns_22","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#trunc","text":"[Source] fun box trunc() : F32 val","title":"trunc"},{"location":"builtin-F32/#returns_23","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#min","text":"[Source] fun box min( y: F32 val) : F32 val","title":"min"},{"location":"builtin-F32/#parameters_4","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_24","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#max","text":"[Source] fun box max( y: F32 val) : F32 val","title":"max"},{"location":"builtin-F32/#parameters_5","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_25","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F32/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F32/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F32/#returns_28","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ldexp","text":"[Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val","title":"ldexp"},{"location":"builtin-F32/#parameters_6","text":"x: F32 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_29","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#frexp","text":"[Source] fun box frexp() : (F32 val , U32 val)","title":"frexp"},{"location":"builtin-F32/#returns_30","text":"( F32 val , U32 val)","title":"Returns"},{"location":"builtin-F32/#log","text":"[Source] fun box log() : F32 val","title":"log"},{"location":"builtin-F32/#returns_31","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log2","text":"[Source] fun box log2() : F32 val","title":"log2"},{"location":"builtin-F32/#returns_32","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log10","text":"[Source] fun box log10() : F32 val","title":"log10"},{"location":"builtin-F32/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#logb","text":"[Source] fun box logb() : F32 val","title":"logb"},{"location":"builtin-F32/#returns_34","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#pow","text":"[Source] fun box pow( y: F32 val) : F32 val","title":"pow"},{"location":"builtin-F32/#parameters_7","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_35","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#powi","text":"[Source] fun box powi( y: I32 val) : F32 val","title":"powi"},{"location":"builtin-F32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt","text":"[Source] fun box sqrt() : F32 val","title":"sqrt"},{"location":"builtin-F32/#returns_37","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val","title":"sqrt_unsafe"},{"location":"builtin-F32/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cbrt","text":"[Source] fun box cbrt() : F32 val","title":"cbrt"},{"location":"builtin-F32/#returns_39","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp","text":"[Source] fun box exp() : F32 val","title":"exp"},{"location":"builtin-F32/#returns_40","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp2","text":"[Source] fun box exp2() : F32 val","title":"exp2"},{"location":"builtin-F32/#returns_41","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cos","text":"[Source] fun box cos() : F32 val","title":"cos"},{"location":"builtin-F32/#returns_42","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sin","text":"[Source] fun box sin() : F32 val","title":"sin"},{"location":"builtin-F32/#returns_43","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tan","text":"[Source] fun box tan() : F32 val","title":"tan"},{"location":"builtin-F32/#returns_44","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cosh","text":"[Source] fun box cosh() : F32 val","title":"cosh"},{"location":"builtin-F32/#returns_45","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sinh","text":"[Source] fun box sinh() : F32 val","title":"sinh"},{"location":"builtin-F32/#returns_46","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tanh","text":"[Source] fun box tanh() : F32 val","title":"tanh"},{"location":"builtin-F32/#returns_47","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acos","text":"[Source] fun box acos() : F32 val","title":"acos"},{"location":"builtin-F32/#returns_48","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asin","text":"[Source] fun box asin() : F32 val","title":"asin"},{"location":"builtin-F32/#returns_49","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan","text":"[Source] fun box atan() : F32 val","title":"atan"},{"location":"builtin-F32/#returns_50","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan2","text":"[Source] fun box atan2( y: F32 val) : F32 val","title":"atan2"},{"location":"builtin-F32/#parameters_9","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_51","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acosh","text":"[Source] fun box acosh() : F32 val","title":"acosh"},{"location":"builtin-F32/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asinh","text":"[Source] fun box asinh() : F32 val","title":"asinh"},{"location":"builtin-F32/#returns_53","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atanh","text":"[Source] fun box atanh() : F32 val","title":"atanh"},{"location":"builtin-F32/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#copysign","text":"[Source] fun box copysign( sign: F32 val) : F32 val","title":"copysign"},{"location":"builtin-F32/#parameters_10","text":"sign: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_55","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F32/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-F32/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F32/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F32/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F32/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F32/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F32/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#add_unsafe","text":"[Source] fun box add_unsafe( y: F32 val) : F32 val","title":"add_unsafe"},{"location":"builtin-F32/#parameters_11","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_62","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F32 val) : F32 val","title":"sub_unsafe"},{"location":"builtin-F32/#parameters_12","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_63","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F32 val) : F32 val","title":"mul_unsafe"},{"location":"builtin-F32/#parameters_13","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_64","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div_unsafe","text":"[Source] fun box div_unsafe( y: F32 val) : F32 val","title":"div_unsafe"},{"location":"builtin-F32/#parameters_14","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_65","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val)","title":"divrem_unsafe"},{"location":"builtin-F32/#parameters_15","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_66","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F32 val) : F32 val","title":"rem_unsafe"},{"location":"builtin-F32/#parameters_16","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_67","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F32 val","title":"neg_unsafe"},{"location":"builtin-F32/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F32 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F32/#parameters_17","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F32 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F32/#parameters_18","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F32 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F32/#parameters_19","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le_unsafe","text":"[Source] fun box le_unsafe( y: F32 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F32/#parameters_20","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F32 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F32/#parameters_21","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F32 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F32/#parameters_22","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F32/#returns_75","text":"String iso^","title":"Returns"},{"location":"builtin-F32/#add","text":"[Source] fun box add( y: F32 val) : F32 val","title":"add"},{"location":"builtin-F32/#parameters_23","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_76","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub","text":"[Source] fun box sub( y: F32 val) : F32 val","title":"sub"},{"location":"builtin-F32/#parameters_24","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_77","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul","text":"[Source] fun box mul( y: F32 val) : F32 val","title":"mul"},{"location":"builtin-F32/#parameters_25","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_78","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div","text":"[Source] fun box div( y: F32 val) : F32 val","title":"div"},{"location":"builtin-F32/#parameters_26","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_79","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem","text":"[Source] fun box divrem( y: F32 val) : (F32 val , F32 val)","title":"divrem"},{"location":"builtin-F32/#parameters_27","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_80","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem","text":"[Source] fun box rem( y: F32 val) : F32 val","title":"rem"},{"location":"builtin-F32/#parameters_28","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_81","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg","text":"[Source] fun box neg() : F32 val","title":"neg"},{"location":"builtin-F32/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq","text":"[Source] fun box eq( y: F32 val) : Bool val","title":"eq"},{"location":"builtin-F32/#parameters_29","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_83","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne","text":"[Source] fun box ne( y: F32 val) : Bool val","title":"ne"},{"location":"builtin-F32/#parameters_30","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_84","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt","text":"[Source] fun box lt( y: F32 val) : Bool val","title":"lt"},{"location":"builtin-F32/#parameters_31","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_85","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le","text":"[Source] fun box le( y: F32 val) : Bool val","title":"le"},{"location":"builtin-F32/#parameters_32","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_86","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge","text":"[Source] fun box ge( y: F32 val) : Bool val","title":"ge"},{"location":"builtin-F32/#parameters_33","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt","text":"[Source] fun box gt( y: F32 val) : Bool val","title":"gt"},{"location":"builtin-F32/#parameters_34","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F32/#returns_89","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F32/#returns_90","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F32/#returns_91","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F32/#returns_92","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F32/#returns_93","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F32/#returns_94","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F32/#returns_95","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F32/#returns_96","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F32/#returns_97","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F32/#returns_98","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F32/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F32/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_1","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F32/#returns_101","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F32/#returns_102","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F32/#returns_103","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F32/#returns_104","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F32/#returns_105","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F32/#returns_106","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F32/#returns_107","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F32/#returns_108","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F32/#returns_109","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F32/#returns_110","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F32/#returns_111","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F32/#returns_112","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F32/#returns_113","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F32/#returns_114","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F32/#returns_115","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F32/#returns_116","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#compare","text":"fun box compare( that: F32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F32/#parameters_35","text":"that: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_117","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F32/#_value","text":"[Source] fun box _value() : F32 val","title":"_value"},{"location":"builtin-F32/#returns_118","text":"F32 val","title":"Returns"},{"location":"builtin-F64/","text":"F64 [Source] primitive val F64 is FloatingPoint[F64 val] val Implements FloatingPoint [ F64 val] val Constructors create [Source] new val create( value: F64 val = seq) : F64 val^ Parameters value: F64 val = seq Returns F64 val^ pi [Source] new val pi() : F64 val^ Returns F64 val^ e [Source] new val e() : F64 val^ Returns F64 val^ _nan [Source] new val _nan() : F64 val^ Returns F64 val^ _inf [Source] new val _inf( negative: Bool val) : F64 val^ Parameters negative: Bool val Returns F64 val^ from_bits [Source] new val from_bits( i: U64 val) : F64 val^ Parameters i: U64 val Returns F64 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F64 val^ Parameters a: B Returns F64 val^ min_value [Source] Minimum negative value representable. new val min_value() : F64 val^ Returns F64 val^ max_value [Source] Maximum positive value representable. new val max_value() : F64 val^ Returns F64 val^ min_normalised [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^ Returns F64 val^ epsilon [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^ Returns F64 val^ Public Functions bits [Source] fun box bits() : U64 val Returns U64 val radix [Source] Exponent radix. fun tag radix() : U8 val Returns U8 val precision2 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns U8 val precision10 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns U8 val min_exp2 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns I16 val min_exp10 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns I16 val max_exp2 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns I16 val max_exp10 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns I16 val abs [Source] fun box abs() : F64 val Returns F64 val ceil [Source] fun box ceil() : F64 val Returns F64 val floor [Source] fun box floor() : F64 val Returns F64 val round [Source] fun box round() : F64 val Returns F64 val trunc [Source] fun box trunc() : F64 val Returns F64 val min [Source] fun box min( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val max [Source] fun box max( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val finite [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns Bool val infinite [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns Bool val nan [Source] Check whether this number is NaN. fun box nan() : Bool val Returns Bool val ldexp [Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val Parameters x: F64 val exponent: I32 val Returns F64 val frexp [Source] fun box frexp() : (F64 val , U32 val) Returns ( F64 val , U32 val) log [Source] fun box log() : F64 val Returns F64 val log2 [Source] fun box log2() : F64 val Returns F64 val log10 [Source] fun box log10() : F64 val Returns F64 val logb [Source] fun box logb() : F64 val Returns F64 val pow [Source] fun box pow( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val powi [Source] fun box powi( y: I32 val) : F64 val Parameters y: I32 val Returns F64 val sqrt [Source] fun box sqrt() : F64 val Returns F64 val sqrt_unsafe [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val Returns F64 val cbrt [Source] fun box cbrt() : F64 val Returns F64 val exp [Source] fun box exp() : F64 val Returns F64 val exp2 [Source] fun box exp2() : F64 val Returns F64 val cos [Source] fun box cos() : F64 val Returns F64 val sin [Source] fun box sin() : F64 val Returns F64 val tan [Source] fun box tan() : F64 val Returns F64 val cosh [Source] fun box cosh() : F64 val Returns F64 val sinh [Source] fun box sinh() : F64 val Returns F64 val tanh [Source] fun box tanh() : F64 val Returns F64 val acos [Source] fun box acos() : F64 val Returns F64 val asin [Source] fun box asin() : F64 val Returns F64 val atan [Source] fun box atan() : F64 val Returns F64 val atan2 [Source] fun box atan2( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val acosh [Source] fun box acosh() : F64 val Returns F64 val asinh [Source] fun box asinh() : F64 val Returns F64 val atanh [Source] fun box atanh() : F64 val Returns F64 val copysign [Source] fun box copysign( sign: F64 val) : F64 val Parameters sign: F64 val Returns F64 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i128 [Source] fun box i128() : I128 val Returns I128 val u128 [Source] fun box u128() : U128 val Returns U128 val i128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns I128 val u128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns U128 val add_unsafe [Source] fun box add_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val sub_unsafe [Source] fun box sub_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val mul_unsafe [Source] fun box mul_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val div_unsafe [Source] fun box div_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val divrem_unsafe [Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val) Parameters y: F64 val Returns ( F64 val , F64 val) rem_unsafe [Source] fun box rem_unsafe( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val neg_unsafe [Source] fun box neg_unsafe() : F64 val Returns F64 val eq_unsafe [Source] fun box eq_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ne_unsafe [Source] fun box ne_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val lt_unsafe [Source] fun box lt_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val le_unsafe [Source] fun box le_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ge_unsafe [Source] fun box ge_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val gt_unsafe [Source] fun box gt_unsafe( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val string [Source] fun box string() : String iso^ Returns String iso^ add [Source] fun box add( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val sub [Source] fun box sub( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val mul [Source] fun box mul( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val div [Source] fun box div( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val divrem [Source] fun box divrem( y: F64 val) : (F64 val , F64 val) Parameters y: F64 val Returns ( F64 val , F64 val) rem [Source] fun box rem( y: F64 val) : F64 val Parameters y: F64 val Returns F64 val neg [Source] fun box neg() : F64 val Returns F64 val eq [Source] fun box eq( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ne [Source] fun box ne( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val lt [Source] fun box lt( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val le [Source] fun box le( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val ge [Source] fun box ge( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val gt [Source] fun box gt( y: F64 val) : Bool val Parameters y: F64 val Returns Bool val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: F64 val) : (Less val | Equal val | Greater val) Parameters that: F64 val Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : F64 val Returns F64 val","title":"primitive F64"},{"location":"builtin-F64/#f64","text":"[Source] primitive val F64 is FloatingPoint[F64 val] val","title":"F64"},{"location":"builtin-F64/#implements","text":"FloatingPoint [ F64 val] val","title":"Implements"},{"location":"builtin-F64/#constructors","text":"","title":"Constructors"},{"location":"builtin-F64/#create","text":"[Source] new val create( value: F64 val = seq) : F64 val^","title":"create"},{"location":"builtin-F64/#parameters","text":"value: F64 val = seq","title":"Parameters"},{"location":"builtin-F64/#returns","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#pi","text":"[Source] new val pi() : F64 val^","title":"pi"},{"location":"builtin-F64/#returns_1","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#e","text":"[Source] new val e() : F64 val^","title":"e"},{"location":"builtin-F64/#returns_2","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_nan","text":"[Source] new val _nan() : F64 val^","title":"_nan"},{"location":"builtin-F64/#returns_3","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_inf","text":"[Source] new val _inf( negative: Bool val) : F64 val^","title":"_inf"},{"location":"builtin-F64/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F64/#returns_4","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from_bits","text":"[Source] new val from_bits( i: U64 val) : F64 val^","title":"from_bits"},{"location":"builtin-F64/#parameters_2","text":"i: U64 val","title":"Parameters"},{"location":"builtin-F64/#returns_5","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : F64 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F64/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F64/#returns_6","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F64 val^","title":"min_value"},{"location":"builtin-F64/#returns_7","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F64 val^","title":"max_value"},{"location":"builtin-F64/#returns_8","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^","title":"min_normalised"},{"location":"builtin-F64/#returns_9","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^","title":"epsilon"},{"location":"builtin-F64/#returns_10","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F64/#bits","text":"[Source] fun box bits() : U64 val","title":"bits"},{"location":"builtin-F64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F64/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F64/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F64/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F64/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F64/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F64/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F64/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#abs","text":"[Source] fun box abs() : F64 val","title":"abs"},{"location":"builtin-F64/#returns_19","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#ceil","text":"[Source] fun box ceil() : F64 val","title":"ceil"},{"location":"builtin-F64/#returns_20","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#floor","text":"[Source] fun box floor() : F64 val","title":"floor"},{"location":"builtin-F64/#returns_21","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#round","text":"[Source] fun box round() : F64 val","title":"round"},{"location":"builtin-F64/#returns_22","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#trunc","text":"[Source] fun box trunc() : F64 val","title":"trunc"},{"location":"builtin-F64/#returns_23","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#min","text":"[Source] fun box min( y: F64 val) : F64 val","title":"min"},{"location":"builtin-F64/#parameters_4","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_24","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#max","text":"[Source] fun box max( y: F64 val) : F64 val","title":"max"},{"location":"builtin-F64/#parameters_5","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_25","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F64/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F64/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F64/#returns_28","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ldexp","text":"[Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val","title":"ldexp"},{"location":"builtin-F64/#parameters_6","text":"x: F64 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#frexp","text":"[Source] fun box frexp() : (F64 val , U32 val)","title":"frexp"},{"location":"builtin-F64/#returns_30","text":"( F64 val , U32 val)","title":"Returns"},{"location":"builtin-F64/#log","text":"[Source] fun box log() : F64 val","title":"log"},{"location":"builtin-F64/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log2","text":"[Source] fun box log2() : F64 val","title":"log2"},{"location":"builtin-F64/#returns_32","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log10","text":"[Source] fun box log10() : F64 val","title":"log10"},{"location":"builtin-F64/#returns_33","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#logb","text":"[Source] fun box logb() : F64 val","title":"logb"},{"location":"builtin-F64/#returns_34","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#pow","text":"[Source] fun box pow( y: F64 val) : F64 val","title":"pow"},{"location":"builtin-F64/#parameters_7","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_35","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#powi","text":"[Source] fun box powi( y: I32 val) : F64 val","title":"powi"},{"location":"builtin-F64/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_36","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt","text":"[Source] fun box sqrt() : F64 val","title":"sqrt"},{"location":"builtin-F64/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val","title":"sqrt_unsafe"},{"location":"builtin-F64/#returns_38","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cbrt","text":"[Source] fun box cbrt() : F64 val","title":"cbrt"},{"location":"builtin-F64/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp","text":"[Source] fun box exp() : F64 val","title":"exp"},{"location":"builtin-F64/#returns_40","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp2","text":"[Source] fun box exp2() : F64 val","title":"exp2"},{"location":"builtin-F64/#returns_41","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cos","text":"[Source] fun box cos() : F64 val","title":"cos"},{"location":"builtin-F64/#returns_42","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sin","text":"[Source] fun box sin() : F64 val","title":"sin"},{"location":"builtin-F64/#returns_43","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tan","text":"[Source] fun box tan() : F64 val","title":"tan"},{"location":"builtin-F64/#returns_44","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cosh","text":"[Source] fun box cosh() : F64 val","title":"cosh"},{"location":"builtin-F64/#returns_45","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sinh","text":"[Source] fun box sinh() : F64 val","title":"sinh"},{"location":"builtin-F64/#returns_46","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tanh","text":"[Source] fun box tanh() : F64 val","title":"tanh"},{"location":"builtin-F64/#returns_47","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acos","text":"[Source] fun box acos() : F64 val","title":"acos"},{"location":"builtin-F64/#returns_48","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asin","text":"[Source] fun box asin() : F64 val","title":"asin"},{"location":"builtin-F64/#returns_49","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan","text":"[Source] fun box atan() : F64 val","title":"atan"},{"location":"builtin-F64/#returns_50","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan2","text":"[Source] fun box atan2( y: F64 val) : F64 val","title":"atan2"},{"location":"builtin-F64/#parameters_9","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_51","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acosh","text":"[Source] fun box acosh() : F64 val","title":"acosh"},{"location":"builtin-F64/#returns_52","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asinh","text":"[Source] fun box asinh() : F64 val","title":"asinh"},{"location":"builtin-F64/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atanh","text":"[Source] fun box atanh() : F64 val","title":"atanh"},{"location":"builtin-F64/#returns_54","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#copysign","text":"[Source] fun box copysign( sign: F64 val) : F64 val","title":"copysign"},{"location":"builtin-F64/#parameters_10","text":"sign: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F64/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-F64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F64/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F64/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F64/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F64/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#add_unsafe","text":"[Source] fun box add_unsafe( y: F64 val) : F64 val","title":"add_unsafe"},{"location":"builtin-F64/#parameters_11","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_62","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F64 val) : F64 val","title":"sub_unsafe"},{"location":"builtin-F64/#parameters_12","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_63","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F64 val) : F64 val","title":"mul_unsafe"},{"location":"builtin-F64/#parameters_13","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_64","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div_unsafe","text":"[Source] fun box div_unsafe( y: F64 val) : F64 val","title":"div_unsafe"},{"location":"builtin-F64/#parameters_14","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_65","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val)","title":"divrem_unsafe"},{"location":"builtin-F64/#parameters_15","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_66","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F64 val) : F64 val","title":"rem_unsafe"},{"location":"builtin-F64/#parameters_16","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_67","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F64 val","title":"neg_unsafe"},{"location":"builtin-F64/#returns_68","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F64 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F64/#parameters_17","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F64 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F64/#parameters_18","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F64 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F64/#parameters_19","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le_unsafe","text":"[Source] fun box le_unsafe( y: F64 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F64/#parameters_20","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F64 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F64/#parameters_21","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F64 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F64/#parameters_22","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F64/#returns_75","text":"String iso^","title":"Returns"},{"location":"builtin-F64/#add","text":"[Source] fun box add( y: F64 val) : F64 val","title":"add"},{"location":"builtin-F64/#parameters_23","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub","text":"[Source] fun box sub( y: F64 val) : F64 val","title":"sub"},{"location":"builtin-F64/#parameters_24","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_77","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul","text":"[Source] fun box mul( y: F64 val) : F64 val","title":"mul"},{"location":"builtin-F64/#parameters_25","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_78","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div","text":"[Source] fun box div( y: F64 val) : F64 val","title":"div"},{"location":"builtin-F64/#parameters_26","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_79","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem","text":"[Source] fun box divrem( y: F64 val) : (F64 val , F64 val)","title":"divrem"},{"location":"builtin-F64/#parameters_27","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_80","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem","text":"[Source] fun box rem( y: F64 val) : F64 val","title":"rem"},{"location":"builtin-F64/#parameters_28","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg","text":"[Source] fun box neg() : F64 val","title":"neg"},{"location":"builtin-F64/#returns_82","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq","text":"[Source] fun box eq( y: F64 val) : Bool val","title":"eq"},{"location":"builtin-F64/#parameters_29","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_83","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne","text":"[Source] fun box ne( y: F64 val) : Bool val","title":"ne"},{"location":"builtin-F64/#parameters_30","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_84","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt","text":"[Source] fun box lt( y: F64 val) : Bool val","title":"lt"},{"location":"builtin-F64/#parameters_31","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_85","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le","text":"[Source] fun box le( y: F64 val) : Bool val","title":"le"},{"location":"builtin-F64/#parameters_32","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_86","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge","text":"[Source] fun box ge( y: F64 val) : Bool val","title":"ge"},{"location":"builtin-F64/#parameters_33","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt","text":"[Source] fun box gt( y: F64 val) : Bool val","title":"gt"},{"location":"builtin-F64/#parameters_34","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F64/#returns_89","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F64/#returns_90","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F64/#returns_91","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F64/#returns_92","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F64/#returns_93","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F64/#returns_94","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F64/#returns_95","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F64/#returns_96","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F64/#returns_97","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F64/#returns_98","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F64/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F64/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F64/#returns_101","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_1","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F64/#returns_102","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F64/#returns_103","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F64/#returns_104","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F64/#returns_105","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F64/#returns_106","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F64/#returns_107","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F64/#returns_108","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F64/#returns_109","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F64/#returns_110","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F64/#returns_111","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F64/#returns_112","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F64/#returns_113","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F64/#returns_114","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F64/#returns_115","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F64/#returns_116","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#compare","text":"fun box compare( that: F64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F64/#parameters_35","text":"that: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_117","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F64/#_value","text":"[Source] fun box _value() : F64 val","title":"_value"},{"location":"builtin-F64/#returns_118","text":"F64 val","title":"Returns"},{"location":"builtin-Float/","text":"Float [Source] type Float is (F32 val | F64 val) Type Alias For ( F32 val | F64 val)","title":"type Float"},{"location":"builtin-Float/#float","text":"[Source] type Float is (F32 val | F64 val)","title":"Float"},{"location":"builtin-Float/#type-alias-for","text":"( F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-FloatingPoint/","text":"FloatingPoint[A: FloatingPoint [A] val] [Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val Implements Real [A] val Constructors min_normalised [Source] new val min_normalised() : FloatingPoint[A] val^ Returns FloatingPoint [A] val^ epsilon [Source] new val epsilon() : FloatingPoint[A] val^ Returns FloatingPoint [A] val^ create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions radix [Source] fun tag radix() : U8 val Returns U8 val precision2 [Source] fun tag precision2() : U8 val Returns U8 val precision10 [Source] fun tag precision10() : U8 val Returns U8 val min_exp2 [Source] fun tag min_exp2() : I16 val Returns I16 val min_exp10 [Source] fun tag min_exp10() : I16 val Returns I16 val max_exp2 [Source] fun tag max_exp2() : I16 val Returns I16 val max_exp10 [Source] fun tag max_exp10() : I16 val Returns I16 val add_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A Parameters y: A Returns A neg_unsafe [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A Returns A eq_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val le_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt_unsafe [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box- A) : Bool val Parameters y: box- A Returns Bool val abs [Source] fun box abs() : A Returns A ceil [Source] fun box ceil() : A Returns A floor [Source] fun box floor() : A Returns A round [Source] fun box round() : A Returns A trunc [Source] fun box trunc() : A Returns A finite [Source] fun box finite() : Bool val Returns Bool val infinite [Source] fun box infinite() : Bool val Returns Bool val nan [Source] fun box nan() : Bool val Returns Bool val ldexp [Source] fun box ldexp( x: A, exponent: I32 val) : A Parameters x: A exponent: I32 val Returns A frexp [Source] fun box frexp() : (A , U32 val) Returns (A , U32 val) log [Source] fun box log() : A Returns A log2 [Source] fun box log2() : A Returns A log10 [Source] fun box log10() : A Returns A logb [Source] fun box logb() : A Returns A pow [Source] fun box pow( y: A) : A Parameters y: A Returns A powi [Source] fun box powi( y: I32 val) : A Parameters y: I32 val Returns A sqrt [Source] fun box sqrt() : A Returns A sqrt_unsafe [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A Returns A cbrt [Source] fun box cbrt() : A Returns A exp [Source] fun box exp() : A Returns A exp2 [Source] fun box exp2() : A Returns A cos [Source] fun box cos() : A Returns A sin [Source] fun box sin() : A Returns A tan [Source] fun box tan() : A Returns A cosh [Source] fun box cosh() : A Returns A sinh [Source] fun box sinh() : A Returns A tanh [Source] fun box tanh() : A Returns A acos [Source] fun box acos() : A Returns A asin [Source] fun box asin() : A Returns A atan [Source] fun box atan() : A Returns A atan2 [Source] fun box atan2( y: A) : A Parameters y: A Returns A acosh [Source] fun box acosh() : A Returns A asinh [Source] fun box asinh() : A Returns A atanh [Source] fun box atanh() : A Returns A copysign [Source] fun box copysign( sign: A) : A Parameters sign: A Returns A string [Source] fun box string() : String iso^ Returns String iso^ add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait FloatingPoint"},{"location":"builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a93-val93","text":"[Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val","title":"FloatingPoint[A: FloatingPoint[A] val]"},{"location":"builtin-FloatingPoint/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-FloatingPoint/#constructors","text":"","title":"Constructors"},{"location":"builtin-FloatingPoint/#min_normalised","text":"[Source] new val min_normalised() : FloatingPoint[A] val^","title":"min_normalised"},{"location":"builtin-FloatingPoint/#returns","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#epsilon","text":"[Source] new val epsilon() : FloatingPoint[A] val^","title":"epsilon"},{"location":"builtin-FloatingPoint/#returns_1","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-FloatingPoint/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-FloatingPoint/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-FloatingPoint/#returns_4","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-FloatingPoint/#returns_5","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-FloatingPoint/#radix","text":"[Source] fun tag radix() : U8 val","title":"radix"},{"location":"builtin-FloatingPoint/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision2","text":"[Source] fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-FloatingPoint/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision10","text":"[Source] fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-FloatingPoint/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp2","text":"[Source] fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-FloatingPoint/#returns_9","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp10","text":"[Source] fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-FloatingPoint/#returns_10","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp2","text":"[Source] fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-FloatingPoint/#returns_11","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp10","text":"[Source] fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-FloatingPoint/#returns_12","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#add_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-FloatingPoint/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_13","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-FloatingPoint/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_14","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-FloatingPoint/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_15","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-FloatingPoint/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_16","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_17","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_18","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-FloatingPoint/#returns_19","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box- A) : Bool val","title":"eq_unsafe"},{"location":"builtin-FloatingPoint/#parameters_8","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_20","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box- A) : Bool val","title":"ne_unsafe"},{"location":"builtin-FloatingPoint/#parameters_9","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_21","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box- A) : Bool val","title":"lt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_10","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_22","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box- A) : Bool val","title":"le_unsafe"},{"location":"builtin-FloatingPoint/#parameters_11","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box- A) : Bool val","title":"ge_unsafe"},{"location":"builtin-FloatingPoint/#parameters_12","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box- A) : Bool val","title":"gt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_13","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_25","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-FloatingPoint/#returns_26","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#ceil","text":"[Source] fun box ceil() : A","title":"ceil"},{"location":"builtin-FloatingPoint/#returns_27","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#floor","text":"[Source] fun box floor() : A","title":"floor"},{"location":"builtin-FloatingPoint/#returns_28","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#round","text":"[Source] fun box round() : A","title":"round"},{"location":"builtin-FloatingPoint/#returns_29","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#trunc","text":"[Source] fun box trunc() : A","title":"trunc"},{"location":"builtin-FloatingPoint/#returns_30","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#finite","text":"[Source] fun box finite() : Bool val","title":"finite"},{"location":"builtin-FloatingPoint/#returns_31","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#infinite","text":"[Source] fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-FloatingPoint/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#nan","text":"[Source] fun box nan() : Bool val","title":"nan"},{"location":"builtin-FloatingPoint/#returns_33","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ldexp","text":"[Source] fun box ldexp( x: A, exponent: I32 val) : A","title":"ldexp"},{"location":"builtin-FloatingPoint/#parameters_14","text":"x: A exponent: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_34","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#frexp","text":"[Source] fun box frexp() : (A , U32 val)","title":"frexp"},{"location":"builtin-FloatingPoint/#returns_35","text":"(A , U32 val)","title":"Returns"},{"location":"builtin-FloatingPoint/#log","text":"[Source] fun box log() : A","title":"log"},{"location":"builtin-FloatingPoint/#returns_36","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log2","text":"[Source] fun box log2() : A","title":"log2"},{"location":"builtin-FloatingPoint/#returns_37","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log10","text":"[Source] fun box log10() : A","title":"log10"},{"location":"builtin-FloatingPoint/#returns_38","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#logb","text":"[Source] fun box logb() : A","title":"logb"},{"location":"builtin-FloatingPoint/#returns_39","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#pow","text":"[Source] fun box pow( y: A) : A","title":"pow"},{"location":"builtin-FloatingPoint/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_40","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#powi","text":"[Source] fun box powi( y: I32 val) : A","title":"powi"},{"location":"builtin-FloatingPoint/#parameters_16","text":"y: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_41","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt","text":"[Source] fun box sqrt() : A","title":"sqrt"},{"location":"builtin-FloatingPoint/#returns_42","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A","title":"sqrt_unsafe"},{"location":"builtin-FloatingPoint/#returns_43","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cbrt","text":"[Source] fun box cbrt() : A","title":"cbrt"},{"location":"builtin-FloatingPoint/#returns_44","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp","text":"[Source] fun box exp() : A","title":"exp"},{"location":"builtin-FloatingPoint/#returns_45","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp2","text":"[Source] fun box exp2() : A","title":"exp2"},{"location":"builtin-FloatingPoint/#returns_46","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cos","text":"[Source] fun box cos() : A","title":"cos"},{"location":"builtin-FloatingPoint/#returns_47","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sin","text":"[Source] fun box sin() : A","title":"sin"},{"location":"builtin-FloatingPoint/#returns_48","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tan","text":"[Source] fun box tan() : A","title":"tan"},{"location":"builtin-FloatingPoint/#returns_49","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cosh","text":"[Source] fun box cosh() : A","title":"cosh"},{"location":"builtin-FloatingPoint/#returns_50","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sinh","text":"[Source] fun box sinh() : A","title":"sinh"},{"location":"builtin-FloatingPoint/#returns_51","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tanh","text":"[Source] fun box tanh() : A","title":"tanh"},{"location":"builtin-FloatingPoint/#returns_52","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acos","text":"[Source] fun box acos() : A","title":"acos"},{"location":"builtin-FloatingPoint/#returns_53","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asin","text":"[Source] fun box asin() : A","title":"asin"},{"location":"builtin-FloatingPoint/#returns_54","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan","text":"[Source] fun box atan() : A","title":"atan"},{"location":"builtin-FloatingPoint/#returns_55","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan2","text":"[Source] fun box atan2( y: A) : A","title":"atan2"},{"location":"builtin-FloatingPoint/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_56","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acosh","text":"[Source] fun box acosh() : A","title":"acosh"},{"location":"builtin-FloatingPoint/#returns_57","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asinh","text":"[Source] fun box asinh() : A","title":"asinh"},{"location":"builtin-FloatingPoint/#returns_58","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atanh","text":"[Source] fun box atanh() : A","title":"atanh"},{"location":"builtin-FloatingPoint/#returns_59","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#copysign","text":"[Source] fun box copysign( sign: A) : A","title":"copysign"},{"location":"builtin-FloatingPoint/#parameters_18","text":"sign: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_60","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-FloatingPoint/#returns_61","text":"String iso^","title":"Returns"},{"location":"builtin-FloatingPoint/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-FloatingPoint/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_62","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-FloatingPoint/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_63","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-FloatingPoint/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_64","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-FloatingPoint/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_65","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-FloatingPoint/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_66","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-FloatingPoint/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_67","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-FloatingPoint/#returns_68","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-FloatingPoint/#parameters_25","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-FloatingPoint/#parameters_26","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-FloatingPoint/#parameters_27","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-FloatingPoint/#parameters_28","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-FloatingPoint/#parameters_29","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-FloatingPoint/#parameters_30","text":"y: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-FloatingPoint/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_75","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-FloatingPoint/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_76","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-FloatingPoint/#returns_77","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-FloatingPoint/#returns_78","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-FloatingPoint/#returns_79","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-FloatingPoint/#returns_80","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-FloatingPoint/#returns_81","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-FloatingPoint/#returns_82","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-FloatingPoint/#returns_83","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-FloatingPoint/#returns_84","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-FloatingPoint/#returns_85","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-FloatingPoint/#returns_86","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-FloatingPoint/#returns_87","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-FloatingPoint/#returns_88","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-FloatingPoint/#returns_89","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-FloatingPoint/#returns_90","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-FloatingPoint/#returns_91","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-FloatingPoint/#returns_92","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-FloatingPoint/#returns_93","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-FloatingPoint/#returns_94","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-FloatingPoint/#returns_95","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-FloatingPoint/#returns_96","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-FloatingPoint/#returns_97","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-FloatingPoint/#returns_98","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-FloatingPoint/#returns_99","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-FloatingPoint/#returns_100","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-FloatingPoint/#returns_101","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-FloatingPoint/#returns_102","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-FloatingPoint/#returns_103","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-FloatingPoint/#returns_104","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-FloatingPoint/#returns_105","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-FloatingPoint/#returns_106","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-FloatingPoint/#returns_107","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-FloatingPoint/#returns_108","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-FloatingPoint/#returns_109","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-FloatingPoint/#returns_110","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-FloatingPoint/#parameters_33","text":"that: box- A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_111","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-FloatingPoint/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-FloatingPoint/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-FloatingPoint/#returns_112","text":"A","title":"Returns"},{"location":"builtin-Greater/","text":"Greater [Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref Implements Equatable [( Less val | Equal val | Greater val)] ref Constructors create [Source] new val create() : Greater val^ Returns Greater val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val ne [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val","title":"primitive Greater"},{"location":"builtin-Greater/#greater","text":"[Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref","title":"Greater"},{"location":"builtin-Greater/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Greater/#constructors","text":"","title":"Constructors"},{"location":"builtin-Greater/#create","text":"[Source] new val create() : Greater val^","title":"create"},{"location":"builtin-Greater/#returns","text":"Greater val^","title":"Returns"},{"location":"builtin-Greater/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Greater/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Greater/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Greater/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Greater/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Greater/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Greater/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-HasEq/","text":"HasEq[A: A] [Source] interface ref HasEq[A: A] Public Functions eq [Source] fun box eq( that: box- A) : Bool val Parameters that: box- A Returns Bool val","title":"interface HasEq"},{"location":"builtin-HasEq/#haseq91a-a93","text":"[Source] interface ref HasEq[A: A]","title":"HasEq[A: A]"},{"location":"builtin-HasEq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-HasEq/#eq","text":"[Source] fun box eq( that: box- A) : Bool val","title":"eq"},{"location":"builtin-HasEq/#parameters","text":"that: box- A","title":"Parameters"},{"location":"builtin-HasEq/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-I128/","text":"I128 [Source] primitive val I128 is _SignedInteger[I128 val, U128 val] val Implements _SignedInteger [ I128 val, U128 val] val Constructors create [Source] new val create( value: I128 val) : I128 val^ Parameters value: I128 val Returns I128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I128 val^ Parameters a: A Returns I128 val^ min_value [Source] new val min_value() : I128 val^ Returns I128 val^ max_value [Source] new val max_value() : I128 val^ Returns I128 val^ Public Functions abs [Source] fun box abs() : U128 val Returns U128 val bit_reverse [Source] fun box bit_reverse() : I128 val Returns I128 val bswap [Source] fun box bswap() : I128 val Returns I128 val popcount [Source] fun box popcount() : U128 val Returns U128 val clz [Source] fun box clz() : U128 val Returns U128 val ctz [Source] fun box ctz() : U128 val Returns U128 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns U128 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns U128 val bitwidth [Source] fun box bitwidth() : U128 val Returns U128 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val max [Source] fun box max( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ mul [Source] fun box mul( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val divrem [Source] fun box divrem( y: I128 val) : (I128 val , I128 val) Parameters y: I128 val Returns ( I128 val , I128 val) div [Source] fun box div( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val rem [Source] fun box rem( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val mul_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val divrem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val) Parameters y: I128 val Returns ( I128 val , I128 val) div_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val rem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val f32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns F64 val addc [Source] fun box addc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) subc [Source] fun box subc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) mulc [Source] fun box mulc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) divc [Source] fun box divc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) remc [Source] fun box remc( y: I128 val) : (I128 val , Bool val) Parameters y: I128 val Returns ( I128 val , Bool val) add_partial [Source] fun box add_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? sub_partial [Source] fun box sub_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? mul_partial [Source] fun box mul_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? div_partial [Source] fun box div_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? rem_partial [Source] fun box rem_partial( y: I128 val) : I128 val ? Parameters y: I128 val Returns I128 val ? divrem_partial [Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ? Parameters y: I128 val Returns ( I128 val , I128 val) ? shl fun box shl( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val shr fun box shr( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val shl_unsafe fun box shl_unsafe( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val shr_unsafe fun box shr_unsafe( y: U128 val) : I128 val Parameters y: U128 val Returns I128 val add_unsafe fun box add_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val sub_unsafe fun box sub_unsafe( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val neg_unsafe fun box neg_unsafe() : I128 val Returns I128 val op_and fun box op_and( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val op_or fun box op_or( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val op_xor fun box op_xor( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val op_not fun box op_not() : I128 val Returns I128 val add fun box add( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val sub fun box sub( y: I128 val) : I128 val Parameters y: I128 val Returns I128 val neg fun box neg() : I128 val Returns I128 val eq fun box eq( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val ne fun box ne( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val lt fun box lt( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val le fun box le( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val ge fun box ge( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val gt fun box gt( y: I128 val) : Bool val Parameters y: I128 val Returns Bool val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val compare fun box compare( that: I128 val) : (Less val | Equal val | Greater val) Parameters that: I128 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I128 val Returns I128 val","title":"primitive I128"},{"location":"builtin-I128/#i128","text":"[Source] primitive val I128 is _SignedInteger[I128 val, U128 val] val","title":"I128"},{"location":"builtin-I128/#implements","text":"_SignedInteger [ I128 val, U128 val] val","title":"Implements"},{"location":"builtin-I128/#constructors","text":"","title":"Constructors"},{"location":"builtin-I128/#create","text":"[Source] new val create( value: I128 val) : I128 val^","title":"create"},{"location":"builtin-I128/#parameters","text":"value: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I128/#returns_1","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#min_value","text":"[Source] new val min_value() : I128 val^","title":"min_value"},{"location":"builtin-I128/#returns_2","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#max_value","text":"[Source] new val max_value() : I128 val^","title":"max_value"},{"location":"builtin-I128/#returns_3","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-I128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bit_reverse","text":"[Source] fun box bit_reverse() : I128 val","title":"bit_reverse"},{"location":"builtin-I128/#returns_5","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#bswap","text":"[Source] fun box bswap() : I128 val","title":"bswap"},{"location":"builtin-I128/#returns_6","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-I128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-I128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-I128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-I128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-I128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-I128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I128/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I128/#min","text":"[Source] fun box min( y: I128 val) : I128 val","title":"min"},{"location":"builtin-I128/#parameters_2","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_14","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#max","text":"[Source] fun box max( y: I128 val) : I128 val","title":"max"},{"location":"builtin-I128/#parameters_3","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_15","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I128/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-I128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I128/#returns_17","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-I128/#returns_18","text":"String iso^","title":"Returns"},{"location":"builtin-I128/#mul","text":"[Source] fun box mul( y: I128 val) : I128 val","title":"mul"},{"location":"builtin-I128/#parameters_4","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_19","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem","text":"[Source] fun box divrem( y: I128 val) : (I128 val , I128 val)","title":"divrem"},{"location":"builtin-I128/#parameters_5","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_20","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div","text":"[Source] fun box div( y: I128 val) : I128 val","title":"div"},{"location":"builtin-I128/#parameters_6","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_21","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem","text":"[Source] fun box rem( y: I128 val) : I128 val","title":"rem"},{"location":"builtin-I128/#parameters_7","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_22","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val","title":"mul_unsafe"},{"location":"builtin-I128/#parameters_8","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_23","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val)","title":"divrem_unsafe"},{"location":"builtin-I128/#parameters_9","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_24","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val","title":"div_unsafe"},{"location":"builtin-I128/#parameters_10","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_25","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val","title":"rem_unsafe"},{"location":"builtin-I128/#parameters_11","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-I128/#returns_27","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-I128/#returns_28","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I128/#returns_29","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I128/#returns_30","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#addc","text":"[Source] fun box addc( y: I128 val) : (I128 val , Bool val)","title":"addc"},{"location":"builtin-I128/#parameters_12","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_31","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#subc","text":"[Source] fun box subc( y: I128 val) : (I128 val , Bool val)","title":"subc"},{"location":"builtin-I128/#parameters_13","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_32","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#mulc","text":"[Source] fun box mulc( y: I128 val) : (I128 val , Bool val)","title":"mulc"},{"location":"builtin-I128/#parameters_14","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_33","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#divc","text":"[Source] fun box divc( y: I128 val) : (I128 val , Bool val)","title":"divc"},{"location":"builtin-I128/#parameters_15","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_34","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#remc","text":"[Source] fun box remc( y: I128 val) : (I128 val , Bool val)","title":"remc"},{"location":"builtin-I128/#parameters_16","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_35","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#add_partial","text":"[Source] fun box add_partial( y: I128 val) : I128 val ?","title":"add_partial"},{"location":"builtin-I128/#parameters_17","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_36","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#sub_partial","text":"[Source] fun box sub_partial( y: I128 val) : I128 val ?","title":"sub_partial"},{"location":"builtin-I128/#parameters_18","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_37","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mul_partial","text":"[Source] fun box mul_partial( y: I128 val) : I128 val ?","title":"mul_partial"},{"location":"builtin-I128/#parameters_19","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_38","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#div_partial","text":"[Source] fun box div_partial( y: I128 val) : I128 val ?","title":"div_partial"},{"location":"builtin-I128/#parameters_20","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_39","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#rem_partial","text":"[Source] fun box rem_partial( y: I128 val) : I128 val ?","title":"rem_partial"},{"location":"builtin-I128/#parameters_21","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_40","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#divrem_partial","text":"[Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ?","title":"divrem_partial"},{"location":"builtin-I128/#parameters_22","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_41","text":"( I128 val , I128 val) ?","title":"Returns"},{"location":"builtin-I128/#shl","text":"fun box shl( y: U128 val) : I128 val","title":"shl"},{"location":"builtin-I128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_42","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr","text":"fun box shr( y: U128 val) : I128 val","title":"shr"},{"location":"builtin-I128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_43","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : I128 val","title":"shl_unsafe"},{"location":"builtin-I128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_44","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : I128 val","title":"shr_unsafe"},{"location":"builtin-I128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_45","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add_unsafe","text":"fun box add_unsafe( y: I128 val) : I128 val","title":"add_unsafe"},{"location":"builtin-I128/#parameters_27","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_46","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub_unsafe","text":"fun box sub_unsafe( y: I128 val) : I128 val","title":"sub_unsafe"},{"location":"builtin-I128/#parameters_28","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_47","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg_unsafe","text":"fun box neg_unsafe() : I128 val","title":"neg_unsafe"},{"location":"builtin-I128/#returns_48","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_and","text":"fun box op_and( y: I128 val) : I128 val","title":"op_and"},{"location":"builtin-I128/#parameters_29","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_49","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_or","text":"fun box op_or( y: I128 val) : I128 val","title":"op_or"},{"location":"builtin-I128/#parameters_30","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_xor","text":"fun box op_xor( y: I128 val) : I128 val","title":"op_xor"},{"location":"builtin-I128/#parameters_31","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_51","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_not","text":"fun box op_not() : I128 val","title":"op_not"},{"location":"builtin-I128/#returns_52","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add","text":"fun box add( y: I128 val) : I128 val","title":"add"},{"location":"builtin-I128/#parameters_32","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_53","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub","text":"fun box sub( y: I128 val) : I128 val","title":"sub"},{"location":"builtin-I128/#parameters_33","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_54","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg","text":"fun box neg() : I128 val","title":"neg"},{"location":"builtin-I128/#returns_55","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#eq","text":"fun box eq( y: I128 val) : Bool val","title":"eq"},{"location":"builtin-I128/#parameters_34","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ne","text":"fun box ne( y: I128 val) : Bool val","title":"ne"},{"location":"builtin-I128/#parameters_35","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#lt","text":"fun box lt( y: I128 val) : Bool val","title":"lt"},{"location":"builtin-I128/#parameters_36","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#le","text":"fun box le( y: I128 val) : Bool val","title":"le"},{"location":"builtin-I128/#parameters_37","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ge","text":"fun box ge( y: I128 val) : Bool val","title":"ge"},{"location":"builtin-I128/#parameters_38","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#gt","text":"fun box gt( y: I128 val) : Bool val","title":"gt"},{"location":"builtin-I128/#parameters_39","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I128/#returns_62","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I128/#returns_63","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I128/#returns_64","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I128/#returns_65","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_1","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I128/#returns_66","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I128/#returns_67","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I128/#returns_68","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I128/#returns_69","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I128/#returns_70","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I128/#returns_71","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I128/#returns_72","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I128/#returns_73","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I128/#returns_74","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I128/#returns_75","text":"USize val","title":"Returns"},{"location":"builtin-I128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I128/#returns_76","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I128/#returns_77","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I128/#returns_78","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I128/#returns_79","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I128/#returns_80","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I128/#returns_81","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I128/#returns_82","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I128/#returns_83","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I128/#returns_84","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I128/#returns_85","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I128/#returns_86","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I128/#returns_87","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I128/#returns_88","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I128/#returns_89","text":"USize val","title":"Returns"},{"location":"builtin-I128/#compare","text":"fun box compare( that: I128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I128/#parameters_40","text":"that: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I128/#_value","text":"fun box _value() : I128 val","title":"_value"},{"location":"builtin-I128/#returns_91","text":"I128 val","title":"Returns"},{"location":"builtin-I16/","text":"I16 [Source] primitive val I16 is _SignedInteger[I16 val, U16 val] val Implements _SignedInteger [ I16 val, U16 val] val Constructors create [Source] new val create( value: I16 val) : I16 val^ Parameters value: I16 val Returns I16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I16 val^ Parameters a: A Returns I16 val^ min_value [Source] new val min_value() : I16 val^ Returns I16 val^ max_value [Source] new val max_value() : I16 val^ Returns I16 val^ Public Functions abs [Source] fun box abs() : U16 val Returns U16 val bit_reverse [Source] fun box bit_reverse() : I16 val Returns I16 val bswap [Source] fun box bswap() : I16 val Returns I16 val popcount [Source] fun box popcount() : U16 val Returns U16 val clz [Source] fun box clz() : U16 val Returns U16 val ctz [Source] fun box ctz() : U16 val Returns U16 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns U16 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns U16 val bitwidth [Source] fun box bitwidth() : U16 val Returns U16 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val max [Source] fun box max( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val addc [Source] fun box addc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) subc [Source] fun box subc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) mulc [Source] fun box mulc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) divc [Source] fun box divc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) remc [Source] fun box remc( y: I16 val) : (I16 val , Bool val) Parameters y: I16 val Returns ( I16 val , Bool val) add_partial [Source] fun box add_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? sub_partial [Source] fun box sub_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? mul_partial [Source] fun box mul_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? div_partial [Source] fun box div_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? rem_partial [Source] fun box rem_partial( y: I16 val) : I16 val ? Parameters y: I16 val Returns I16 val ? divrem_partial [Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ? Parameters y: I16 val Returns ( I16 val , I16 val) ? shl fun box shl( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val shr fun box shr( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val shl_unsafe fun box shl_unsafe( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val shr_unsafe fun box shr_unsafe( y: U16 val) : I16 val Parameters y: U16 val Returns I16 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val sub_unsafe fun box sub_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val mul_unsafe fun box mul_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val div_unsafe fun box div_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val divrem_unsafe fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val) Parameters y: I16 val Returns ( I16 val , I16 val) rem_unsafe fun box rem_unsafe( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val neg_unsafe fun box neg_unsafe() : I16 val Returns I16 val op_and fun box op_and( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val op_or fun box op_or( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val op_xor fun box op_xor( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val op_not fun box op_not() : I16 val Returns I16 val add fun box add( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val sub fun box sub( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val mul fun box mul( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val div fun box div( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val divrem fun box divrem( y: I16 val) : (I16 val , I16 val) Parameters y: I16 val Returns ( I16 val , I16 val) rem fun box rem( y: I16 val) : I16 val Parameters y: I16 val Returns I16 val neg fun box neg() : I16 val Returns I16 val eq fun box eq( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val ne fun box ne( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val lt fun box lt( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val le fun box le( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val ge fun box ge( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val gt fun box gt( y: I16 val) : Bool val Parameters y: I16 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I16 val) : (Less val | Equal val | Greater val) Parameters that: I16 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I16 val Returns I16 val","title":"primitive I16"},{"location":"builtin-I16/#i16","text":"[Source] primitive val I16 is _SignedInteger[I16 val, U16 val] val","title":"I16"},{"location":"builtin-I16/#implements","text":"_SignedInteger [ I16 val, U16 val] val","title":"Implements"},{"location":"builtin-I16/#constructors","text":"","title":"Constructors"},{"location":"builtin-I16/#create","text":"[Source] new val create( value: I16 val) : I16 val^","title":"create"},{"location":"builtin-I16/#parameters","text":"value: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I16/#returns_1","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#min_value","text":"[Source] new val min_value() : I16 val^","title":"min_value"},{"location":"builtin-I16/#returns_2","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#max_value","text":"[Source] new val max_value() : I16 val^","title":"max_value"},{"location":"builtin-I16/#returns_3","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-I16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bit_reverse","text":"[Source] fun box bit_reverse() : I16 val","title":"bit_reverse"},{"location":"builtin-I16/#returns_5","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#bswap","text":"[Source] fun box bswap() : I16 val","title":"bswap"},{"location":"builtin-I16/#returns_6","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-I16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-I16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-I16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-I16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-I16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-I16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I16/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I16/#min","text":"[Source] fun box min( y: I16 val) : I16 val","title":"min"},{"location":"builtin-I16/#parameters_2","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#max","text":"[Source] fun box max( y: I16 val) : I16 val","title":"max"},{"location":"builtin-I16/#parameters_3","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#addc","text":"[Source] fun box addc( y: I16 val) : (I16 val , Bool val)","title":"addc"},{"location":"builtin-I16/#parameters_4","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_16","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#subc","text":"[Source] fun box subc( y: I16 val) : (I16 val , Bool val)","title":"subc"},{"location":"builtin-I16/#parameters_5","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_17","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#mulc","text":"[Source] fun box mulc( y: I16 val) : (I16 val , Bool val)","title":"mulc"},{"location":"builtin-I16/#parameters_6","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_18","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#divc","text":"[Source] fun box divc( y: I16 val) : (I16 val , Bool val)","title":"divc"},{"location":"builtin-I16/#parameters_7","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_19","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#remc","text":"[Source] fun box remc( y: I16 val) : (I16 val , Bool val)","title":"remc"},{"location":"builtin-I16/#parameters_8","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_20","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#add_partial","text":"[Source] fun box add_partial( y: I16 val) : I16 val ?","title":"add_partial"},{"location":"builtin-I16/#parameters_9","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_21","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#sub_partial","text":"[Source] fun box sub_partial( y: I16 val) : I16 val ?","title":"sub_partial"},{"location":"builtin-I16/#parameters_10","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_22","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mul_partial","text":"[Source] fun box mul_partial( y: I16 val) : I16 val ?","title":"mul_partial"},{"location":"builtin-I16/#parameters_11","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_23","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#div_partial","text":"[Source] fun box div_partial( y: I16 val) : I16 val ?","title":"div_partial"},{"location":"builtin-I16/#parameters_12","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_24","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#rem_partial","text":"[Source] fun box rem_partial( y: I16 val) : I16 val ?","title":"rem_partial"},{"location":"builtin-I16/#parameters_13","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_25","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#divrem_partial","text":"[Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ?","title":"divrem_partial"},{"location":"builtin-I16/#parameters_14","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_26","text":"( I16 val , I16 val) ?","title":"Returns"},{"location":"builtin-I16/#shl","text":"fun box shl( y: U16 val) : I16 val","title":"shl"},{"location":"builtin-I16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_27","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr","text":"fun box shr( y: U16 val) : I16 val","title":"shr"},{"location":"builtin-I16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_28","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : I16 val","title":"shl_unsafe"},{"location":"builtin-I16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_29","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : I16 val","title":"shr_unsafe"},{"location":"builtin-I16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_30","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I16/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-I16/#add_unsafe","text":"fun box add_unsafe( y: I16 val) : I16 val","title":"add_unsafe"},{"location":"builtin-I16/#parameters_19","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_32","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub_unsafe","text":"fun box sub_unsafe( y: I16 val) : I16 val","title":"sub_unsafe"},{"location":"builtin-I16/#parameters_20","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_33","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul_unsafe","text":"fun box mul_unsafe( y: I16 val) : I16 val","title":"mul_unsafe"},{"location":"builtin-I16/#parameters_21","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_34","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div_unsafe","text":"fun box div_unsafe( y: I16 val) : I16 val","title":"div_unsafe"},{"location":"builtin-I16/#parameters_22","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_35","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem_unsafe","text":"fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val)","title":"divrem_unsafe"},{"location":"builtin-I16/#parameters_23","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_36","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem_unsafe","text":"fun box rem_unsafe( y: I16 val) : I16 val","title":"rem_unsafe"},{"location":"builtin-I16/#parameters_24","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_37","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg_unsafe","text":"fun box neg_unsafe() : I16 val","title":"neg_unsafe"},{"location":"builtin-I16/#returns_38","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_and","text":"fun box op_and( y: I16 val) : I16 val","title":"op_and"},{"location":"builtin-I16/#parameters_25","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_39","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_or","text":"fun box op_or( y: I16 val) : I16 val","title":"op_or"},{"location":"builtin-I16/#parameters_26","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_40","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_xor","text":"fun box op_xor( y: I16 val) : I16 val","title":"op_xor"},{"location":"builtin-I16/#parameters_27","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_not","text":"fun box op_not() : I16 val","title":"op_not"},{"location":"builtin-I16/#returns_42","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#add","text":"fun box add( y: I16 val) : I16 val","title":"add"},{"location":"builtin-I16/#parameters_28","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_43","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub","text":"fun box sub( y: I16 val) : I16 val","title":"sub"},{"location":"builtin-I16/#parameters_29","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_44","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul","text":"fun box mul( y: I16 val) : I16 val","title":"mul"},{"location":"builtin-I16/#parameters_30","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_45","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div","text":"fun box div( y: I16 val) : I16 val","title":"div"},{"location":"builtin-I16/#parameters_31","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_46","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem","text":"fun box divrem( y: I16 val) : (I16 val , I16 val)","title":"divrem"},{"location":"builtin-I16/#parameters_32","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_47","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem","text":"fun box rem( y: I16 val) : I16 val","title":"rem"},{"location":"builtin-I16/#parameters_33","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_48","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg","text":"fun box neg() : I16 val","title":"neg"},{"location":"builtin-I16/#returns_49","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#eq","text":"fun box eq( y: I16 val) : Bool val","title":"eq"},{"location":"builtin-I16/#parameters_34","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ne","text":"fun box ne( y: I16 val) : Bool val","title":"ne"},{"location":"builtin-I16/#parameters_35","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#lt","text":"fun box lt( y: I16 val) : Bool val","title":"lt"},{"location":"builtin-I16/#parameters_36","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#le","text":"fun box le( y: I16 val) : Bool val","title":"le"},{"location":"builtin-I16/#parameters_37","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ge","text":"fun box ge( y: I16 val) : Bool val","title":"ge"},{"location":"builtin-I16/#parameters_38","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#gt","text":"fun box gt( y: I16 val) : Bool val","title":"gt"},{"location":"builtin-I16/#parameters_39","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I16/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-I16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I16/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I16/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_1","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I16/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I16/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I16/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I16/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I16/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I16/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I16/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I16/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I16/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I16/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I16/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I16/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I16/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I16/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I16/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I16/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I16/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I16/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I16/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I16/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I16/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I16/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I16/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I16/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I16/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I16/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I16/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I16/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I16/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I16/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I16/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#compare","text":"fun box compare( that: I16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I16/#parameters_40","text":"that: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I16/#_value","text":"fun box _value() : I16 val","title":"_value"},{"location":"builtin-I16/#returns_91","text":"I16 val","title":"Returns"},{"location":"builtin-I32/","text":"I32 [Source] primitive val I32 is _SignedInteger[I32 val, U32 val] val Implements _SignedInteger [ I32 val, U32 val] val Constructors create [Source] new val create( value: I32 val) : I32 val^ Parameters value: I32 val Returns I32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I32 val^ Parameters a: A Returns I32 val^ min_value [Source] new val min_value() : I32 val^ Returns I32 val^ max_value [Source] new val max_value() : I32 val^ Returns I32 val^ Public Functions abs [Source] fun box abs() : U32 val Returns U32 val bit_reverse [Source] fun box bit_reverse() : I32 val Returns I32 val bswap [Source] fun box bswap() : I32 val Returns I32 val popcount [Source] fun box popcount() : U32 val Returns U32 val clz [Source] fun box clz() : U32 val Returns U32 val ctz [Source] fun box ctz() : U32 val Returns U32 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns U32 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns U32 val bitwidth [Source] fun box bitwidth() : U32 val Returns U32 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val max [Source] fun box max( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val addc [Source] fun box addc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) subc [Source] fun box subc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) mulc [Source] fun box mulc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) divc [Source] fun box divc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) remc [Source] fun box remc( y: I32 val) : (I32 val , Bool val) Parameters y: I32 val Returns ( I32 val , Bool val) add_partial [Source] fun box add_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? sub_partial [Source] fun box sub_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? mul_partial [Source] fun box mul_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? div_partial [Source] fun box div_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? rem_partial [Source] fun box rem_partial( y: I32 val) : I32 val ? Parameters y: I32 val Returns I32 val ? divrem_partial [Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ? Parameters y: I32 val Returns ( I32 val , I32 val) ? shl fun box shl( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val shr fun box shr( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val shl_unsafe fun box shl_unsafe( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val shr_unsafe fun box shr_unsafe( y: U32 val) : I32 val Parameters y: U32 val Returns I32 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val sub_unsafe fun box sub_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val mul_unsafe fun box mul_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val div_unsafe fun box div_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val divrem_unsafe fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val) Parameters y: I32 val Returns ( I32 val , I32 val) rem_unsafe fun box rem_unsafe( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val neg_unsafe fun box neg_unsafe() : I32 val Returns I32 val op_and fun box op_and( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val op_or fun box op_or( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val op_xor fun box op_xor( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val op_not fun box op_not() : I32 val Returns I32 val add fun box add( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val sub fun box sub( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val mul fun box mul( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val div fun box div( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val divrem fun box divrem( y: I32 val) : (I32 val , I32 val) Parameters y: I32 val Returns ( I32 val , I32 val) rem fun box rem( y: I32 val) : I32 val Parameters y: I32 val Returns I32 val neg fun box neg() : I32 val Returns I32 val eq fun box eq( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val ne fun box ne( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val lt fun box lt( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val le fun box le( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val ge fun box ge( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val gt fun box gt( y: I32 val) : Bool val Parameters y: I32 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I32 val) : (Less val | Equal val | Greater val) Parameters that: I32 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I32 val Returns I32 val","title":"primitive I32"},{"location":"builtin-I32/#i32","text":"[Source] primitive val I32 is _SignedInteger[I32 val, U32 val] val","title":"I32"},{"location":"builtin-I32/#implements","text":"_SignedInteger [ I32 val, U32 val] val","title":"Implements"},{"location":"builtin-I32/#constructors","text":"","title":"Constructors"},{"location":"builtin-I32/#create","text":"[Source] new val create( value: I32 val) : I32 val^","title":"create"},{"location":"builtin-I32/#parameters","text":"value: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I32/#returns_1","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#min_value","text":"[Source] new val min_value() : I32 val^","title":"min_value"},{"location":"builtin-I32/#returns_2","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#max_value","text":"[Source] new val max_value() : I32 val^","title":"max_value"},{"location":"builtin-I32/#returns_3","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-I32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bit_reverse","text":"[Source] fun box bit_reverse() : I32 val","title":"bit_reverse"},{"location":"builtin-I32/#returns_5","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#bswap","text":"[Source] fun box bswap() : I32 val","title":"bswap"},{"location":"builtin-I32/#returns_6","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-I32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-I32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-I32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-I32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-I32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-I32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I32/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I32/#min","text":"[Source] fun box min( y: I32 val) : I32 val","title":"min"},{"location":"builtin-I32/#parameters_2","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_14","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#max","text":"[Source] fun box max( y: I32 val) : I32 val","title":"max"},{"location":"builtin-I32/#parameters_3","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_15","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#addc","text":"[Source] fun box addc( y: I32 val) : (I32 val , Bool val)","title":"addc"},{"location":"builtin-I32/#parameters_4","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_16","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#subc","text":"[Source] fun box subc( y: I32 val) : (I32 val , Bool val)","title":"subc"},{"location":"builtin-I32/#parameters_5","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_17","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#mulc","text":"[Source] fun box mulc( y: I32 val) : (I32 val , Bool val)","title":"mulc"},{"location":"builtin-I32/#parameters_6","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_18","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#divc","text":"[Source] fun box divc( y: I32 val) : (I32 val , Bool val)","title":"divc"},{"location":"builtin-I32/#parameters_7","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_19","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#remc","text":"[Source] fun box remc( y: I32 val) : (I32 val , Bool val)","title":"remc"},{"location":"builtin-I32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_20","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#add_partial","text":"[Source] fun box add_partial( y: I32 val) : I32 val ?","title":"add_partial"},{"location":"builtin-I32/#parameters_9","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_21","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#sub_partial","text":"[Source] fun box sub_partial( y: I32 val) : I32 val ?","title":"sub_partial"},{"location":"builtin-I32/#parameters_10","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_22","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mul_partial","text":"[Source] fun box mul_partial( y: I32 val) : I32 val ?","title":"mul_partial"},{"location":"builtin-I32/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_23","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#div_partial","text":"[Source] fun box div_partial( y: I32 val) : I32 val ?","title":"div_partial"},{"location":"builtin-I32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_24","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#rem_partial","text":"[Source] fun box rem_partial( y: I32 val) : I32 val ?","title":"rem_partial"},{"location":"builtin-I32/#parameters_13","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_25","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#divrem_partial","text":"[Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ?","title":"divrem_partial"},{"location":"builtin-I32/#parameters_14","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_26","text":"( I32 val , I32 val) ?","title":"Returns"},{"location":"builtin-I32/#shl","text":"fun box shl( y: U32 val) : I32 val","title":"shl"},{"location":"builtin-I32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_27","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr","text":"fun box shr( y: U32 val) : I32 val","title":"shr"},{"location":"builtin-I32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_28","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : I32 val","title":"shl_unsafe"},{"location":"builtin-I32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_29","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : I32 val","title":"shr_unsafe"},{"location":"builtin-I32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_30","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I32/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-I32/#add_unsafe","text":"fun box add_unsafe( y: I32 val) : I32 val","title":"add_unsafe"},{"location":"builtin-I32/#parameters_19","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_32","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub_unsafe","text":"fun box sub_unsafe( y: I32 val) : I32 val","title":"sub_unsafe"},{"location":"builtin-I32/#parameters_20","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_33","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul_unsafe","text":"fun box mul_unsafe( y: I32 val) : I32 val","title":"mul_unsafe"},{"location":"builtin-I32/#parameters_21","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_34","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div_unsafe","text":"fun box div_unsafe( y: I32 val) : I32 val","title":"div_unsafe"},{"location":"builtin-I32/#parameters_22","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_35","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem_unsafe","text":"fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val)","title":"divrem_unsafe"},{"location":"builtin-I32/#parameters_23","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_36","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem_unsafe","text":"fun box rem_unsafe( y: I32 val) : I32 val","title":"rem_unsafe"},{"location":"builtin-I32/#parameters_24","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_37","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg_unsafe","text":"fun box neg_unsafe() : I32 val","title":"neg_unsafe"},{"location":"builtin-I32/#returns_38","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_and","text":"fun box op_and( y: I32 val) : I32 val","title":"op_and"},{"location":"builtin-I32/#parameters_25","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_39","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_or","text":"fun box op_or( y: I32 val) : I32 val","title":"op_or"},{"location":"builtin-I32/#parameters_26","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_xor","text":"fun box op_xor( y: I32 val) : I32 val","title":"op_xor"},{"location":"builtin-I32/#parameters_27","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_41","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_not","text":"fun box op_not() : I32 val","title":"op_not"},{"location":"builtin-I32/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#add","text":"fun box add( y: I32 val) : I32 val","title":"add"},{"location":"builtin-I32/#parameters_28","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_43","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub","text":"fun box sub( y: I32 val) : I32 val","title":"sub"},{"location":"builtin-I32/#parameters_29","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_44","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul","text":"fun box mul( y: I32 val) : I32 val","title":"mul"},{"location":"builtin-I32/#parameters_30","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_45","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div","text":"fun box div( y: I32 val) : I32 val","title":"div"},{"location":"builtin-I32/#parameters_31","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_46","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem","text":"fun box divrem( y: I32 val) : (I32 val , I32 val)","title":"divrem"},{"location":"builtin-I32/#parameters_32","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_47","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem","text":"fun box rem( y: I32 val) : I32 val","title":"rem"},{"location":"builtin-I32/#parameters_33","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg","text":"fun box neg() : I32 val","title":"neg"},{"location":"builtin-I32/#returns_49","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#eq","text":"fun box eq( y: I32 val) : Bool val","title":"eq"},{"location":"builtin-I32/#parameters_34","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ne","text":"fun box ne( y: I32 val) : Bool val","title":"ne"},{"location":"builtin-I32/#parameters_35","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#lt","text":"fun box lt( y: I32 val) : Bool val","title":"lt"},{"location":"builtin-I32/#parameters_36","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#le","text":"fun box le( y: I32 val) : Bool val","title":"le"},{"location":"builtin-I32/#parameters_37","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ge","text":"fun box ge( y: I32 val) : Bool val","title":"ge"},{"location":"builtin-I32/#parameters_38","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#gt","text":"fun box gt( y: I32 val) : Bool val","title":"gt"},{"location":"builtin-I32/#parameters_39","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I32/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-I32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I32/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I32/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I32/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_1","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I32/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I32/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I32/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I32/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I32/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I32/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I32/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I32/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I32/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I32/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I32/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I32/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I32/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I32/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I32/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I32/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I32/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I32/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I32/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I32/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I32/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I32/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I32/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I32/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I32/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I32/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I32/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I32/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I32/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I32/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#compare","text":"fun box compare( that: I32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I32/#parameters_40","text":"that: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I32/#_value","text":"fun box _value() : I32 val","title":"_value"},{"location":"builtin-I32/#returns_91","text":"I32 val","title":"Returns"},{"location":"builtin-I64/","text":"I64 [Source] primitive val I64 is _SignedInteger[I64 val, U64 val] val Implements _SignedInteger [ I64 val, U64 val] val Constructors create [Source] new val create( value: I64 val) : I64 val^ Parameters value: I64 val Returns I64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I64 val^ Parameters a: A Returns I64 val^ min_value [Source] new val min_value() : I64 val^ Returns I64 val^ max_value [Source] new val max_value() : I64 val^ Returns I64 val^ Public Functions abs [Source] fun box abs() : U64 val Returns U64 val bit_reverse [Source] fun box bit_reverse() : I64 val Returns I64 val bswap [Source] fun box bswap() : I64 val Returns I64 val popcount [Source] fun box popcount() : U64 val Returns U64 val clz [Source] fun box clz() : U64 val Returns U64 val ctz [Source] fun box ctz() : U64 val Returns U64 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns U64 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns U64 val bitwidth [Source] fun box bitwidth() : U64 val Returns U64 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val max [Source] fun box max( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) subc [Source] fun box subc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) mulc [Source] fun box mulc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) divc [Source] fun box divc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) remc [Source] fun box remc( y: I64 val) : (I64 val , Bool val) Parameters y: I64 val Returns ( I64 val , Bool val) add_partial [Source] fun box add_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? sub_partial [Source] fun box sub_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? mul_partial [Source] fun box mul_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? div_partial [Source] fun box div_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? rem_partial [Source] fun box rem_partial( y: I64 val) : I64 val ? Parameters y: I64 val Returns I64 val ? divrem_partial [Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ? Parameters y: I64 val Returns ( I64 val , I64 val) ? shl fun box shl( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val shr fun box shr( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val shl_unsafe fun box shl_unsafe( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val shr_unsafe fun box shr_unsafe( y: U64 val) : I64 val Parameters y: U64 val Returns I64 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val sub_unsafe fun box sub_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val mul_unsafe fun box mul_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val div_unsafe fun box div_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val divrem_unsafe fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val) Parameters y: I64 val Returns ( I64 val , I64 val) rem_unsafe fun box rem_unsafe( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val neg_unsafe fun box neg_unsafe() : I64 val Returns I64 val op_and fun box op_and( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val op_or fun box op_or( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val op_xor fun box op_xor( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val op_not fun box op_not() : I64 val Returns I64 val add fun box add( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val sub fun box sub( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val mul fun box mul( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val div fun box div( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val divrem fun box divrem( y: I64 val) : (I64 val , I64 val) Parameters y: I64 val Returns ( I64 val , I64 val) rem fun box rem( y: I64 val) : I64 val Parameters y: I64 val Returns I64 val neg fun box neg() : I64 val Returns I64 val eq fun box eq( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val ne fun box ne( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val lt fun box lt( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val le fun box le( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val ge fun box ge( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val gt fun box gt( y: I64 val) : Bool val Parameters y: I64 val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I64 val) : (Less val | Equal val | Greater val) Parameters that: I64 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I64 val Returns I64 val","title":"primitive I64"},{"location":"builtin-I64/#i64","text":"[Source] primitive val I64 is _SignedInteger[I64 val, U64 val] val","title":"I64"},{"location":"builtin-I64/#implements","text":"_SignedInteger [ I64 val, U64 val] val","title":"Implements"},{"location":"builtin-I64/#constructors","text":"","title":"Constructors"},{"location":"builtin-I64/#create","text":"[Source] new val create( value: I64 val) : I64 val^","title":"create"},{"location":"builtin-I64/#parameters","text":"value: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I64/#returns_1","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#min_value","text":"[Source] new val min_value() : I64 val^","title":"min_value"},{"location":"builtin-I64/#returns_2","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#max_value","text":"[Source] new val max_value() : I64 val^","title":"max_value"},{"location":"builtin-I64/#returns_3","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-I64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bit_reverse","text":"[Source] fun box bit_reverse() : I64 val","title":"bit_reverse"},{"location":"builtin-I64/#returns_5","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#bswap","text":"[Source] fun box bswap() : I64 val","title":"bswap"},{"location":"builtin-I64/#returns_6","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-I64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-I64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-I64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-I64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-I64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-I64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I64/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I64/#min","text":"[Source] fun box min( y: I64 val) : I64 val","title":"min"},{"location":"builtin-I64/#parameters_2","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_14","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#max","text":"[Source] fun box max( y: I64 val) : I64 val","title":"max"},{"location":"builtin-I64/#parameters_3","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_15","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I64/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-I64/#addc","text":"[Source] fun box addc( y: I64 val) : (I64 val , Bool val)","title":"addc"},{"location":"builtin-I64/#parameters_4","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_17","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#subc","text":"[Source] fun box subc( y: I64 val) : (I64 val , Bool val)","title":"subc"},{"location":"builtin-I64/#parameters_5","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_18","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#mulc","text":"[Source] fun box mulc( y: I64 val) : (I64 val , Bool val)","title":"mulc"},{"location":"builtin-I64/#parameters_6","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_19","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#divc","text":"[Source] fun box divc( y: I64 val) : (I64 val , Bool val)","title":"divc"},{"location":"builtin-I64/#parameters_7","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_20","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#remc","text":"[Source] fun box remc( y: I64 val) : (I64 val , Bool val)","title":"remc"},{"location":"builtin-I64/#parameters_8","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_21","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#add_partial","text":"[Source] fun box add_partial( y: I64 val) : I64 val ?","title":"add_partial"},{"location":"builtin-I64/#parameters_9","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_22","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#sub_partial","text":"[Source] fun box sub_partial( y: I64 val) : I64 val ?","title":"sub_partial"},{"location":"builtin-I64/#parameters_10","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_23","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mul_partial","text":"[Source] fun box mul_partial( y: I64 val) : I64 val ?","title":"mul_partial"},{"location":"builtin-I64/#parameters_11","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_24","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#div_partial","text":"[Source] fun box div_partial( y: I64 val) : I64 val ?","title":"div_partial"},{"location":"builtin-I64/#parameters_12","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_25","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#rem_partial","text":"[Source] fun box rem_partial( y: I64 val) : I64 val ?","title":"rem_partial"},{"location":"builtin-I64/#parameters_13","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_26","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#divrem_partial","text":"[Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ?","title":"divrem_partial"},{"location":"builtin-I64/#parameters_14","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_27","text":"( I64 val , I64 val) ?","title":"Returns"},{"location":"builtin-I64/#shl","text":"fun box shl( y: U64 val) : I64 val","title":"shl"},{"location":"builtin-I64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_28","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr","text":"fun box shr( y: U64 val) : I64 val","title":"shr"},{"location":"builtin-I64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_29","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : I64 val","title":"shl_unsafe"},{"location":"builtin-I64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_30","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : I64 val","title":"shr_unsafe"},{"location":"builtin-I64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_31","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I64/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-I64/#add_unsafe","text":"fun box add_unsafe( y: I64 val) : I64 val","title":"add_unsafe"},{"location":"builtin-I64/#parameters_19","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_33","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub_unsafe","text":"fun box sub_unsafe( y: I64 val) : I64 val","title":"sub_unsafe"},{"location":"builtin-I64/#parameters_20","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_34","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul_unsafe","text":"fun box mul_unsafe( y: I64 val) : I64 val","title":"mul_unsafe"},{"location":"builtin-I64/#parameters_21","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_35","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div_unsafe","text":"fun box div_unsafe( y: I64 val) : I64 val","title":"div_unsafe"},{"location":"builtin-I64/#parameters_22","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_36","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem_unsafe","text":"fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val)","title":"divrem_unsafe"},{"location":"builtin-I64/#parameters_23","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_37","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem_unsafe","text":"fun box rem_unsafe( y: I64 val) : I64 val","title":"rem_unsafe"},{"location":"builtin-I64/#parameters_24","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_38","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg_unsafe","text":"fun box neg_unsafe() : I64 val","title":"neg_unsafe"},{"location":"builtin-I64/#returns_39","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_and","text":"fun box op_and( y: I64 val) : I64 val","title":"op_and"},{"location":"builtin-I64/#parameters_25","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_40","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_or","text":"fun box op_or( y: I64 val) : I64 val","title":"op_or"},{"location":"builtin-I64/#parameters_26","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_xor","text":"fun box op_xor( y: I64 val) : I64 val","title":"op_xor"},{"location":"builtin-I64/#parameters_27","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_42","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_not","text":"fun box op_not() : I64 val","title":"op_not"},{"location":"builtin-I64/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#add","text":"fun box add( y: I64 val) : I64 val","title":"add"},{"location":"builtin-I64/#parameters_28","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_44","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub","text":"fun box sub( y: I64 val) : I64 val","title":"sub"},{"location":"builtin-I64/#parameters_29","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_45","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul","text":"fun box mul( y: I64 val) : I64 val","title":"mul"},{"location":"builtin-I64/#parameters_30","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_46","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div","text":"fun box div( y: I64 val) : I64 val","title":"div"},{"location":"builtin-I64/#parameters_31","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_47","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem","text":"fun box divrem( y: I64 val) : (I64 val , I64 val)","title":"divrem"},{"location":"builtin-I64/#parameters_32","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_48","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem","text":"fun box rem( y: I64 val) : I64 val","title":"rem"},{"location":"builtin-I64/#parameters_33","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg","text":"fun box neg() : I64 val","title":"neg"},{"location":"builtin-I64/#returns_50","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#eq","text":"fun box eq( y: I64 val) : Bool val","title":"eq"},{"location":"builtin-I64/#parameters_34","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ne","text":"fun box ne( y: I64 val) : Bool val","title":"ne"},{"location":"builtin-I64/#parameters_35","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#lt","text":"fun box lt( y: I64 val) : Bool val","title":"lt"},{"location":"builtin-I64/#parameters_36","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#le","text":"fun box le( y: I64 val) : Bool val","title":"le"},{"location":"builtin-I64/#parameters_37","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ge","text":"fun box ge( y: I64 val) : Bool val","title":"ge"},{"location":"builtin-I64/#parameters_38","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#gt","text":"fun box gt( y: I64 val) : Bool val","title":"gt"},{"location":"builtin-I64/#parameters_39","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I64/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I64/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I64/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_1","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I64/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I64/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I64/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I64/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I64/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I64/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I64/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I64/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I64/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I64/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I64/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I64/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I64/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I64/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I64/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I64/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I64/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I64/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I64/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I64/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I64/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I64/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I64/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I64/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I64/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I64/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I64/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I64/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I64/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#compare","text":"fun box compare( that: I64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I64/#parameters_40","text":"that: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I64/#_value","text":"fun box _value() : I64 val","title":"_value"},{"location":"builtin-I64/#returns_91","text":"I64 val","title":"Returns"},{"location":"builtin-I8/","text":"I8 [Source] primitive val I8 is _SignedInteger[I8 val, U8 val] val Implements _SignedInteger [ I8 val, U8 val] val Constructors create [Source] new val create( value: I8 val) : I8 val^ Parameters value: I8 val Returns I8 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I8 val^ Parameters a: A Returns I8 val^ min_value [Source] new val min_value() : I8 val^ Returns I8 val^ max_value [Source] new val max_value() : I8 val^ Returns I8 val^ Public Functions abs [Source] fun box abs() : U8 val Returns U8 val bit_reverse [Source] fun box bit_reverse() : I8 val Returns I8 val bswap [Source] fun box bswap() : I8 val Returns I8 val popcount [Source] fun box popcount() : U8 val Returns U8 val clz [Source] fun box clz() : U8 val Returns U8 val ctz [Source] fun box ctz() : U8 val Returns U8 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns U8 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns U8 val bitwidth [Source] fun box bitwidth() : U8 val Returns U8 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val max [Source] fun box max( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val addc [Source] fun box addc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) subc [Source] fun box subc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) mulc [Source] fun box mulc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) divc [Source] fun box divc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) remc [Source] fun box remc( y: I8 val) : (I8 val , Bool val) Parameters y: I8 val Returns ( I8 val , Bool val) add_partial [Source] fun box add_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? sub_partial [Source] fun box sub_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? mul_partial [Source] fun box mul_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? div_partial [Source] fun box div_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? rem_partial [Source] fun box rem_partial( y: I8 val) : I8 val ? Parameters y: I8 val Returns I8 val ? divrem_partial [Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ? Parameters y: I8 val Returns ( I8 val , I8 val) ? shl fun box shl( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val shr fun box shr( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val shl_unsafe fun box shl_unsafe( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val shr_unsafe fun box shr_unsafe( y: U8 val) : I8 val Parameters y: U8 val Returns I8 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val sub_unsafe fun box sub_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val mul_unsafe fun box mul_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val div_unsafe fun box div_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val divrem_unsafe fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val) Parameters y: I8 val Returns ( I8 val , I8 val) rem_unsafe fun box rem_unsafe( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val neg_unsafe fun box neg_unsafe() : I8 val Returns I8 val op_and fun box op_and( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val op_or fun box op_or( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val op_xor fun box op_xor( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val op_not fun box op_not() : I8 val Returns I8 val add fun box add( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val sub fun box sub( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val mul fun box mul( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val div fun box div( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val divrem fun box divrem( y: I8 val) : (I8 val , I8 val) Parameters y: I8 val Returns ( I8 val , I8 val) rem fun box rem( y: I8 val) : I8 val Parameters y: I8 val Returns I8 val neg fun box neg() : I8 val Returns I8 val eq fun box eq( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val ne fun box ne( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val lt fun box lt( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val le fun box le( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val ge fun box ge( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val gt fun box gt( y: I8 val) : Bool val Parameters y: I8 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: I8 val) : (Less val | Equal val | Greater val) Parameters that: I8 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : I8 val Returns I8 val","title":"primitive I8"},{"location":"builtin-I8/#i8","text":"[Source] primitive val I8 is _SignedInteger[I8 val, U8 val] val","title":"I8"},{"location":"builtin-I8/#implements","text":"_SignedInteger [ I8 val, U8 val] val","title":"Implements"},{"location":"builtin-I8/#constructors","text":"","title":"Constructors"},{"location":"builtin-I8/#create","text":"[Source] new val create( value: I8 val) : I8 val^","title":"create"},{"location":"builtin-I8/#parameters","text":"value: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : I8 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I8/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I8/#returns_1","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#min_value","text":"[Source] new val min_value() : I8 val^","title":"min_value"},{"location":"builtin-I8/#returns_2","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#max_value","text":"[Source] new val max_value() : I8 val^","title":"max_value"},{"location":"builtin-I8/#returns_3","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-I8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bit_reverse","text":"[Source] fun box bit_reverse() : I8 val","title":"bit_reverse"},{"location":"builtin-I8/#returns_5","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#bswap","text":"[Source] fun box bswap() : I8 val","title":"bswap"},{"location":"builtin-I8/#returns_6","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-I8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-I8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-I8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-I8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-I8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-I8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I8/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I8/#min","text":"[Source] fun box min( y: I8 val) : I8 val","title":"min"},{"location":"builtin-I8/#parameters_2","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_14","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#max","text":"[Source] fun box max( y: I8 val) : I8 val","title":"max"},{"location":"builtin-I8/#parameters_3","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_15","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#addc","text":"[Source] fun box addc( y: I8 val) : (I8 val , Bool val)","title":"addc"},{"location":"builtin-I8/#parameters_4","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_16","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#subc","text":"[Source] fun box subc( y: I8 val) : (I8 val , Bool val)","title":"subc"},{"location":"builtin-I8/#parameters_5","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_17","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#mulc","text":"[Source] fun box mulc( y: I8 val) : (I8 val , Bool val)","title":"mulc"},{"location":"builtin-I8/#parameters_6","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_18","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#divc","text":"[Source] fun box divc( y: I8 val) : (I8 val , Bool val)","title":"divc"},{"location":"builtin-I8/#parameters_7","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_19","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#remc","text":"[Source] fun box remc( y: I8 val) : (I8 val , Bool val)","title":"remc"},{"location":"builtin-I8/#parameters_8","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_20","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#add_partial","text":"[Source] fun box add_partial( y: I8 val) : I8 val ?","title":"add_partial"},{"location":"builtin-I8/#parameters_9","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_21","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#sub_partial","text":"[Source] fun box sub_partial( y: I8 val) : I8 val ?","title":"sub_partial"},{"location":"builtin-I8/#parameters_10","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_22","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mul_partial","text":"[Source] fun box mul_partial( y: I8 val) : I8 val ?","title":"mul_partial"},{"location":"builtin-I8/#parameters_11","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_23","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#div_partial","text":"[Source] fun box div_partial( y: I8 val) : I8 val ?","title":"div_partial"},{"location":"builtin-I8/#parameters_12","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_24","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#rem_partial","text":"[Source] fun box rem_partial( y: I8 val) : I8 val ?","title":"rem_partial"},{"location":"builtin-I8/#parameters_13","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_25","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#divrem_partial","text":"[Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ?","title":"divrem_partial"},{"location":"builtin-I8/#parameters_14","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_26","text":"( I8 val , I8 val) ?","title":"Returns"},{"location":"builtin-I8/#shl","text":"fun box shl( y: U8 val) : I8 val","title":"shl"},{"location":"builtin-I8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_27","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr","text":"fun box shr( y: U8 val) : I8 val","title":"shr"},{"location":"builtin-I8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_28","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : I8 val","title":"shl_unsafe"},{"location":"builtin-I8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_29","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : I8 val","title":"shr_unsafe"},{"location":"builtin-I8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_30","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I8/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-I8/#add_unsafe","text":"fun box add_unsafe( y: I8 val) : I8 val","title":"add_unsafe"},{"location":"builtin-I8/#parameters_19","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_32","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub_unsafe","text":"fun box sub_unsafe( y: I8 val) : I8 val","title":"sub_unsafe"},{"location":"builtin-I8/#parameters_20","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_33","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul_unsafe","text":"fun box mul_unsafe( y: I8 val) : I8 val","title":"mul_unsafe"},{"location":"builtin-I8/#parameters_21","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_34","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div_unsafe","text":"fun box div_unsafe( y: I8 val) : I8 val","title":"div_unsafe"},{"location":"builtin-I8/#parameters_22","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_35","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem_unsafe","text":"fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val)","title":"divrem_unsafe"},{"location":"builtin-I8/#parameters_23","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_36","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem_unsafe","text":"fun box rem_unsafe( y: I8 val) : I8 val","title":"rem_unsafe"},{"location":"builtin-I8/#parameters_24","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_37","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg_unsafe","text":"fun box neg_unsafe() : I8 val","title":"neg_unsafe"},{"location":"builtin-I8/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_and","text":"fun box op_and( y: I8 val) : I8 val","title":"op_and"},{"location":"builtin-I8/#parameters_25","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_39","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_or","text":"fun box op_or( y: I8 val) : I8 val","title":"op_or"},{"location":"builtin-I8/#parameters_26","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_xor","text":"fun box op_xor( y: I8 val) : I8 val","title":"op_xor"},{"location":"builtin-I8/#parameters_27","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_41","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_not","text":"fun box op_not() : I8 val","title":"op_not"},{"location":"builtin-I8/#returns_42","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#add","text":"fun box add( y: I8 val) : I8 val","title":"add"},{"location":"builtin-I8/#parameters_28","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_43","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub","text":"fun box sub( y: I8 val) : I8 val","title":"sub"},{"location":"builtin-I8/#parameters_29","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_44","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul","text":"fun box mul( y: I8 val) : I8 val","title":"mul"},{"location":"builtin-I8/#parameters_30","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_45","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div","text":"fun box div( y: I8 val) : I8 val","title":"div"},{"location":"builtin-I8/#parameters_31","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem","text":"fun box divrem( y: I8 val) : (I8 val , I8 val)","title":"divrem"},{"location":"builtin-I8/#parameters_32","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_47","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem","text":"fun box rem( y: I8 val) : I8 val","title":"rem"},{"location":"builtin-I8/#parameters_33","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_48","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg","text":"fun box neg() : I8 val","title":"neg"},{"location":"builtin-I8/#returns_49","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#eq","text":"fun box eq( y: I8 val) : Bool val","title":"eq"},{"location":"builtin-I8/#parameters_34","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ne","text":"fun box ne( y: I8 val) : Bool val","title":"ne"},{"location":"builtin-I8/#parameters_35","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#lt","text":"fun box lt( y: I8 val) : Bool val","title":"lt"},{"location":"builtin-I8/#parameters_36","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#le","text":"fun box le( y: I8 val) : Bool val","title":"le"},{"location":"builtin-I8/#parameters_37","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ge","text":"fun box ge( y: I8 val) : Bool val","title":"ge"},{"location":"builtin-I8/#parameters_38","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#gt","text":"fun box gt( y: I8 val) : Bool val","title":"gt"},{"location":"builtin-I8/#parameters_39","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I8/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-I8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I8/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#i8_1","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I8/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I8/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I8/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I8/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I8/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I8/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I8/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I8/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I8/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I8/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I8/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I8/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I8/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I8/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I8/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I8/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I8/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I8/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I8/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I8/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I8/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I8/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I8/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I8/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I8/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I8/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I8/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I8/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I8/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I8/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I8/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I8/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#compare","text":"fun box compare( that: I8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I8/#parameters_40","text":"that: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I8/#_value","text":"fun box _value() : I8 val","title":"_value"},{"location":"builtin-I8/#returns_91","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/","text":"ILong [Source] primitive val ILong is _SignedInteger[ILong val, ULong val] val Implements _SignedInteger [ ILong val, ULong val] val Constructors create [Source] new val create( value: ILong val) : ILong val^ Parameters value: ILong val Returns ILong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ILong val^ Parameters a: A Returns ILong val^ min_value [Source] new val min_value() : ILong val^ Returns ILong val^ max_value [Source] new val max_value() : ILong val^ Returns ILong val^ Public Functions abs [Source] fun box abs() : ULong val Returns ULong val bit_reverse [Source] fun box bit_reverse() : ILong val Returns ILong val bswap [Source] fun box bswap() : ILong val Returns ILong val popcount [Source] fun box popcount() : ULong val Returns ULong val clz [Source] fun box clz() : ULong val Returns ULong val ctz [Source] fun box ctz() : ULong val Returns ULong val clz_unsafe [Source] fun box clz_unsafe() : ULong val Returns ULong val ctz_unsafe [Source] fun box ctz_unsafe() : ULong val Returns ULong val bitwidth [Source] fun box bitwidth() : ULong val Returns ULong val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val max [Source] fun box max( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) subc [Source] fun box subc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) mulc [Source] fun box mulc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) divc [Source] fun box divc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) remc [Source] fun box remc( y: ILong val) : (ILong val , Bool val) Parameters y: ILong val Returns ( ILong val , Bool val) add_partial [Source] fun box add_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? sub_partial [Source] fun box sub_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? mul_partial [Source] fun box mul_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? div_partial [Source] fun box div_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? rem_partial [Source] fun box rem_partial( y: ILong val) : ILong val ? Parameters y: ILong val Returns ILong val ? divrem_partial [Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ? Parameters y: ILong val Returns ( ILong val , ILong val) ? shl fun box shl( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val shr fun box shr( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val shl_unsafe fun box shl_unsafe( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val shr_unsafe fun box shr_unsafe( y: ULong val) : ILong val Parameters y: ULong val Returns ILong val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val sub_unsafe fun box sub_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val mul_unsafe fun box mul_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val div_unsafe fun box div_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val divrem_unsafe fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val) Parameters y: ILong val Returns ( ILong val , ILong val) rem_unsafe fun box rem_unsafe( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val neg_unsafe fun box neg_unsafe() : ILong val Returns ILong val op_and fun box op_and( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val op_or fun box op_or( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val op_xor fun box op_xor( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val op_not fun box op_not() : ILong val Returns ILong val add fun box add( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val sub fun box sub( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val mul fun box mul( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val div fun box div( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val divrem fun box divrem( y: ILong val) : (ILong val , ILong val) Parameters y: ILong val Returns ( ILong val , ILong val) rem fun box rem( y: ILong val) : ILong val Parameters y: ILong val Returns ILong val neg fun box neg() : ILong val Returns ILong val eq fun box eq( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val ne fun box ne( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val lt fun box lt( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val le fun box le( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val ge fun box ge( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val gt fun box gt( y: ILong val) : Bool val Parameters y: ILong val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: ILong val) : (Less val | Equal val | Greater val) Parameters that: ILong val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : ILong val Returns ILong val","title":"primitive ILong"},{"location":"builtin-ILong/#ilong","text":"[Source] primitive val ILong is _SignedInteger[ILong val, ULong val] val","title":"ILong"},{"location":"builtin-ILong/#implements","text":"_SignedInteger [ ILong val, ULong val] val","title":"Implements"},{"location":"builtin-ILong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ILong/#create","text":"[Source] new val create( value: ILong val) : ILong val^","title":"create"},{"location":"builtin-ILong/#parameters","text":"value: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ILong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ILong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ILong/#returns_1","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#min_value","text":"[Source] new val min_value() : ILong val^","title":"min_value"},{"location":"builtin-ILong/#returns_2","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#max_value","text":"[Source] new val max_value() : ILong val^","title":"max_value"},{"location":"builtin-ILong/#returns_3","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ILong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ILong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bit_reverse","text":"[Source] fun box bit_reverse() : ILong val","title":"bit_reverse"},{"location":"builtin-ILong/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#bswap","text":"[Source] fun box bswap() : ILong val","title":"bswap"},{"location":"builtin-ILong/#returns_6","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ILong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ILong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ILong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz_unsafe","text":"[Source] fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ILong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ILong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ILong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ILong/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#min","text":"[Source] fun box min( y: ILong val) : ILong val","title":"min"},{"location":"builtin-ILong/#parameters_2","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_14","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#max","text":"[Source] fun box max( y: ILong val) : ILong val","title":"max"},{"location":"builtin-ILong/#parameters_3","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_15","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ILong/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#addc","text":"[Source] fun box addc( y: ILong val) : (ILong val , Bool val)","title":"addc"},{"location":"builtin-ILong/#parameters_4","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_17","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#subc","text":"[Source] fun box subc( y: ILong val) : (ILong val , Bool val)","title":"subc"},{"location":"builtin-ILong/#parameters_5","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_18","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#mulc","text":"[Source] fun box mulc( y: ILong val) : (ILong val , Bool val)","title":"mulc"},{"location":"builtin-ILong/#parameters_6","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_19","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#divc","text":"[Source] fun box divc( y: ILong val) : (ILong val , Bool val)","title":"divc"},{"location":"builtin-ILong/#parameters_7","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_20","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#remc","text":"[Source] fun box remc( y: ILong val) : (ILong val , Bool val)","title":"remc"},{"location":"builtin-ILong/#parameters_8","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_21","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#add_partial","text":"[Source] fun box add_partial( y: ILong val) : ILong val ?","title":"add_partial"},{"location":"builtin-ILong/#parameters_9","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_22","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#sub_partial","text":"[Source] fun box sub_partial( y: ILong val) : ILong val ?","title":"sub_partial"},{"location":"builtin-ILong/#parameters_10","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_23","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mul_partial","text":"[Source] fun box mul_partial( y: ILong val) : ILong val ?","title":"mul_partial"},{"location":"builtin-ILong/#parameters_11","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_24","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#div_partial","text":"[Source] fun box div_partial( y: ILong val) : ILong val ?","title":"div_partial"},{"location":"builtin-ILong/#parameters_12","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_25","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#rem_partial","text":"[Source] fun box rem_partial( y: ILong val) : ILong val ?","title":"rem_partial"},{"location":"builtin-ILong/#parameters_13","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_26","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ?","title":"divrem_partial"},{"location":"builtin-ILong/#parameters_14","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_27","text":"( ILong val , ILong val) ?","title":"Returns"},{"location":"builtin-ILong/#shl","text":"fun box shl( y: ULong val) : ILong val","title":"shl"},{"location":"builtin-ILong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_28","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr","text":"fun box shr( y: ULong val) : ILong val","title":"shr"},{"location":"builtin-ILong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_29","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ILong val","title":"shl_unsafe"},{"location":"builtin-ILong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_30","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ILong val","title":"shr_unsafe"},{"location":"builtin-ILong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_31","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ILong/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-ILong/#add_unsafe","text":"fun box add_unsafe( y: ILong val) : ILong val","title":"add_unsafe"},{"location":"builtin-ILong/#parameters_19","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_33","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub_unsafe","text":"fun box sub_unsafe( y: ILong val) : ILong val","title":"sub_unsafe"},{"location":"builtin-ILong/#parameters_20","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_34","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul_unsafe","text":"fun box mul_unsafe( y: ILong val) : ILong val","title":"mul_unsafe"},{"location":"builtin-ILong/#parameters_21","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_35","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div_unsafe","text":"fun box div_unsafe( y: ILong val) : ILong val","title":"div_unsafe"},{"location":"builtin-ILong/#parameters_22","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_36","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val)","title":"divrem_unsafe"},{"location":"builtin-ILong/#parameters_23","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_37","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem_unsafe","text":"fun box rem_unsafe( y: ILong val) : ILong val","title":"rem_unsafe"},{"location":"builtin-ILong/#parameters_24","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_38","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg_unsafe","text":"fun box neg_unsafe() : ILong val","title":"neg_unsafe"},{"location":"builtin-ILong/#returns_39","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_and","text":"fun box op_and( y: ILong val) : ILong val","title":"op_and"},{"location":"builtin-ILong/#parameters_25","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_40","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_or","text":"fun box op_or( y: ILong val) : ILong val","title":"op_or"},{"location":"builtin-ILong/#parameters_26","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_41","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_xor","text":"fun box op_xor( y: ILong val) : ILong val","title":"op_xor"},{"location":"builtin-ILong/#parameters_27","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_42","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_not","text":"fun box op_not() : ILong val","title":"op_not"},{"location":"builtin-ILong/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#add","text":"fun box add( y: ILong val) : ILong val","title":"add"},{"location":"builtin-ILong/#parameters_28","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_44","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub","text":"fun box sub( y: ILong val) : ILong val","title":"sub"},{"location":"builtin-ILong/#parameters_29","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_45","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul","text":"fun box mul( y: ILong val) : ILong val","title":"mul"},{"location":"builtin-ILong/#parameters_30","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_46","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div","text":"fun box div( y: ILong val) : ILong val","title":"div"},{"location":"builtin-ILong/#parameters_31","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_47","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem","text":"fun box divrem( y: ILong val) : (ILong val , ILong val)","title":"divrem"},{"location":"builtin-ILong/#parameters_32","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_48","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem","text":"fun box rem( y: ILong val) : ILong val","title":"rem"},{"location":"builtin-ILong/#parameters_33","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_49","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg","text":"fun box neg() : ILong val","title":"neg"},{"location":"builtin-ILong/#returns_50","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#eq","text":"fun box eq( y: ILong val) : Bool val","title":"eq"},{"location":"builtin-ILong/#parameters_34","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ne","text":"fun box ne( y: ILong val) : Bool val","title":"ne"},{"location":"builtin-ILong/#parameters_35","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#lt","text":"fun box lt( y: ILong val) : Bool val","title":"lt"},{"location":"builtin-ILong/#parameters_36","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#le","text":"fun box le( y: ILong val) : Bool val","title":"le"},{"location":"builtin-ILong/#parameters_37","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ge","text":"fun box ge( y: ILong val) : Bool val","title":"ge"},{"location":"builtin-ILong/#parameters_38","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#gt","text":"fun box gt( y: ILong val) : Bool val","title":"gt"},{"location":"builtin-ILong/#parameters_39","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ILong/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ILong/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ILong/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ILong/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ILong/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ILong/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_1","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ILong/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ILong/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ILong/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ILong/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ILong/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ILong/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ILong/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ILong/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ILong/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ILong/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ILong/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ILong/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ILong/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ILong/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ILong/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ILong/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ILong/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ILong/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ILong/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ILong/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ILong/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ILong/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ILong/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ILong/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ILong/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ILong/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ILong/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#compare","text":"fun box compare( that: ILong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ILong/#parameters_40","text":"that: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ILong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ILong/#_value","text":"fun box _value() : ILong val","title":"_value"},{"location":"builtin-ILong/#returns_91","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/","text":"ISize [Source] primitive val ISize is _SignedInteger[ISize val, USize val] val Implements _SignedInteger [ ISize val, USize val] val Constructors create [Source] new val create( value: ISize val) : ISize val^ Parameters value: ISize val Returns ISize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ISize val^ Parameters a: A Returns ISize val^ min_value [Source] new val min_value() : ISize val^ Returns ISize val^ max_value [Source] new val max_value() : ISize val^ Returns ISize val^ Public Functions abs [Source] fun box abs() : USize val Returns USize val bit_reverse [Source] fun box bit_reverse() : ISize val Returns ISize val bswap [Source] fun box bswap() : ISize val Returns ISize val popcount [Source] fun box popcount() : USize val Returns USize val clz [Source] fun box clz() : USize val Returns USize val ctz [Source] fun box ctz() : USize val Returns USize val clz_unsafe [Source] fun box clz_unsafe() : USize val Returns USize val ctz_unsafe [Source] fun box ctz_unsafe() : USize val Returns USize val bitwidth [Source] fun box bitwidth() : USize val Returns USize val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val max [Source] fun box max( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val addc [Source] fun box addc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) subc [Source] fun box subc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) mulc [Source] fun box mulc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) divc [Source] fun box divc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) remc [Source] fun box remc( y: ISize val) : (ISize val , Bool val) Parameters y: ISize val Returns ( ISize val , Bool val) add_partial [Source] fun box add_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? sub_partial [Source] fun box sub_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? mul_partial [Source] fun box mul_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? div_partial [Source] fun box div_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? rem_partial [Source] fun box rem_partial( y: ISize val) : ISize val ? Parameters y: ISize val Returns ISize val ? divrem_partial [Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ? Parameters y: ISize val Returns ( ISize val , ISize val) ? shl fun box shl( y: USize val) : ISize val Parameters y: USize val Returns ISize val shr fun box shr( y: USize val) : ISize val Parameters y: USize val Returns ISize val shl_unsafe fun box shl_unsafe( y: USize val) : ISize val Parameters y: USize val Returns ISize val shr_unsafe fun box shr_unsafe( y: USize val) : ISize val Parameters y: USize val Returns ISize val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val sub_unsafe fun box sub_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val mul_unsafe fun box mul_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val div_unsafe fun box div_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val divrem_unsafe fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val) Parameters y: ISize val Returns ( ISize val , ISize val) rem_unsafe fun box rem_unsafe( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val neg_unsafe fun box neg_unsafe() : ISize val Returns ISize val op_and fun box op_and( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val op_or fun box op_or( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val op_xor fun box op_xor( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val op_not fun box op_not() : ISize val Returns ISize val add fun box add( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val sub fun box sub( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val mul fun box mul( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val div fun box div( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val divrem fun box divrem( y: ISize val) : (ISize val , ISize val) Parameters y: ISize val Returns ( ISize val , ISize val) rem fun box rem( y: ISize val) : ISize val Parameters y: ISize val Returns ISize val neg fun box neg() : ISize val Returns ISize val eq fun box eq( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val ne fun box ne( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val lt fun box lt( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val le fun box le( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val ge fun box ge( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val gt fun box gt( y: ISize val) : Bool val Parameters y: ISize val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: ISize val) : (Less val | Equal val | Greater val) Parameters that: ISize val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : ISize val Returns ISize val","title":"primitive ISize"},{"location":"builtin-ISize/#isize","text":"[Source] primitive val ISize is _SignedInteger[ISize val, USize val] val","title":"ISize"},{"location":"builtin-ISize/#implements","text":"_SignedInteger [ ISize val, USize val] val","title":"Implements"},{"location":"builtin-ISize/#constructors","text":"","title":"Constructors"},{"location":"builtin-ISize/#create","text":"[Source] new val create( value: ISize val) : ISize val^","title":"create"},{"location":"builtin-ISize/#parameters","text":"value: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ISize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ISize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ISize/#returns_1","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#min_value","text":"[Source] new val min_value() : ISize val^","title":"min_value"},{"location":"builtin-ISize/#returns_2","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#max_value","text":"[Source] new val max_value() : ISize val^","title":"max_value"},{"location":"builtin-ISize/#returns_3","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ISize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-ISize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bit_reverse","text":"[Source] fun box bit_reverse() : ISize val","title":"bit_reverse"},{"location":"builtin-ISize/#returns_5","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#bswap","text":"[Source] fun box bswap() : ISize val","title":"bswap"},{"location":"builtin-ISize/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-ISize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-ISize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-ISize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz_unsafe","text":"[Source] fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-ISize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-ISize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-ISize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ISize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#min","text":"[Source] fun box min( y: ISize val) : ISize val","title":"min"},{"location":"builtin-ISize/#parameters_2","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_14","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#max","text":"[Source] fun box max( y: ISize val) : ISize val","title":"max"},{"location":"builtin-ISize/#parameters_3","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_15","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#addc","text":"[Source] fun box addc( y: ISize val) : (ISize val , Bool val)","title":"addc"},{"location":"builtin-ISize/#parameters_4","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_16","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#subc","text":"[Source] fun box subc( y: ISize val) : (ISize val , Bool val)","title":"subc"},{"location":"builtin-ISize/#parameters_5","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_17","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#mulc","text":"[Source] fun box mulc( y: ISize val) : (ISize val , Bool val)","title":"mulc"},{"location":"builtin-ISize/#parameters_6","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_18","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#divc","text":"[Source] fun box divc( y: ISize val) : (ISize val , Bool val)","title":"divc"},{"location":"builtin-ISize/#parameters_7","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_19","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#remc","text":"[Source] fun box remc( y: ISize val) : (ISize val , Bool val)","title":"remc"},{"location":"builtin-ISize/#parameters_8","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_20","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#add_partial","text":"[Source] fun box add_partial( y: ISize val) : ISize val ?","title":"add_partial"},{"location":"builtin-ISize/#parameters_9","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_21","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#sub_partial","text":"[Source] fun box sub_partial( y: ISize val) : ISize val ?","title":"sub_partial"},{"location":"builtin-ISize/#parameters_10","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_22","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mul_partial","text":"[Source] fun box mul_partial( y: ISize val) : ISize val ?","title":"mul_partial"},{"location":"builtin-ISize/#parameters_11","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_23","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#div_partial","text":"[Source] fun box div_partial( y: ISize val) : ISize val ?","title":"div_partial"},{"location":"builtin-ISize/#parameters_12","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_24","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#rem_partial","text":"[Source] fun box rem_partial( y: ISize val) : ISize val ?","title":"rem_partial"},{"location":"builtin-ISize/#parameters_13","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_25","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#divrem_partial","text":"[Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ?","title":"divrem_partial"},{"location":"builtin-ISize/#parameters_14","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_26","text":"( ISize val , ISize val) ?","title":"Returns"},{"location":"builtin-ISize/#shl","text":"fun box shl( y: USize val) : ISize val","title":"shl"},{"location":"builtin-ISize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_27","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr","text":"fun box shr( y: USize val) : ISize val","title":"shr"},{"location":"builtin-ISize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_28","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : ISize val","title":"shl_unsafe"},{"location":"builtin-ISize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_29","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : ISize val","title":"shr_unsafe"},{"location":"builtin-ISize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_30","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ISize/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-ISize/#add_unsafe","text":"fun box add_unsafe( y: ISize val) : ISize val","title":"add_unsafe"},{"location":"builtin-ISize/#parameters_19","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_32","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub_unsafe","text":"fun box sub_unsafe( y: ISize val) : ISize val","title":"sub_unsafe"},{"location":"builtin-ISize/#parameters_20","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_33","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul_unsafe","text":"fun box mul_unsafe( y: ISize val) : ISize val","title":"mul_unsafe"},{"location":"builtin-ISize/#parameters_21","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_34","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div_unsafe","text":"fun box div_unsafe( y: ISize val) : ISize val","title":"div_unsafe"},{"location":"builtin-ISize/#parameters_22","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_35","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem_unsafe","text":"fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val)","title":"divrem_unsafe"},{"location":"builtin-ISize/#parameters_23","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_36","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem_unsafe","text":"fun box rem_unsafe( y: ISize val) : ISize val","title":"rem_unsafe"},{"location":"builtin-ISize/#parameters_24","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_37","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg_unsafe","text":"fun box neg_unsafe() : ISize val","title":"neg_unsafe"},{"location":"builtin-ISize/#returns_38","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_and","text":"fun box op_and( y: ISize val) : ISize val","title":"op_and"},{"location":"builtin-ISize/#parameters_25","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_39","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_or","text":"fun box op_or( y: ISize val) : ISize val","title":"op_or"},{"location":"builtin-ISize/#parameters_26","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_40","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_xor","text":"fun box op_xor( y: ISize val) : ISize val","title":"op_xor"},{"location":"builtin-ISize/#parameters_27","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_41","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_not","text":"fun box op_not() : ISize val","title":"op_not"},{"location":"builtin-ISize/#returns_42","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#add","text":"fun box add( y: ISize val) : ISize val","title":"add"},{"location":"builtin-ISize/#parameters_28","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_43","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub","text":"fun box sub( y: ISize val) : ISize val","title":"sub"},{"location":"builtin-ISize/#parameters_29","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_44","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul","text":"fun box mul( y: ISize val) : ISize val","title":"mul"},{"location":"builtin-ISize/#parameters_30","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_45","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div","text":"fun box div( y: ISize val) : ISize val","title":"div"},{"location":"builtin-ISize/#parameters_31","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem","text":"fun box divrem( y: ISize val) : (ISize val , ISize val)","title":"divrem"},{"location":"builtin-ISize/#parameters_32","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_47","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem","text":"fun box rem( y: ISize val) : ISize val","title":"rem"},{"location":"builtin-ISize/#parameters_33","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_48","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg","text":"fun box neg() : ISize val","title":"neg"},{"location":"builtin-ISize/#returns_49","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#eq","text":"fun box eq( y: ISize val) : Bool val","title":"eq"},{"location":"builtin-ISize/#parameters_34","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ne","text":"fun box ne( y: ISize val) : Bool val","title":"ne"},{"location":"builtin-ISize/#parameters_35","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#lt","text":"fun box lt( y: ISize val) : Bool val","title":"lt"},{"location":"builtin-ISize/#parameters_36","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#le","text":"fun box le( y: ISize val) : Bool val","title":"le"},{"location":"builtin-ISize/#parameters_37","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ge","text":"fun box ge( y: ISize val) : Bool val","title":"ge"},{"location":"builtin-ISize/#parameters_38","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#gt","text":"fun box gt( y: ISize val) : Bool val","title":"gt"},{"location":"builtin-ISize/#parameters_39","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-ISize/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ISize/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ISize/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ISize/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ISize/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ISize/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ISize/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ISize/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_1","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ISize/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ISize/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ISize/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ISize/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ISize/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ISize/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ISize/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ISize/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ISize/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ISize/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ISize/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ISize/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ISize/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ISize/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ISize/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ISize/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ISize/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ISize/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ISize/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ISize/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ISize/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ISize/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ISize/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ISize/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ISize/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ISize/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#compare","text":"fun box compare( that: ISize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ISize/#parameters_40","text":"that: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ISize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ISize/#_value","text":"fun box _value() : ISize val","title":"_value"},{"location":"builtin-ISize/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-InputNotify/","text":"InputNotify [Source] Notification for data arriving via an input stream. interface ref InputNotify Public Functions apply [Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val Parameters data: Array [ U8 val] iso Returns None val dispose [Source] Called when no more data will arrive on the stream. fun ref dispose() : None val Returns None val","title":"interface InputNotify"},{"location":"builtin-InputNotify/#inputnotify","text":"[Source] Notification for data arriving via an input stream. interface ref InputNotify","title":"InputNotify"},{"location":"builtin-InputNotify/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-InputNotify/#apply","text":"[Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val","title":"apply"},{"location":"builtin-InputNotify/#parameters","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-InputNotify/#returns","text":"None val","title":"Returns"},{"location":"builtin-InputNotify/#dispose","text":"[Source] Called when no more data will arrive on the stream. fun ref dispose() : None val","title":"dispose"},{"location":"builtin-InputNotify/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-InputStream/","text":"InputStream [Source] Asynchronous access to some input stream. interface tag InputStream Public Behaviours apply [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq) Parameters notify: ( InputNotify iso | None val) chunk_size: USize val = seq dispose [Source] Clear the notifier in order to shut down input. be dispose()","title":"interface InputStream"},{"location":"builtin-InputStream/#inputstream","text":"[Source] Asynchronous access to some input stream. interface tag InputStream","title":"InputStream"},{"location":"builtin-InputStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-InputStream/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq)","title":"apply"},{"location":"builtin-InputStream/#parameters","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = seq","title":"Parameters"},{"location":"builtin-InputStream/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Int/","text":"Int [Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Int"},{"location":"builtin-Int/#int","text":"[Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Int"},{"location":"builtin-Int/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-Integer/","text":"Integer[A: Integer [A] val] [Source] trait val Integer[A: Integer[A] val] is Real[A] val Implements Real [A] val Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions add_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A Parameters y: A Returns A add_partial [Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ? Parameters y: A Returns A ? sub_partial [Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ? Parameters y: A Returns A ? mul_partial [Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ? Parameters y: A Returns A ? div_partial [Source] Divides this number by y. If y is 0 this function errors. fun box div_partial( y: A) : A ? Parameters y: A Returns A ? rem_partial [Source] Calculates the remainder of this number divided by y. If y is 0 this function errors. fun box rem_partial( y: A) : A ? Parameters y: A Returns A ? divrem_partial [Source] Divides this number by y and calculates the remainder of the operation. If y is 0 this function errors. fun box divrem_partial( y: A) : (A , A) ? Parameters y: A Returns (A , A) ? neg_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A Returns A addc [Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) subc [Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) mulc [Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) divc [Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) remc [Source] Calculated the ramainder of this number dividec by y and return the result and a flag indicating division by zero or overflow. fun box remc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) op_and [Source] fun box op_and( y: A) : A Parameters y: A Returns A op_or [Source] fun box op_or( y: A) : A Parameters y: A Returns A op_xor [Source] fun box op_xor( y: A) : A Parameters y: A Returns A op_not [Source] fun box op_not() : A Returns A bit_reverse [Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A Returns A bswap [Source] fun box bswap() : A Returns A add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait Integer"},{"location":"builtin-Integer/#integer91a-integer91a93-val93","text":"[Source] trait val Integer[A: Integer[A] val] is Real[A] val","title":"Integer[A: Integer[A] val]"},{"location":"builtin-Integer/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-Integer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Integer/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Integer/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Integer/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Integer/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Integer/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Integer/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Integer/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Integer/#add_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-Integer/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-Integer/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-Integer/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Integer/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-Integer/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem_unsafe","text":"[Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-Integer/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem_unsafe","text":"[Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-Integer/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Integer/#add_partial","text":"[Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-Integer/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_10","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#sub_partial","text":"[Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-Integer/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_11","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mul_partial","text":"[Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-Integer/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_12","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#div_partial","text":"[Source] Divides this number by y. If y is 0 this function errors. fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-Integer/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#rem_partial","text":"[Source] Calculates the remainder of this number divided by y. If y is 0 this function errors. fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-Integer/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_14","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#divrem_partial","text":"[Source] Divides this number by y and calculates the remainder of the operation. If y is 0 this function errors. fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-Integer/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_15","text":"(A , A) ?","title":"Returns"},{"location":"builtin-Integer/#neg_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-Integer/#returns_16","text":"A","title":"Returns"},{"location":"builtin-Integer/#addc","text":"[Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-Integer/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_17","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#subc","text":"[Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-Integer/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_18","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#mulc","text":"[Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-Integer/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_19","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#divc","text":"[Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-Integer/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_20","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#remc","text":"[Source] Calculated the ramainder of this number dividec by y and return the result and a flag indicating division by zero or overflow. fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-Integer/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_21","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-Integer/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_22","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-Integer/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_23","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-Integer/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_24","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-Integer/#returns_25","text":"A","title":"Returns"},{"location":"builtin-Integer/#bit_reverse","text":"[Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-Integer/#returns_26","text":"A","title":"Returns"},{"location":"builtin-Integer/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-Integer/#returns_27","text":"A","title":"Returns"},{"location":"builtin-Integer/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Integer/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_28","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Integer/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_29","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Integer/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_30","text":"A","title":"Returns"},{"location":"builtin-Integer/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Integer/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_31","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Integer/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_32","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Integer/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_33","text":"A","title":"Returns"},{"location":"builtin-Integer/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Integer/#returns_34","text":"A","title":"Returns"},{"location":"builtin-Integer/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-Integer/#parameters_28","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-Integer/#parameters_29","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_36","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-Integer/#parameters_30","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_37","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-Integer/#parameters_31","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_38","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-Integer/#parameters_32","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_39","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-Integer/#parameters_33","text":"y: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_40","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Integer/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_41","text":"A","title":"Returns"},{"location":"builtin-Integer/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Integer/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_42","text":"A","title":"Returns"},{"location":"builtin-Integer/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Integer/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Integer/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Integer/#returns_45","text":"String iso^","title":"Returns"},{"location":"builtin-Integer/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Integer/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Integer/#returns_47","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Integer/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Integer/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Integer/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Integer/#returns_51","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Integer/#returns_52","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Integer/#returns_53","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Integer/#returns_54","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Integer/#returns_55","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Integer/#returns_56","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Integer/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Integer/#returns_58","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Integer/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Integer/#returns_60","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Integer/#returns_61","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Integer/#returns_62","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Integer/#returns_63","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Integer/#returns_64","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Integer/#returns_65","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Integer/#returns_66","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Integer/#returns_67","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Integer/#returns_68","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Integer/#returns_69","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Integer/#returns_70","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Integer/#returns_71","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Integer/#returns_72","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Integer/#returns_73","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Integer/#returns_74","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Integer/#returns_75","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Integer/#returns_76","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Integer/#returns_77","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Integer/#parameters_36","text":"that: box- A","title":"Parameters"},{"location":"builtin-Integer/#returns_78","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Integer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Integer/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Integer/#returns_79","text":"A","title":"Returns"},{"location":"builtin-Iterator/","text":"Iterator[A: A] [Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness. Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this. Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness. Example // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) = _cur = from fun ref has_next(): Bool = _has_next fun ref next(): USize = let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A] Public Functions has_next [Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val Returns Bool val next [Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ? Returns A ?","title":"interface Iterator"},{"location":"builtin-Iterator/#iterator91a-a93","text":"[Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness.","title":"Iterator[A: A]"},{"location":"builtin-Iterator/#usage","text":"Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this.","title":"Usage"},{"location":"builtin-Iterator/#implementing-iterators","text":"Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness.","title":"Implementing Iterators"},{"location":"builtin-Iterator/#example","text":"// Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) = _cur = from fun ref has_next(): Bool = _has_next fun ref next(): USize = let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A]","title":"Example"},{"location":"builtin-Iterator/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Iterator/#has_next","text":"[Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val","title":"has_next"},{"location":"builtin-Iterator/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Iterator/#next","text":"[Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ?","title":"next"},{"location":"builtin-Iterator/#returns_1","text":"A ?","title":"Returns"},{"location":"builtin-Less/","text":"Less [Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref Implements Equatable [( Less val | Equal val | Greater val)] ref Constructors create [Source] new val create() : Less val^ Returns Less val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val ne [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters that: ( Less val | Equal val | Greater val) Returns Bool val","title":"primitive Less"},{"location":"builtin-Less/#less","text":"[Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref","title":"Less"},{"location":"builtin-Less/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Less/#constructors","text":"","title":"Constructors"},{"location":"builtin-Less/#create","text":"[Source] new val create() : Less val^","title":"create"},{"location":"builtin-Less/#returns","text":"Less val^","title":"Returns"},{"location":"builtin-Less/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Less/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Less/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Less/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Less/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Less/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Less/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-MaybePointer/","text":"MaybePointer[A: A] [Source] A MaybePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref MaybePointer[A: A] Constructors create [Source] This re-encodes the type of that from A to MaybePointer[A], allowing that to be assigned to a field or variable of type MaybePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : MaybePointer[A] ref^ Parameters that: A Returns MaybePointer [A] ref^ none [Source] This returns a null pointer typed as a MaybePointer[A]. new ref none() : MaybePointer[A] ref^ Returns MaybePointer [A] ref^ Public Functions apply [Source] This re-encodes the type of this from MaybePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this- A ? Returns this- A ? is_none [Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val Returns Bool val","title":"struct MaybePointer"},{"location":"builtin-MaybePointer/#maybepointer91a-a93","text":"[Source] A MaybePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref MaybePointer[A: A]","title":"MaybePointer[A: A]"},{"location":"builtin-MaybePointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-MaybePointer/#create","text":"[Source] This re-encodes the type of that from A to MaybePointer[A], allowing that to be assigned to a field or variable of type MaybePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : MaybePointer[A] ref^","title":"create"},{"location":"builtin-MaybePointer/#parameters","text":"that: A","title":"Parameters"},{"location":"builtin-MaybePointer/#returns","text":"MaybePointer [A] ref^","title":"Returns"},{"location":"builtin-MaybePointer/#none","text":"[Source] This returns a null pointer typed as a MaybePointer[A]. new ref none() : MaybePointer[A] ref^","title":"none"},{"location":"builtin-MaybePointer/#returns_1","text":"MaybePointer [A] ref^","title":"Returns"},{"location":"builtin-MaybePointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-MaybePointer/#apply","text":"[Source] This re-encodes the type of this from MaybePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this- A ?","title":"apply"},{"location":"builtin-MaybePointer/#returns_2","text":"this- A ?","title":"Returns"},{"location":"builtin-MaybePointer/#is_none","text":"[Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val","title":"is_none"},{"location":"builtin-MaybePointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-None/","text":"None [Source] primitive val None is Stringable box Implements Stringable box Constructors create [Source] new val create() : None val^ Returns None val^ Public Functions string [Source] fun box string() : String iso^ Returns String iso^ eq [Source] fun box eq( that: None val) : Bool val Parameters that: None val Returns Bool val ne [Source] fun box ne( that: None val) : Bool val Parameters that: None val Returns Bool val","title":"primitive None"},{"location":"builtin-None/#none","text":"[Source] primitive val None is Stringable box","title":"None"},{"location":"builtin-None/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-None/#constructors","text":"","title":"Constructors"},{"location":"builtin-None/#create","text":"[Source] new val create() : None val^","title":"create"},{"location":"builtin-None/#returns","text":"None val^","title":"Returns"},{"location":"builtin-None/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-None/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-None/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-None/#eq","text":"[Source] fun box eq( that: None val) : Bool val","title":"eq"},{"location":"builtin-None/#parameters","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-None/#ne","text":"[Source] fun box ne( that: None val) : Bool val","title":"ne"},{"location":"builtin-None/#parameters_1","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Number/","text":"Number [Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Type Alias For ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"type Number"},{"location":"builtin-Number/#number","text":"[Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Number"},{"location":"builtin-Number/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-OutStream/","text":"OutStream [Source] Asnychronous access to some output stream. interface tag OutStream Public Behaviours print [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) write [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) printv [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters data: ByteSeqIter val writev [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters data: ByteSeqIter val","title":"interface OutStream"},{"location":"builtin-OutStream/#outstream","text":"[Source] Asnychronous access to some output stream. interface tag OutStream","title":"OutStream"},{"location":"builtin-OutStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-OutStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-OutStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-OutStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-OutStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-OutStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-Platform/","text":"Platform [Source] primitive val Platform Constructors create [Source] new val create() : Platform val^ Returns Platform val^ Public Functions bsd [Source] fun box bsd() : Bool val Returns Bool val freebsd [Source] fun box freebsd() : Bool val Returns Bool val dragonfly [Source] fun box dragonfly() : Bool val Returns Bool val openbsd [Source] fun box openbsd() : Bool val Returns Bool val linux [Source] fun box linux() : Bool val Returns Bool val osx [Source] fun box osx() : Bool val Returns Bool val posix [Source] fun box posix() : Bool val Returns Bool val windows [Source] fun box windows() : Bool val Returns Bool val x86 [Source] fun box x86() : Bool val Returns Bool val arm [Source] fun box arm() : Bool val Returns Bool val lp64 [Source] fun box lp64() : Bool val Returns Bool val llp64 [Source] fun box llp64() : Bool val Returns Bool val ilp32 [Source] fun box ilp32() : Bool val Returns Bool val bigendian [Source] fun box bigendian() : Bool val Returns Bool val littleendian [Source] fun box littleendian() : Bool val Returns Bool val native128 [Source] fun box native128() : Bool val Returns Bool val debug [Source] fun box debug() : Bool val Returns Bool val eq [Source] fun box eq( that: Platform val) : Bool val Parameters that: Platform val Returns Bool val ne [Source] fun box ne( that: Platform val) : Bool val Parameters that: Platform val Returns Bool val","title":"primitive Platform"},{"location":"builtin-Platform/#platform","text":"[Source] primitive val Platform","title":"Platform"},{"location":"builtin-Platform/#constructors","text":"","title":"Constructors"},{"location":"builtin-Platform/#create","text":"[Source] new val create() : Platform val^","title":"create"},{"location":"builtin-Platform/#returns","text":"Platform val^","title":"Returns"},{"location":"builtin-Platform/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Platform/#bsd","text":"[Source] fun box bsd() : Bool val","title":"bsd"},{"location":"builtin-Platform/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#freebsd","text":"[Source] fun box freebsd() : Bool val","title":"freebsd"},{"location":"builtin-Platform/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#dragonfly","text":"[Source] fun box dragonfly() : Bool val","title":"dragonfly"},{"location":"builtin-Platform/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#openbsd","text":"[Source] fun box openbsd() : Bool val","title":"openbsd"},{"location":"builtin-Platform/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#linux","text":"[Source] fun box linux() : Bool val","title":"linux"},{"location":"builtin-Platform/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#osx","text":"[Source] fun box osx() : Bool val","title":"osx"},{"location":"builtin-Platform/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#posix","text":"[Source] fun box posix() : Bool val","title":"posix"},{"location":"builtin-Platform/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#windows","text":"[Source] fun box windows() : Bool val","title":"windows"},{"location":"builtin-Platform/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#x86","text":"[Source] fun box x86() : Bool val","title":"x86"},{"location":"builtin-Platform/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#arm","text":"[Source] fun box arm() : Bool val","title":"arm"},{"location":"builtin-Platform/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#lp64","text":"[Source] fun box lp64() : Bool val","title":"lp64"},{"location":"builtin-Platform/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#llp64","text":"[Source] fun box llp64() : Bool val","title":"llp64"},{"location":"builtin-Platform/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ilp32","text":"[Source] fun box ilp32() : Bool val","title":"ilp32"},{"location":"builtin-Platform/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#bigendian","text":"[Source] fun box bigendian() : Bool val","title":"bigendian"},{"location":"builtin-Platform/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#littleendian","text":"[Source] fun box littleendian() : Bool val","title":"littleendian"},{"location":"builtin-Platform/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#native128","text":"[Source] fun box native128() : Bool val","title":"native128"},{"location":"builtin-Platform/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#debug","text":"[Source] fun box debug() : Bool val","title":"debug"},{"location":"builtin-Platform/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#eq","text":"[Source] fun box eq( that: Platform val) : Bool val","title":"eq"},{"location":"builtin-Platform/#parameters","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ne","text":"[Source] fun box ne( that: Platform val) : Bool val","title":"ne"},{"location":"builtin-Platform/#parameters_1","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_19","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/","text":"Pointer[A: A] [Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A] Constructors create [Source] A null pointer. new ref create() : Pointer[A] ref^ Returns Pointer [A] ref^ _alloc [Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^ Parameters len: USize val Returns Pointer [A] ref^ Public Functions usize [Source] Convert the pointer into an integer. fun tag usize() : USize val Returns USize val is_null [Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val Returns Bool val eq [Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val lt [Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val ne [Source] fun tag ne( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val le [Source] fun tag le( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val ge [Source] fun tag ge( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val gt [Source] fun tag gt( that: Pointer[A] tag) : Bool val Parameters that: Pointer [A] tag Returns Bool val hash [Source] Returns a hash of the address. fun tag hash() : USize val Returns USize val hash64 [Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val Returns U64 val Private Functions _realloc [Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref Parameters len: USize val Returns Pointer [A] ref _unsafe [Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref Returns Pointer [A] ref _convert[B: B] [Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this- Pointer[B] ref Returns this- Pointer [B] ref _apply [Source] Retrieve index i. fun box _apply( i: USize val) : this- A Parameters i: USize val Returns this- A _update [Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^ Parameters i: USize val value: A! Returns A^ _offset [Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this- Pointer[A] ref Parameters n: USize val Returns this- Pointer [A] ref _element_size [Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val Returns USize val _insert [Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref Parameters n: USize val len: USize val Returns Pointer [A] ref _delete [Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^ Parameters n: USize val len: USize val Returns A^ _copy_to [Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this- A!] ref, n: USize val) : this- Pointer[A] ref Parameters that: Pointer [this- A!] ref n: USize val Returns this- Pointer [A] ref","title":"struct Pointer"},{"location":"builtin-Pointer/#pointer91a-a93","text":"[Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A]","title":"Pointer[A: A]"},{"location":"builtin-Pointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Pointer/#create","text":"[Source] A null pointer. new ref create() : Pointer[A] ref^","title":"create"},{"location":"builtin-Pointer/#returns","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#_alloc","text":"[Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^","title":"_alloc"},{"location":"builtin-Pointer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_1","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Pointer/#usize","text":"[Source] Convert the pointer into an integer. fun tag usize() : USize val","title":"usize"},{"location":"builtin-Pointer/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#is_null","text":"[Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val","title":"is_null"},{"location":"builtin-Pointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#eq","text":"[Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val","title":"eq"},{"location":"builtin-Pointer/#parameters_1","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#lt","text":"[Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val","title":"lt"},{"location":"builtin-Pointer/#parameters_2","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ne","text":"[Source] fun tag ne( that: Pointer[A] tag) : Bool val","title":"ne"},{"location":"builtin-Pointer/#parameters_3","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#le","text":"[Source] fun tag le( that: Pointer[A] tag) : Bool val","title":"le"},{"location":"builtin-Pointer/#parameters_4","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ge","text":"[Source] fun tag ge( that: Pointer[A] tag) : Bool val","title":"ge"},{"location":"builtin-Pointer/#parameters_5","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#gt","text":"[Source] fun tag gt( that: Pointer[A] tag) : Bool val","title":"gt"},{"location":"builtin-Pointer/#parameters_6","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#hash","text":"[Source] Returns a hash of the address. fun tag hash() : USize val","title":"hash"},{"location":"builtin-Pointer/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#hash64","text":"[Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val","title":"hash64"},{"location":"builtin-Pointer/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-Pointer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Pointer/#_realloc","text":"[Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref","title":"_realloc"},{"location":"builtin-Pointer/#parameters_7","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_12","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_unsafe","text":"[Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref","title":"_unsafe"},{"location":"builtin-Pointer/#returns_13","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_convert91b-b93","text":"[Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this- Pointer[B] ref","title":"_convert[B: B]"},{"location":"builtin-Pointer/#returns_14","text":"this- Pointer [B] ref","title":"Returns"},{"location":"builtin-Pointer/#_apply","text":"[Source] Retrieve index i. fun box _apply( i: USize val) : this- A","title":"_apply"},{"location":"builtin-Pointer/#parameters_8","text":"i: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_15","text":"this- A","title":"Returns"},{"location":"builtin-Pointer/#_update","text":"[Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^","title":"_update"},{"location":"builtin-Pointer/#parameters_9","text":"i: USize val value: A!","title":"Parameters"},{"location":"builtin-Pointer/#returns_16","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_offset","text":"[Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this- Pointer[A] ref","title":"_offset"},{"location":"builtin-Pointer/#parameters_10","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_17","text":"this- Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_element_size","text":"[Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val","title":"_element_size"},{"location":"builtin-Pointer/#returns_18","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#_insert","text":"[Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref","title":"_insert"},{"location":"builtin-Pointer/#parameters_11","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_19","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_delete","text":"[Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^","title":"_delete"},{"location":"builtin-Pointer/#parameters_12","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_20","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_copy_to","text":"[Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this- A!] ref, n: USize val) : this- Pointer[A] ref","title":"_copy_to"},{"location":"builtin-Pointer/#parameters_13","text":"that: Pointer [this- A!] ref n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_21","text":"this- Pointer [A] ref","title":"Returns"},{"location":"builtin-ReadElement/","text":"ReadElement[A: A] [Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A] Public Functions apply [Source] fun box apply( i: USize val) : A ? Parameters i: USize val Returns A ?","title":"interface ReadElement"},{"location":"builtin-ReadElement/#readelement91a-a93","text":"[Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A]","title":"ReadElement[A: A]"},{"location":"builtin-ReadElement/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadElement/#apply","text":"[Source] fun box apply( i: USize val) : A ?","title":"apply"},{"location":"builtin-ReadElement/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadElement/#returns","text":"A ?","title":"Returns"},{"location":"builtin-ReadSeq/","text":"ReadSeq[A: A] [Source] The readable interface of a sequence. interface box ReadSeq[A: A] Public Functions size [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns USize val apply [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this- A, not A. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? values [Source] Returns an iterator over the elements of the sequence. Note that this iterates over this- A, not A. fun box values() : Iterator[this- A] ref^ Returns Iterator [this- A] ref^","title":"interface ReadSeq"},{"location":"builtin-ReadSeq/#readseq91a-a93","text":"[Source] The readable interface of a sequence. interface box ReadSeq[A: A]","title":"ReadSeq[A: A]"},{"location":"builtin-ReadSeq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadSeq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-ReadSeq/#returns","text":"USize val","title":"Returns"},{"location":"builtin-ReadSeq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this- A, not A. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"builtin-ReadSeq/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadSeq/#returns_1","text":"this- A ?","title":"Returns"},{"location":"builtin-ReadSeq/#values","text":"[Source] Returns an iterator over the elements of the sequence. Note that this iterates over this- A, not A. fun box values() : Iterator[this- A] ref^","title":"values"},{"location":"builtin-ReadSeq/#returns_2","text":"Iterator [this- A] ref^","title":"Returns"},{"location":"builtin-Real/","text":"Real[A: Real [A] val] [Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref Implements Stringable box _ArithmeticConvertible val Comparable [A] ref Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait Real"},{"location":"builtin-Real/#real91a-real91a93-val93","text":"[Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref","title":"Real[A: Real[A] val]"},{"location":"builtin-Real/#implements","text":"Stringable box _ArithmeticConvertible val Comparable [A] ref","title":"Implements"},{"location":"builtin-Real/#constructors","text":"","title":"Constructors"},{"location":"builtin-Real/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Real/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Real/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Real/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Real/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Real/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Real/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Real/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Real/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Real/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Real/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Real/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Real/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Real/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Real/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Real/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Real/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Real/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Real/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Real/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Real/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Real/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-Real/#parameters_8","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-Real/#parameters_9","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-Real/#parameters_10","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-Real/#parameters_11","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-Real/#parameters_12","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-Real/#parameters_13","text":"y: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Real/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_17","text":"A","title":"Returns"},{"location":"builtin-Real/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Real/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_18","text":"A","title":"Returns"},{"location":"builtin-Real/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Real/#returns_19","text":"USize val","title":"Returns"},{"location":"builtin-Real/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Real/#returns_20","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Real/#returns_21","text":"String iso^","title":"Returns"},{"location":"builtin-Real/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Real/#returns_22","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Real/#returns_23","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Real/#returns_24","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Real/#returns_25","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Real/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Real/#returns_27","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Real/#returns_28","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Real/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Real/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Real/#returns_31","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Real/#returns_32","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Real/#returns_33","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Real/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Real/#returns_35","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Real/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Real/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Real/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Real/#returns_39","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Real/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Real/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Real/#returns_42","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Real/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Real/#returns_44","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Real/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Real/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Real/#returns_47","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Real/#returns_48","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Real/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Real/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Real/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Real/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Real/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Real/#parameters_16","text":"that: box- A","title":"Parameters"},{"location":"builtin-Real/#returns_54","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Real/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Real/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Real/#returns_55","text":"A","title":"Returns"},{"location":"builtin-Seq/","text":"Seq[A: A] [Source] A sequence of elements. interface ref Seq[A: A] Constructors create [Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = seq) : Seq[A] ref^ Parameters len: USize val = seq Returns Seq [A] ref^ Public Functions reserve [Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val size [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns USize val apply [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? update [Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters i: USize val value: A Returns A^ ? clear [Source] Removes all elements from the sequence. fun ref clear() : None val Returns None val push [Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val Parameters value: A Returns None val pop [Source] Removes an element from the end of the sequence. fun ref pop() : A^ ? Returns A^ ? unshift [Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val Parameters value: A Returns None val shift [Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ? Returns A^ ? append [Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq Returns None val truncate [Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val values [Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this- A] ref^ Returns Iterator [this- A] ref^","title":"interface Seq"},{"location":"builtin-Seq/#seq91a-a93","text":"[Source] A sequence of elements. interface ref Seq[A: A]","title":"Seq[A: A]"},{"location":"builtin-Seq/#constructors","text":"","title":"Constructors"},{"location":"builtin-Seq/#create","text":"[Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = seq) : Seq[A] ref^","title":"create"},{"location":"builtin-Seq/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"builtin-Seq/#returns","text":"Seq [A] ref^","title":"Returns"},{"location":"builtin-Seq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Seq/#reserve","text":"[Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Seq/#parameters_1","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Seq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-Seq/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Seq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"builtin-Seq/#parameters_2","text":"i: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_3","text":"this- A ?","title":"Returns"},{"location":"builtin-Seq/#update","text":"[Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Seq/#parameters_3","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_4","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#clear","text":"[Source] Removes all elements from the sequence. fun ref clear() : None val","title":"clear"},{"location":"builtin-Seq/#returns_5","text":"None val","title":"Returns"},{"location":"builtin-Seq/#push","text":"[Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Seq/#parameters_4","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Seq/#pop","text":"[Source] Removes an element from the end of the sequence. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Seq/#returns_7","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#unshift","text":"[Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Seq/#parameters_5","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Seq/#shift","text":"[Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Seq/#returns_9","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#append","text":"[Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"builtin-Seq/#parameters_6","text":"seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Seq/#returns_10","text":"None val","title":"Returns"},{"location":"builtin-Seq/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"builtin-Seq/#parameters_7","text":"iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-Seq/#returns_11","text":"None val","title":"Returns"},{"location":"builtin-Seq/#truncate","text":"[Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Seq/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_12","text":"None val","title":"Returns"},{"location":"builtin-Seq/#values","text":"[Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this- A] ref^","title":"values"},{"location":"builtin-Seq/#returns_13","text":"Iterator [this- A] ref^","title":"Returns"},{"location":"builtin-Signed/","text":"Signed [Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) Type Alias For ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"type Signed"},{"location":"builtin-Signed/#signed","text":"[Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Signed"},{"location":"builtin-Signed/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Type Alias For"},{"location":"builtin-SourceLoc/","text":"SourceLoc [Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc Public Functions file [Source] Name and path of source file. fun box file() : String val Returns String val type_name [Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val Returns String val method_name [Source] Name of containing method. fun box method_name() : String val Returns String val line [Source] Line number within file. Line numbers start at 1. fun box line() : USize val Returns USize val pos [Source] Character position on line. Character positions start at 1. fun box pos() : USize val Returns USize val","title":"interface SourceLoc"},{"location":"builtin-SourceLoc/#sourceloc","text":"[Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc","title":"SourceLoc"},{"location":"builtin-SourceLoc/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SourceLoc/#file","text":"[Source] Name and path of source file. fun box file() : String val","title":"file"},{"location":"builtin-SourceLoc/#returns","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#type_name","text":"[Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val","title":"type_name"},{"location":"builtin-SourceLoc/#returns_1","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#method_name","text":"[Source] Name of containing method. fun box method_name() : String val","title":"method_name"},{"location":"builtin-SourceLoc/#returns_2","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#line","text":"[Source] Line number within file. Line numbers start at 1. fun box line() : USize val","title":"line"},{"location":"builtin-SourceLoc/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-SourceLoc/#pos","text":"[Source] Character position on line. Character positions start at 1. fun box pos() : USize val","title":"pos"},{"location":"builtin-SourceLoc/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-StdStream/","text":"StdStream [Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream Constructors _out [Source] Create an async stream for stdout. new tag _out() : StdStream tag^ Returns StdStream tag^ _err [Source] Create an async stream for stderr. new tag _err() : StdStream tag^ Returns StdStream tag^ Public Behaviours print [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) write [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters data: ( String val | Array [ U8 val] val) printv [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters data: ByteSeqIter val writev [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters data: ByteSeqIter val Private Functions _write [Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val _print [Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val Parameters data: ( String val | Array [ U8 val] val) Returns None val","title":"actor StdStream"},{"location":"builtin-StdStream/#stdstream","text":"[Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream","title":"StdStream"},{"location":"builtin-StdStream/#constructors","text":"","title":"Constructors"},{"location":"builtin-StdStream/#_out","text":"[Source] Create an async stream for stdout. new tag _out() : StdStream tag^","title":"_out"},{"location":"builtin-StdStream/#returns","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#_err","text":"[Source] Create an async stream for stderr. new tag _err() : StdStream tag^","title":"_err"},{"location":"builtin-StdStream/#returns_1","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-StdStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-StdStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-StdStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-StdStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-StdStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-StdStream/#_write","text":"[Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val","title":"_write"},{"location":"builtin-StdStream/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-StdStream/#_print","text":"[Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val","title":"_print"},{"location":"builtin-StdStream/#parameters_5","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-Stdin/","text":"Stdin [Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) = // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) = env.out.write(String.from_iso_array(consume data)) fun ref dispose() = env.out.print( Done. ) end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin Constructors _create [Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^ Parameters use_event: Bool val Returns Stdin tag^ Public Behaviours apply [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq) Parameters notify: ( InputNotify iso | None val) chunk_size: USize val = seq dispose [Source] Clear the notifier in order to shut down input. be dispose() Private Behaviours _loop_read [Source] If we are able to read from stdin, schedule another read. be _loop_read() _event_notify [Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again [Source] Resume reading. be _read_again() Private Functions _set_notify [Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val Parameters notify: ( InputNotify iso | None val) Returns None val _read [Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val Returns Bool val _close_event [Source] Close the event. fun ref _close_event() : None val Returns None val","title":"actor Stdin"},{"location":"builtin-Stdin/#stdin","text":"[Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) = // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) = env.out.write(String.from_iso_array(consume data)) fun ref dispose() = env.out.print( Done. ) end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin","title":"Stdin"},{"location":"builtin-Stdin/#constructors","text":"","title":"Constructors"},{"location":"builtin-Stdin/#_create","text":"[Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^","title":"_create"},{"location":"builtin-Stdin/#parameters","text":"use_event: Bool val","title":"Parameters"},{"location":"builtin-Stdin/#returns","text":"Stdin tag^","title":"Returns"},{"location":"builtin-Stdin/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-Stdin/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = seq)","title":"apply"},{"location":"builtin-Stdin/#parameters_1","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = seq","title":"Parameters"},{"location":"builtin-Stdin/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Stdin/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-Stdin/#_loop_read","text":"[Source] If we are able to read from stdin, schedule another read. be _loop_read()","title":"_loop_read"},{"location":"builtin-Stdin/#_event_notify","text":"[Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-Stdin/#parameters_2","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Stdin/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"builtin-Stdin/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Stdin/#_set_notify","text":"[Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val","title":"_set_notify"},{"location":"builtin-Stdin/#parameters_3","text":"notify: ( InputNotify iso | None val)","title":"Parameters"},{"location":"builtin-Stdin/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Stdin/#_read","text":"[Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val","title":"_read"},{"location":"builtin-Stdin/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Stdin/#_close_event","text":"[Source] Close the event. fun ref _close_event() : None val","title":"_close_event"},{"location":"builtin-Stdin/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-String/","text":"String [Source] A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) = try // construct a new string let str = Hello // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add world to the end of our original string let str_new = str.add( world ) // count occurrences of letter l let count = str_new.count( l ) // find first occurrence of letter w let first_w = str_new.find( w ) // find first occurrence of letter d let first_d = str_new.find( d ) // get substring capturing world let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box Implements Seq [ U8 val] ref Comparable [ String box] ref Stringable box Constructors create [Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = seq) : String ref^ Parameters len: USize val = seq Returns String ref^ from_array [Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^ Parameters data: Array [ U8 val] val Returns String val^ from_iso_array [Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^ Parameters data: Array [ U8 val] iso Returns String iso^ from_cpointer [Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = seq) : String ref^ Parameters str: Pointer [ U8 val] ref len: USize val alloc: USize val = seq Returns String ref^ from_cstring [Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^ Parameters str: Pointer [ U8 val] ref Returns String ref^ copy_cpointer [Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^ Parameters str: Pointer [ U8 val] box len: USize val Returns String ref^ copy_cstring [Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^ Parameters str: Pointer [ U8 val] box Returns String ref^ from_utf32 [Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^ Parameters value: U32 val Returns String ref^ Public Functions push_utf32 [Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val Parameters value: U32 val Returns None val cpointer [Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = seq) : Pointer[U8 val] tag Parameters offset: USize val = seq Returns Pointer [ U8 val] tag cstring [Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag Returns Pointer [ U8 val] tag array [Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val Returns Array [ U8 val] val iso_array [Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^ Returns Array [ U8 val] iso^ size [Source] Returns the length of the string data in bytes. fun box size() : USize val Returns USize val codepoints [Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = seq, to: ISize val = seq) : USize val Parameters from: ISize val = seq to: ISize val = seq Returns USize val space [Source] Returns the space available for data, not including the null terminator. fun box space() : USize val Returns USize val reserve [Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val compact [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val Returns None val recalc [Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val Returns None val truncate [Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val trim_in_place [Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val Parameters from: USize val = seq to: USize val = seq Returns None val trim [Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : String val Parameters from: USize val = seq to: USize val = seq Returns String val chop [Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the right portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^) Parameters split_point: USize val Returns ( String iso^ , String iso^) is_null_terminated [Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val Returns Bool val utf32 [Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ? Parameters offset: ISize val Returns ( U32 val , U8 val) ? apply [Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ? Parameters i: USize val Returns U8 val ? update [Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ? Parameters i: USize val value: U8 val Returns U8 val ? at_offset [Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ? Parameters offset: ISize val Returns U8 val ? update_offset [Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ? Parameters offset: ISize val value: U8 val Returns U8 val ? clone [Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^ Returns String iso^ find [Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ? Parameters s: String box offset: ISize val = seq nth: USize val = seq Returns ISize val ? rfind [Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ? Parameters s: String box offset: ISize val = seq nth: USize val = seq Returns ISize val ? contains [Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = seq, nth: USize val = seq) : Bool val Parameters s: String box offset: ISize val = seq nth: USize val = seq Returns Bool val count [Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = seq) : USize val Parameters s: String box offset: ISize val = seq Returns USize val at [Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = seq) : Bool val Parameters s: String box offset: ISize val = seq Returns Bool val delete [Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = seq) : None val Parameters offset: ISize val len: USize val = seq Returns None val substring [Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = seq) : String iso^ Parameters from: ISize val to: ISize val = seq Returns String iso^ lower [Source] Returns a lower case version of the string. fun box lower() : String iso^ Returns String iso^ lower_in_place [Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val Returns None val upper [Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^ Returns String iso^ upper_in_place [Source] Transforms the string to upper case. fun ref upper_in_place() : None val Returns None val reverse [Source] Returns a reversed version of the string. fun box reverse() : String iso^ Returns String iso^ reverse_in_place [Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val Returns None val push [Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val Parameters value: U8 val Returns None val pop [Source] Remove a byte from the end of the string. fun ref pop() : U8 val ? Returns U8 val ? unshift [Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val Parameters value: U8 val Returns None val shift [Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ? Returns U8 val ? append [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ReadSeq [ U8 val] box offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [ U8 val] ref offset: USize val = seq len: USize val = seq Returns None val clear [Source] Truncate the string to zero length. fun ref clear() : None val Returns None val insert [Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^ Parameters offset: ISize val that: String val Returns String iso^ insert_in_place [Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val Parameters offset: ISize val that: String box Returns None val insert_byte [Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val Parameters offset: ISize val value: U8 val Returns None val cut [Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = seq) : String iso^ Parameters from: ISize val to: ISize val = seq Returns String iso^ cut_in_place [Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = seq) : None val Parameters from: ISize val to: ISize val = seq Returns None val remove [Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val Parameters s: String box Returns USize val replace [Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = seq) : USize val Parameters from: String box to: String box n: USize val = seq Returns USize val split_by [Source] Split the string into an array of strings that are delimited by delim in the original string. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. fun box split_by( delim: String val, n: USize val = seq) : Array[String val] iso^ Parameters delim: String val n: USize val = seq Returns Array [ String val] iso^ split [Source] Split the string into an array of strings. Any character in the delimiter string is accepted as a delimiter. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . fun box split( delim: String val = seq, n: USize val = seq) : Array[String val] iso^ Parameters delim: String val = seq n: USize val = seq Returns Array [ String val] iso^ strip [Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = seq) : None val Parameters s: String box = seq Returns None val rstrip [Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = seq) : None val Parameters s: String box = seq Returns None val lstrip [Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = seq) : None val Parameters s: String box = seq Returns None val add [Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val Parameters that: String box Returns String val join [Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^ Parameters data: Iterator [ Stringable box] ref Returns String iso^ compare [Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val) Parameters that: String box Returns ( Less val | Equal val | Greater val) compare_sub [Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = seq, that_offset: ISize val = seq, ignore_case: Bool val = seq) : (Less val | Equal val | Greater val) Parameters that: String box n: USize val offset: ISize val = seq that_offset: ISize val = seq ignore_case: Bool val = seq Returns ( Less val | Equal val | Greater val) eq [Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val Parameters that: String box Returns Bool val lt [Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val Parameters that: String box Returns Bool val le [Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val Parameters that: String box Returns Bool val offset_to_index [Source] fun box offset_to_index( i: ISize val) : USize val Parameters i: ISize val Returns USize val bool [Source] fun box bool() : Bool val ? Returns Bool val ? i8 [Source] fun box i8( base: U8 val = seq) : I8 val ? Parameters base: U8 val = seq Returns I8 val ? i16 [Source] fun box i16( base: U8 val = seq) : I16 val ? Parameters base: U8 val = seq Returns I16 val ? i32 [Source] fun box i32( base: U8 val = seq) : I32 val ? Parameters base: U8 val = seq Returns I32 val ? i64 [Source] fun box i64( base: U8 val = seq) : I64 val ? Parameters base: U8 val = seq Returns I64 val ? i128 [Source] fun box i128( base: U8 val = seq) : I128 val ? Parameters base: U8 val = seq Returns I128 val ? ilong [Source] fun box ilong( base: U8 val = seq) : ILong val ? Parameters base: U8 val = seq Returns ILong val ? isize [Source] fun box isize( base: U8 val = seq) : ISize val ? Parameters base: U8 val = seq Returns ISize val ? u8 [Source] fun box u8( base: U8 val = seq) : U8 val ? Parameters base: U8 val = seq Returns U8 val ? u16 [Source] fun box u16( base: U8 val = seq) : U16 val ? Parameters base: U8 val = seq Returns U16 val ? u32 [Source] fun box u32( base: U8 val = seq) : U32 val ? Parameters base: U8 val = seq Returns U32 val ? u64 [Source] fun box u64( base: U8 val = seq) : U64 val ? Parameters base: U8 val = seq Returns U64 val ? u128 [Source] fun box u128( base: U8 val = seq) : U128 val ? Parameters base: U8 val = seq Returns U128 val ? ulong [Source] fun box ulong( base: U8 val = seq) : ULong val ? Parameters base: U8 val = seq Returns ULong val ? usize [Source] fun box usize( base: U8 val = seq) : USize val ? Parameters base: U8 val = seq Returns USize val ? read_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( offset: ISize val = seq, base: U8 val = seq) : (A , USize val) ? Parameters offset: ISize val = seq base: U8 val = seq Returns (A , USize val) ? f32 [Source] fun box f32( offset: ISize val = seq) : F32 val Parameters offset: ISize val = seq Returns F32 val f64 [Source] fun box f64( offset: ISize val = seq) : F64 val Parameters offset: ISize val = seq Returns F64 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ values [Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^ Returns StringBytes ref^ runes [Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^ Returns StringRunes ref^ ge fun box ge( that: String box) : Bool val Parameters that: String box Returns Bool val gt fun box gt( that: String box) : Bool val Parameters that: String box Returns Bool val ne fun box ne( that: String box) : Bool val Parameters that: String box Returns Bool val Private Functions _copy_to [Source] Copy copy_len characters from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val Parameters ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq Returns None val _append [Source] fun iso _append( s: String box) : String iso^ Parameters s: String box Returns String iso^ _to_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val) : A ? Parameters base: U8 val Returns A ? _read_int_base[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val) Parameters base: U8 val index: USize val Returns (A , USize val) _set [Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val Parameters i: USize val value: U8 val Returns U8 val","title":"class String"},{"location":"builtin-String/#string","text":"[Source] A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) = try // construct a new string let str = Hello // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add world to the end of our original string let str_new = str.add( world ) // count occurrences of letter l let count = str_new.count( l ) // find first occurrence of letter w let first_w = str_new.find( w ) // find first occurrence of letter d let first_d = str_new.find( d ) // get substring capturing world let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box","title":"String"},{"location":"builtin-String/#implements","text":"Seq [ U8 val] ref Comparable [ String box] ref Stringable box","title":"Implements"},{"location":"builtin-String/#constructors","text":"","title":"Constructors"},{"location":"builtin-String/#create","text":"[Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = seq) : String ref^","title":"create"},{"location":"builtin-String/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_array","text":"[Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^","title":"from_array"},{"location":"builtin-String/#parameters_1","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"builtin-String/#returns_1","text":"String val^","title":"Returns"},{"location":"builtin-String/#from_iso_array","text":"[Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^","title":"from_iso_array"},{"location":"builtin-String/#parameters_2","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-String/#returns_2","text":"String iso^","title":"Returns"},{"location":"builtin-String/#from_cpointer","text":"[Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = seq) : String ref^","title":"from_cpointer"},{"location":"builtin-String/#parameters_3","text":"str: Pointer [ U8 val] ref len: USize val alloc: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_3","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_cstring","text":"[Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^","title":"from_cstring"},{"location":"builtin-String/#parameters_4","text":"str: Pointer [ U8 val] ref","title":"Parameters"},{"location":"builtin-String/#returns_4","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cpointer","text":"[Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^","title":"copy_cpointer"},{"location":"builtin-String/#parameters_5","text":"str: Pointer [ U8 val] box len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_5","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cstring","text":"[Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^","title":"copy_cstring"},{"location":"builtin-String/#parameters_6","text":"str: Pointer [ U8 val] box","title":"Parameters"},{"location":"builtin-String/#returns_6","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_utf32","text":"[Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^","title":"from_utf32"},{"location":"builtin-String/#parameters_7","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_7","text":"String ref^","title":"Returns"},{"location":"builtin-String/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-String/#push_utf32","text":"[Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val","title":"push_utf32"},{"location":"builtin-String/#parameters_8","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-String/#cpointer","text":"[Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = seq) : Pointer[U8 val] tag","title":"cpointer"},{"location":"builtin-String/#parameters_9","text":"offset: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_9","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#cstring","text":"[Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag","title":"cstring"},{"location":"builtin-String/#returns_10","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#array","text":"[Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val","title":"array"},{"location":"builtin-String/#returns_11","text":"Array [ U8 val] val","title":"Returns"},{"location":"builtin-String/#iso_array","text":"[Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^","title":"iso_array"},{"location":"builtin-String/#returns_12","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"builtin-String/#size","text":"[Source] Returns the length of the string data in bytes. fun box size() : USize val","title":"size"},{"location":"builtin-String/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-String/#codepoints","text":"[Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = seq, to: ISize val = seq) : USize val","title":"codepoints"},{"location":"builtin-String/#parameters_10","text":"from: ISize val = seq to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-String/#space","text":"[Source] Returns the space available for data, not including the null terminator. fun box space() : USize val","title":"space"},{"location":"builtin-String/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-String/#reserve","text":"[Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-String/#parameters_11","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_16","text":"None val","title":"Returns"},{"location":"builtin-String/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val","title":"compact"},{"location":"builtin-String/#returns_17","text":"None val","title":"Returns"},{"location":"builtin-String/#recalc","text":"[Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val","title":"recalc"},{"location":"builtin-String/#returns_18","text":"None val","title":"Returns"},{"location":"builtin-String/#truncate","text":"[Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-String/#parameters_12","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_19","text":"None val","title":"Returns"},{"location":"builtin-String/#trim_in_place","text":"[Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = seq, to: USize val = seq) : None val","title":"trim_in_place"},{"location":"builtin-String/#parameters_13","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_20","text":"None val","title":"Returns"},{"location":"builtin-String/#trim","text":"[Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = seq, to: USize val = seq) : String val","title":"trim"},{"location":"builtin-String/#parameters_14","text":"from: USize val = seq to: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_21","text":"String val","title":"Returns"},{"location":"builtin-String/#chop","text":"[Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the right portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^)","title":"chop"},{"location":"builtin-String/#parameters_15","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-String/#returns_22","text":"( String iso^ , String iso^)","title":"Returns"},{"location":"builtin-String/#is_null_terminated","text":"[Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val","title":"is_null_terminated"},{"location":"builtin-String/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-String/#utf32","text":"[Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ?","title":"utf32"},{"location":"builtin-String/#parameters_16","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_24","text":"( U32 val , U8 val) ?","title":"Returns"},{"location":"builtin-String/#apply","text":"[Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ?","title":"apply"},{"location":"builtin-String/#parameters_17","text":"i: USize val","title":"Parameters"},{"location":"builtin-String/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update","text":"[Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ?","title":"update"},{"location":"builtin-String/#parameters_18","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#at_offset","text":"[Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ?","title":"at_offset"},{"location":"builtin-String/#parameters_19","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_27","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update_offset","text":"[Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ?","title":"update_offset"},{"location":"builtin-String/#parameters_20","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_28","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#clone","text":"[Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^","title":"clone"},{"location":"builtin-String/#returns_29","text":"String iso^","title":"Returns"},{"location":"builtin-String/#find","text":"[Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ?","title":"find"},{"location":"builtin-String/#parameters_21","text":"s: String box offset: ISize val = seq nth: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_30","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#rfind","text":"[Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = seq, nth: USize val = seq) : ISize val ?","title":"rfind"},{"location":"builtin-String/#parameters_22","text":"s: String box offset: ISize val = seq nth: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_31","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#contains","text":"[Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = seq, nth: USize val = seq) : Bool val","title":"contains"},{"location":"builtin-String/#parameters_23","text":"s: String box offset: ISize val = seq nth: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-String/#count","text":"[Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = seq) : USize val","title":"count"},{"location":"builtin-String/#parameters_24","text":"s: String box offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-String/#at","text":"[Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = seq) : Bool val","title":"at"},{"location":"builtin-String/#parameters_25","text":"s: String box offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_34","text":"Bool val","title":"Returns"},{"location":"builtin-String/#delete","text":"[Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = seq) : None val","title":"delete"},{"location":"builtin-String/#parameters_26","text":"offset: ISize val len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-String/#substring","text":"[Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = seq) : String iso^","title":"substring"},{"location":"builtin-String/#parameters_27","text":"from: ISize val to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_36","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower","text":"[Source] Returns a lower case version of the string. fun box lower() : String iso^","title":"lower"},{"location":"builtin-String/#returns_37","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower_in_place","text":"[Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val","title":"lower_in_place"},{"location":"builtin-String/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-String/#upper","text":"[Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^","title":"upper"},{"location":"builtin-String/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-String/#upper_in_place","text":"[Source] Transforms the string to upper case. fun ref upper_in_place() : None val","title":"upper_in_place"},{"location":"builtin-String/#returns_40","text":"None val","title":"Returns"},{"location":"builtin-String/#reverse","text":"[Source] Returns a reversed version of the string. fun box reverse() : String iso^","title":"reverse"},{"location":"builtin-String/#returns_41","text":"String iso^","title":"Returns"},{"location":"builtin-String/#reverse_in_place","text":"[Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-String/#returns_42","text":"None val","title":"Returns"},{"location":"builtin-String/#push","text":"[Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val","title":"push"},{"location":"builtin-String/#parameters_28","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_43","text":"None val","title":"Returns"},{"location":"builtin-String/#pop","text":"[Source] Remove a byte from the end of the string. fun ref pop() : U8 val ?","title":"pop"},{"location":"builtin-String/#returns_44","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#unshift","text":"[Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val","title":"unshift"},{"location":"builtin-String/#parameters_29","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_45","text":"None val","title":"Returns"},{"location":"builtin-String/#shift","text":"[Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ?","title":"shift"},{"location":"builtin-String/#returns_46","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"builtin-String/#parameters_30","text":"seq: ReadSeq [ U8 val] box offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_47","text":"None val","title":"Returns"},{"location":"builtin-String/#concat","text":"[Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"builtin-String/#parameters_31","text":"iter: Iterator [ U8 val] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_48","text":"None val","title":"Returns"},{"location":"builtin-String/#clear","text":"[Source] Truncate the string to zero length. fun ref clear() : None val","title":"clear"},{"location":"builtin-String/#returns_49","text":"None val","title":"Returns"},{"location":"builtin-String/#insert","text":"[Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^","title":"insert"},{"location":"builtin-String/#parameters_32","text":"offset: ISize val that: String val","title":"Parameters"},{"location":"builtin-String/#returns_50","text":"String iso^","title":"Returns"},{"location":"builtin-String/#insert_in_place","text":"[Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val","title":"insert_in_place"},{"location":"builtin-String/#parameters_33","text":"offset: ISize val that: String box","title":"Parameters"},{"location":"builtin-String/#returns_51","text":"None val","title":"Returns"},{"location":"builtin-String/#insert_byte","text":"[Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val","title":"insert_byte"},{"location":"builtin-String/#parameters_34","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_52","text":"None val","title":"Returns"},{"location":"builtin-String/#cut","text":"[Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = seq) : String iso^","title":"cut"},{"location":"builtin-String/#parameters_35","text":"from: ISize val to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-String/#cut_in_place","text":"[Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = seq) : None val","title":"cut_in_place"},{"location":"builtin-String/#parameters_36","text":"from: ISize val to: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-String/#remove","text":"[Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val","title":"remove"},{"location":"builtin-String/#parameters_37","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-String/#replace","text":"[Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = seq) : USize val","title":"replace"},{"location":"builtin-String/#parameters_38","text":"from: String box to: String box n: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-String/#split_by","text":"[Source] Split the string into an array of strings that are delimited by delim in the original string. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. fun box split_by( delim: String val, n: USize val = seq) : Array[String val] iso^","title":"split_by"},{"location":"builtin-String/#parameters_39","text":"delim: String val n: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_57","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#split","text":"[Source] Split the string into an array of strings. Any character in the delimiter string is accepted as a delimiter. If n 0 , then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") = [\"1\", \"\", \"2\"] . fun box split( delim: String val = seq, n: USize val = seq) : Array[String val] iso^","title":"split"},{"location":"builtin-String/#parameters_40","text":"delim: String val = seq n: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_58","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#strip","text":"[Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = seq) : None val","title":"strip"},{"location":"builtin-String/#parameters_41","text":"s: String box = seq","title":"Parameters"},{"location":"builtin-String/#returns_59","text":"None val","title":"Returns"},{"location":"builtin-String/#rstrip","text":"[Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = seq) : None val","title":"rstrip"},{"location":"builtin-String/#parameters_42","text":"s: String box = seq","title":"Parameters"},{"location":"builtin-String/#returns_60","text":"None val","title":"Returns"},{"location":"builtin-String/#lstrip","text":"[Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = seq) : None val","title":"lstrip"},{"location":"builtin-String/#parameters_43","text":"s: String box = seq","title":"Parameters"},{"location":"builtin-String/#returns_61","text":"None val","title":"Returns"},{"location":"builtin-String/#add","text":"[Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val","title":"add"},{"location":"builtin-String/#parameters_44","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_62","text":"String val","title":"Returns"},{"location":"builtin-String/#join","text":"[Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^","title":"join"},{"location":"builtin-String/#parameters_45","text":"data: Iterator [ Stringable box] ref","title":"Parameters"},{"location":"builtin-String/#returns_63","text":"String iso^","title":"Returns"},{"location":"builtin-String/#compare","text":"[Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-String/#parameters_46","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_64","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#compare_sub","text":"[Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = seq, that_offset: ISize val = seq, ignore_case: Bool val = seq) : (Less val | Equal val | Greater val)","title":"compare_sub"},{"location":"builtin-String/#parameters_47","text":"that: String box n: USize val offset: ISize val = seq that_offset: ISize val = seq ignore_case: Bool val = seq","title":"Parameters"},{"location":"builtin-String/#returns_65","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#eq","text":"[Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val","title":"eq"},{"location":"builtin-String/#parameters_48","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-String/#lt","text":"[Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val","title":"lt"},{"location":"builtin-String/#parameters_49","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-String/#le","text":"[Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val","title":"le"},{"location":"builtin-String/#parameters_50","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-String/#offset_to_index","text":"[Source] fun box offset_to_index( i: ISize val) : USize val","title":"offset_to_index"},{"location":"builtin-String/#parameters_51","text":"i: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_69","text":"USize val","title":"Returns"},{"location":"builtin-String/#bool","text":"[Source] fun box bool() : Bool val ?","title":"bool"},{"location":"builtin-String/#returns_70","text":"Bool val ?","title":"Returns"},{"location":"builtin-String/#i8","text":"[Source] fun box i8( base: U8 val = seq) : I8 val ?","title":"i8"},{"location":"builtin-String/#parameters_52","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_71","text":"I8 val ?","title":"Returns"},{"location":"builtin-String/#i16","text":"[Source] fun box i16( base: U8 val = seq) : I16 val ?","title":"i16"},{"location":"builtin-String/#parameters_53","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_72","text":"I16 val ?","title":"Returns"},{"location":"builtin-String/#i32","text":"[Source] fun box i32( base: U8 val = seq) : I32 val ?","title":"i32"},{"location":"builtin-String/#parameters_54","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_73","text":"I32 val ?","title":"Returns"},{"location":"builtin-String/#i64","text":"[Source] fun box i64( base: U8 val = seq) : I64 val ?","title":"i64"},{"location":"builtin-String/#parameters_55","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_74","text":"I64 val ?","title":"Returns"},{"location":"builtin-String/#i128","text":"[Source] fun box i128( base: U8 val = seq) : I128 val ?","title":"i128"},{"location":"builtin-String/#parameters_56","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_75","text":"I128 val ?","title":"Returns"},{"location":"builtin-String/#ilong","text":"[Source] fun box ilong( base: U8 val = seq) : ILong val ?","title":"ilong"},{"location":"builtin-String/#parameters_57","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_76","text":"ILong val ?","title":"Returns"},{"location":"builtin-String/#isize","text":"[Source] fun box isize( base: U8 val = seq) : ISize val ?","title":"isize"},{"location":"builtin-String/#parameters_58","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_77","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#u8","text":"[Source] fun box u8( base: U8 val = seq) : U8 val ?","title":"u8"},{"location":"builtin-String/#parameters_59","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_78","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#u16","text":"[Source] fun box u16( base: U8 val = seq) : U16 val ?","title":"u16"},{"location":"builtin-String/#parameters_60","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_79","text":"U16 val ?","title":"Returns"},{"location":"builtin-String/#u32","text":"[Source] fun box u32( base: U8 val = seq) : U32 val ?","title":"u32"},{"location":"builtin-String/#parameters_61","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_80","text":"U32 val ?","title":"Returns"},{"location":"builtin-String/#u64","text":"[Source] fun box u64( base: U8 val = seq) : U64 val ?","title":"u64"},{"location":"builtin-String/#parameters_62","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_81","text":"U64 val ?","title":"Returns"},{"location":"builtin-String/#u128","text":"[Source] fun box u128( base: U8 val = seq) : U128 val ?","title":"u128"},{"location":"builtin-String/#parameters_63","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_82","text":"U128 val ?","title":"Returns"},{"location":"builtin-String/#ulong","text":"[Source] fun box ulong( base: U8 val = seq) : ULong val ?","title":"ulong"},{"location":"builtin-String/#parameters_64","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_83","text":"ULong val ?","title":"Returns"},{"location":"builtin-String/#usize","text":"[Source] fun box usize( base: U8 val = seq) : USize val ?","title":"usize"},{"location":"builtin-String/#parameters_65","text":"base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_84","text":"USize val ?","title":"Returns"},{"location":"builtin-String/#read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( offset: ISize val = seq, base: U8 val = seq) : (A , USize val) ?","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_66","text":"offset: ISize val = seq base: U8 val = seq","title":"Parameters"},{"location":"builtin-String/#returns_85","text":"(A , USize val) ?","title":"Returns"},{"location":"builtin-String/#f32","text":"[Source] fun box f32( offset: ISize val = seq) : F32 val","title":"f32"},{"location":"builtin-String/#parameters_67","text":"offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_86","text":"F32 val","title":"Returns"},{"location":"builtin-String/#f64","text":"[Source] fun box f64( offset: ISize val = seq) : F64 val","title":"f64"},{"location":"builtin-String/#parameters_68","text":"offset: ISize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_87","text":"F64 val","title":"Returns"},{"location":"builtin-String/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-String/#returns_88","text":"USize val","title":"Returns"},{"location":"builtin-String/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-String/#returns_89","text":"U64 val","title":"Returns"},{"location":"builtin-String/#string_1","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-String/#returns_90","text":"String iso^","title":"Returns"},{"location":"builtin-String/#values","text":"[Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^","title":"values"},{"location":"builtin-String/#returns_91","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-String/#runes","text":"[Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^","title":"runes"},{"location":"builtin-String/#returns_92","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-String/#ge","text":"fun box ge( that: String box) : Bool val","title":"ge"},{"location":"builtin-String/#parameters_69","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_93","text":"Bool val","title":"Returns"},{"location":"builtin-String/#gt","text":"fun box gt( that: String box) : Bool val","title":"gt"},{"location":"builtin-String/#parameters_70","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_94","text":"Bool val","title":"Returns"},{"location":"builtin-String/#ne","text":"fun box ne( that: String box) : Bool val","title":"ne"},{"location":"builtin-String/#parameters_71","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_95","text":"Bool val","title":"Returns"},{"location":"builtin-String/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-String/#_copy_to","text":"[Source] Copy copy_len characters from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = seq, to_offset: USize val = seq) : None val","title":"_copy_to"},{"location":"builtin-String/#parameters_72","text":"ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = seq to_offset: USize val = seq","title":"Parameters"},{"location":"builtin-String/#returns_96","text":"None val","title":"Returns"},{"location":"builtin-String/#_append","text":"[Source] fun iso _append( s: String box) : String iso^","title":"_append"},{"location":"builtin-String/#parameters_73","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_97","text":"String iso^","title":"Returns"},{"location":"builtin-String/#_to_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val) : A ?","title":"_to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_74","text":"base: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_98","text":"A ?","title":"Returns"},{"location":"builtin-String/#_read_int_base91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val)","title":"_read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_75","text":"base: U8 val index: USize val","title":"Parameters"},{"location":"builtin-String/#returns_99","text":"(A , USize val)","title":"Returns"},{"location":"builtin-String/#_set","text":"[Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val","title":"_set"},{"location":"builtin-String/#parameters_76","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_100","text":"U8 val","title":"Returns"},{"location":"builtin-StringBytes/","text":"StringBytes [Source] class ref StringBytes is Iterator[U8 val] ref Implements Iterator [ U8 val] ref Constructors create [Source] new ref create( string: String box) : StringBytes ref^ Parameters string: String box Returns StringBytes ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : U8 val ? Returns U8 val ?","title":"class StringBytes"},{"location":"builtin-StringBytes/#stringbytes","text":"[Source] class ref StringBytes is Iterator[U8 val] ref","title":"StringBytes"},{"location":"builtin-StringBytes/#implements","text":"Iterator [ U8 val] ref","title":"Implements"},{"location":"builtin-StringBytes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringBytes/#create","text":"[Source] new ref create( string: String box) : StringBytes ref^","title":"create"},{"location":"builtin-StringBytes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringBytes/#returns","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-StringBytes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringBytes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringBytes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringBytes/#next","text":"[Source] fun ref next() : U8 val ?","title":"next"},{"location":"builtin-StringBytes/#returns_2","text":"U8 val ?","title":"Returns"},{"location":"builtin-StringRunes/","text":"StringRunes [Source] class ref StringRunes is Iterator[U32 val] ref Implements Iterator [ U32 val] ref Constructors create [Source] new ref create( string: String box) : StringRunes ref^ Parameters string: String box Returns StringRunes ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : U32 val ? Returns U32 val ?","title":"class StringRunes"},{"location":"builtin-StringRunes/#stringrunes","text":"[Source] class ref StringRunes is Iterator[U32 val] ref","title":"StringRunes"},{"location":"builtin-StringRunes/#implements","text":"Iterator [ U32 val] ref","title":"Implements"},{"location":"builtin-StringRunes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringRunes/#create","text":"[Source] new ref create( string: String box) : StringRunes ref^","title":"create"},{"location":"builtin-StringRunes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringRunes/#returns","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-StringRunes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringRunes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringRunes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringRunes/#next","text":"[Source] fun ref next() : U32 val ?","title":"next"},{"location":"builtin-StringRunes/#returns_2","text":"U32 val ?","title":"Returns"},{"location":"builtin-Stringable/","text":"Stringable [Source] Things that can be turned into a String. interface box Stringable Public Functions string [Source] Generate a string representation of this object. fun box string() : String iso^ Returns String iso^","title":"interface Stringable"},{"location":"builtin-Stringable/#stringable","text":"[Source] Things that can be turned into a String. interface box Stringable","title":"Stringable"},{"location":"builtin-Stringable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Stringable/#string","text":"[Source] Generate a string representation of this object. fun box string() : String iso^","title":"string"},{"location":"builtin-Stringable/#returns","text":"String iso^","title":"Returns"},{"location":"builtin-U128/","text":"U128 [Source] primitive val U128 is _UnsignedInteger[U128 val] val Implements _UnsignedInteger [ U128 val] val Constructors create [Source] new val create( value: U128 val) : U128 val^ Parameters value: U128 val Returns U128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U128 val^ Parameters a: A Returns U128 val^ min_value [Source] new val min_value() : U128 val^ Returns U128 val^ max_value [Source] new val max_value() : U128 val^ Returns U128 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U128 val Returns U128 val abs [Source] fun box abs() : U128 val Returns U128 val bit_reverse [Source] fun box bit_reverse() : U128 val Returns U128 val bswap [Source] fun box bswap() : U128 val Returns U128 val popcount [Source] fun box popcount() : U128 val Returns U128 val clz [Source] fun box clz() : U128 val Returns U128 val ctz [Source] fun box ctz() : U128 val Returns U128 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns U128 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns U128 val bitwidth [Source] fun box bitwidth() : U128 val Returns U128 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val max [Source] fun box max( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val string [Source] fun box string() : String iso^ Returns String iso^ mul [Source] fun box mul( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val divrem [Source] fun box divrem( y: U128 val) : (U128 val , U128 val) Parameters y: U128 val Returns ( U128 val , U128 val) div [Source] fun box div( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rem [Source] fun box rem( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val mul_unsafe [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val divrem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val) Parameters y: U128 val Returns ( U128 val , U128 val) div_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rem_unsafe [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val f32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns F64 val addc [Source] fun box addc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) subc [Source] fun box subc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) mulc [Source] fun box mulc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) divc [Source] fun box divc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) remc [Source] fun box remc( y: U128 val) : (U128 val , Bool val) Parameters y: U128 val Returns ( U128 val , Bool val) add_partial [Source] fun box add_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? sub_partial [Source] fun box sub_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? mul_partial [Source] fun box mul_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? div_partial [Source] fun box div_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? rem_partial [Source] fun box rem_partial( y: U128 val) : U128 val ? Parameters y: U128 val Returns U128 val ? divrem_partial [Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ? Parameters y: U128 val Returns ( U128 val , U128 val) ? shl fun box shl( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val shr fun box shr( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val shl_unsafe fun box shl_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val shr_unsafe fun box shr_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rotl fun box rotl( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val rotr fun box rotr( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val add_unsafe fun box add_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val sub_unsafe fun box sub_unsafe( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val neg_unsafe fun box neg_unsafe() : U128 val Returns U128 val op_and fun box op_and( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val op_or fun box op_or( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val op_xor fun box op_xor( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val op_not fun box op_not() : U128 val Returns U128 val add fun box add( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val sub fun box sub( y: U128 val) : U128 val Parameters y: U128 val Returns U128 val neg fun box neg() : U128 val Returns U128 val eq fun box eq( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val ne fun box ne( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val lt fun box lt( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val le fun box le( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val ge fun box ge( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val gt fun box gt( y: U128 val) : Bool val Parameters y: U128 val Returns Bool val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val compare fun box compare( that: U128 val) : (Less val | Equal val | Greater val) Parameters that: U128 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U128 val Returns U128 val","title":"primitive U128"},{"location":"builtin-U128/#u128","text":"[Source] primitive val U128 is _UnsignedInteger[U128 val] val","title":"U128"},{"location":"builtin-U128/#implements","text":"_UnsignedInteger [ U128 val] val","title":"Implements"},{"location":"builtin-U128/#constructors","text":"","title":"Constructors"},{"location":"builtin-U128/#create","text":"[Source] new val create( value: U128 val) : U128 val^","title":"create"},{"location":"builtin-U128/#parameters","text":"value: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U128/#returns_1","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#min_value","text":"[Source] new val min_value() : U128 val^","title":"min_value"},{"location":"builtin-U128/#returns_2","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#max_value","text":"[Source] new val max_value() : U128 val^","title":"max_value"},{"location":"builtin-U128/#returns_3","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U128/#next_pow2","text":"[Source] fun box next_pow2() : U128 val","title":"next_pow2"},{"location":"builtin-U128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-U128/#returns_5","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bit_reverse","text":"[Source] fun box bit_reverse() : U128 val","title":"bit_reverse"},{"location":"builtin-U128/#returns_6","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bswap","text":"[Source] fun box bswap() : U128 val","title":"bswap"},{"location":"builtin-U128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-U128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-U128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-U128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-U128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-U128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-U128/#returns_13","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U128/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U128/#min","text":"[Source] fun box min( y: U128 val) : U128 val","title":"min"},{"location":"builtin-U128/#parameters_2","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_15","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#max","text":"[Source] fun box max( y: U128 val) : U128 val","title":"max"},{"location":"builtin-U128/#parameters_3","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_16","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U128/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U128/#returns_18","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-U128/#returns_19","text":"String iso^","title":"Returns"},{"location":"builtin-U128/#mul","text":"[Source] fun box mul( y: U128 val) : U128 val","title":"mul"},{"location":"builtin-U128/#parameters_4","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_20","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem","text":"[Source] fun box divrem( y: U128 val) : (U128 val , U128 val)","title":"divrem"},{"location":"builtin-U128/#parameters_5","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_21","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div","text":"[Source] fun box div( y: U128 val) : U128 val","title":"div"},{"location":"builtin-U128/#parameters_6","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_22","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem","text":"[Source] fun box rem( y: U128 val) : U128 val","title":"rem"},{"location":"builtin-U128/#parameters_7","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_23","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val","title":"mul_unsafe"},{"location":"builtin-U128/#parameters_8","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_24","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val)","title":"divrem_unsafe"},{"location":"builtin-U128/#parameters_9","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_25","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val","title":"div_unsafe"},{"location":"builtin-U128/#parameters_10","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_26","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val","title":"rem_unsafe"},{"location":"builtin-U128/#parameters_11","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-U128/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-U128/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U128/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U128/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#addc","text":"[Source] fun box addc( y: U128 val) : (U128 val , Bool val)","title":"addc"},{"location":"builtin-U128/#parameters_12","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_32","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#subc","text":"[Source] fun box subc( y: U128 val) : (U128 val , Bool val)","title":"subc"},{"location":"builtin-U128/#parameters_13","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_33","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mulc","text":"[Source] fun box mulc( y: U128 val) : (U128 val , Bool val)","title":"mulc"},{"location":"builtin-U128/#parameters_14","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_34","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#divc","text":"[Source] fun box divc( y: U128 val) : (U128 val , Bool val)","title":"divc"},{"location":"builtin-U128/#parameters_15","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_35","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#remc","text":"[Source] fun box remc( y: U128 val) : (U128 val , Bool val)","title":"remc"},{"location":"builtin-U128/#parameters_16","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_36","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#add_partial","text":"[Source] fun box add_partial( y: U128 val) : U128 val ?","title":"add_partial"},{"location":"builtin-U128/#parameters_17","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_37","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#sub_partial","text":"[Source] fun box sub_partial( y: U128 val) : U128 val ?","title":"sub_partial"},{"location":"builtin-U128/#parameters_18","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_38","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mul_partial","text":"[Source] fun box mul_partial( y: U128 val) : U128 val ?","title":"mul_partial"},{"location":"builtin-U128/#parameters_19","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_39","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#div_partial","text":"[Source] fun box div_partial( y: U128 val) : U128 val ?","title":"div_partial"},{"location":"builtin-U128/#parameters_20","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_40","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#rem_partial","text":"[Source] fun box rem_partial( y: U128 val) : U128 val ?","title":"rem_partial"},{"location":"builtin-U128/#parameters_21","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_41","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#divrem_partial","text":"[Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ?","title":"divrem_partial"},{"location":"builtin-U128/#parameters_22","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_42","text":"( U128 val , U128 val) ?","title":"Returns"},{"location":"builtin-U128/#shl","text":"fun box shl( y: U128 val) : U128 val","title":"shl"},{"location":"builtin-U128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_43","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr","text":"fun box shr( y: U128 val) : U128 val","title":"shr"},{"location":"builtin-U128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_44","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : U128 val","title":"shl_unsafe"},{"location":"builtin-U128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_45","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : U128 val","title":"shr_unsafe"},{"location":"builtin-U128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_46","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotl","text":"fun box rotl( y: U128 val) : U128 val","title":"rotl"},{"location":"builtin-U128/#parameters_27","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_47","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotr","text":"fun box rotr( y: U128 val) : U128 val","title":"rotr"},{"location":"builtin-U128/#parameters_28","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_48","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add_unsafe","text":"fun box add_unsafe( y: U128 val) : U128 val","title":"add_unsafe"},{"location":"builtin-U128/#parameters_29","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub_unsafe","text":"fun box sub_unsafe( y: U128 val) : U128 val","title":"sub_unsafe"},{"location":"builtin-U128/#parameters_30","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_50","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg_unsafe","text":"fun box neg_unsafe() : U128 val","title":"neg_unsafe"},{"location":"builtin-U128/#returns_51","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_and","text":"fun box op_and( y: U128 val) : U128 val","title":"op_and"},{"location":"builtin-U128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_52","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_or","text":"fun box op_or( y: U128 val) : U128 val","title":"op_or"},{"location":"builtin-U128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_53","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_xor","text":"fun box op_xor( y: U128 val) : U128 val","title":"op_xor"},{"location":"builtin-U128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_54","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_not","text":"fun box op_not() : U128 val","title":"op_not"},{"location":"builtin-U128/#returns_55","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add","text":"fun box add( y: U128 val) : U128 val","title":"add"},{"location":"builtin-U128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_56","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub","text":"fun box sub( y: U128 val) : U128 val","title":"sub"},{"location":"builtin-U128/#parameters_35","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg","text":"fun box neg() : U128 val","title":"neg"},{"location":"builtin-U128/#returns_58","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#eq","text":"fun box eq( y: U128 val) : Bool val","title":"eq"},{"location":"builtin-U128/#parameters_36","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ne","text":"fun box ne( y: U128 val) : Bool val","title":"ne"},{"location":"builtin-U128/#parameters_37","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#lt","text":"fun box lt( y: U128 val) : Bool val","title":"lt"},{"location":"builtin-U128/#parameters_38","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#le","text":"fun box le( y: U128 val) : Bool val","title":"le"},{"location":"builtin-U128/#parameters_39","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ge","text":"fun box ge( y: U128 val) : Bool val","title":"ge"},{"location":"builtin-U128/#parameters_40","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#gt","text":"fun box gt( y: U128 val) : Bool val","title":"gt"},{"location":"builtin-U128/#parameters_41","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U128/#returns_65","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U128/#returns_66","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U128/#returns_67","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U128/#returns_68","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U128/#returns_69","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U128/#returns_70","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U128/#returns_71","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U128/#returns_72","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U128/#returns_73","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U128/#returns_74","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U128/#returns_75","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_1","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U128/#returns_76","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U128/#returns_77","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U128/#returns_78","text":"USize val","title":"Returns"},{"location":"builtin-U128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U128/#returns_79","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U128/#returns_80","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U128/#returns_81","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U128/#returns_82","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U128/#returns_83","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U128/#returns_84","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U128/#returns_85","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U128/#returns_86","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U128/#returns_87","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U128/#returns_88","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U128/#returns_89","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U128/#returns_90","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U128/#returns_91","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U128/#returns_92","text":"USize val","title":"Returns"},{"location":"builtin-U128/#compare","text":"fun box compare( that: U128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U128/#parameters_42","text":"that: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U128/#_value","text":"fun box _value() : U128 val","title":"_value"},{"location":"builtin-U128/#returns_94","text":"U128 val","title":"Returns"},{"location":"builtin-U16/","text":"U16 [Source] primitive val U16 is _UnsignedInteger[U16 val] val Implements _UnsignedInteger [ U16 val] val Constructors create [Source] new val create( value: U16 val) : U16 val^ Parameters value: U16 val Returns U16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U16 val^ Parameters a: A Returns U16 val^ min_value [Source] new val min_value() : U16 val^ Returns U16 val^ max_value [Source] new val max_value() : U16 val^ Returns U16 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U16 val Returns U16 val abs [Source] fun box abs() : U16 val Returns U16 val bit_reverse [Source] fun box bit_reverse() : U16 val Returns U16 val bswap [Source] fun box bswap() : U16 val Returns U16 val popcount [Source] fun box popcount() : U16 val Returns U16 val clz [Source] fun box clz() : U16 val Returns U16 val ctz [Source] fun box ctz() : U16 val Returns U16 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns U16 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns U16 val bitwidth [Source] fun box bitwidth() : U16 val Returns U16 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val max [Source] fun box max( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val addc [Source] fun box addc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) subc [Source] fun box subc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) mulc [Source] fun box mulc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) divc [Source] fun box divc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) remc [Source] fun box remc( y: U16 val) : (U16 val , Bool val) Parameters y: U16 val Returns ( U16 val , Bool val) add_partial [Source] fun box add_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? sub_partial [Source] fun box sub_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? mul_partial [Source] fun box mul_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? div_partial [Source] fun box div_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? rem_partial [Source] fun box rem_partial( y: U16 val) : U16 val ? Parameters y: U16 val Returns U16 val ? divrem_partial [Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ? Parameters y: U16 val Returns ( U16 val , U16 val) ? shl fun box shl( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val shr fun box shr( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val shl_unsafe fun box shl_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val shr_unsafe fun box shr_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val rotl fun box rotl( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val rotr fun box rotr( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val sub_unsafe fun box sub_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val mul_unsafe fun box mul_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val div_unsafe fun box div_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val divrem_unsafe fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val) Parameters y: U16 val Returns ( U16 val , U16 val) rem_unsafe fun box rem_unsafe( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val neg_unsafe fun box neg_unsafe() : U16 val Returns U16 val op_and fun box op_and( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val op_or fun box op_or( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val op_xor fun box op_xor( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val op_not fun box op_not() : U16 val Returns U16 val add fun box add( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val sub fun box sub( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val mul fun box mul( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val div fun box div( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val divrem fun box divrem( y: U16 val) : (U16 val , U16 val) Parameters y: U16 val Returns ( U16 val , U16 val) rem fun box rem( y: U16 val) : U16 val Parameters y: U16 val Returns U16 val neg fun box neg() : U16 val Returns U16 val eq fun box eq( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val ne fun box ne( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val lt fun box lt( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val le fun box le( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val ge fun box ge( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val gt fun box gt( y: U16 val) : Bool val Parameters y: U16 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U16 val) : (Less val | Equal val | Greater val) Parameters that: U16 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U16 val Returns U16 val","title":"primitive U16"},{"location":"builtin-U16/#u16","text":"[Source] primitive val U16 is _UnsignedInteger[U16 val] val","title":"U16"},{"location":"builtin-U16/#implements","text":"_UnsignedInteger [ U16 val] val","title":"Implements"},{"location":"builtin-U16/#constructors","text":"","title":"Constructors"},{"location":"builtin-U16/#create","text":"[Source] new val create( value: U16 val) : U16 val^","title":"create"},{"location":"builtin-U16/#parameters","text":"value: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U16/#returns_1","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#min_value","text":"[Source] new val min_value() : U16 val^","title":"min_value"},{"location":"builtin-U16/#returns_2","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#max_value","text":"[Source] new val max_value() : U16 val^","title":"max_value"},{"location":"builtin-U16/#returns_3","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U16/#next_pow2","text":"[Source] fun box next_pow2() : U16 val","title":"next_pow2"},{"location":"builtin-U16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-U16/#returns_5","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bit_reverse","text":"[Source] fun box bit_reverse() : U16 val","title":"bit_reverse"},{"location":"builtin-U16/#returns_6","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bswap","text":"[Source] fun box bswap() : U16 val","title":"bswap"},{"location":"builtin-U16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-U16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-U16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-U16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-U16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-U16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-U16/#returns_13","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U16/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U16/#min","text":"[Source] fun box min( y: U16 val) : U16 val","title":"min"},{"location":"builtin-U16/#parameters_2","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_15","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#max","text":"[Source] fun box max( y: U16 val) : U16 val","title":"max"},{"location":"builtin-U16/#parameters_3","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_16","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#addc","text":"[Source] fun box addc( y: U16 val) : (U16 val , Bool val)","title":"addc"},{"location":"builtin-U16/#parameters_4","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_17","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#subc","text":"[Source] fun box subc( y: U16 val) : (U16 val , Bool val)","title":"subc"},{"location":"builtin-U16/#parameters_5","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_18","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mulc","text":"[Source] fun box mulc( y: U16 val) : (U16 val , Bool val)","title":"mulc"},{"location":"builtin-U16/#parameters_6","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_19","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#divc","text":"[Source] fun box divc( y: U16 val) : (U16 val , Bool val)","title":"divc"},{"location":"builtin-U16/#parameters_7","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_20","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#remc","text":"[Source] fun box remc( y: U16 val) : (U16 val , Bool val)","title":"remc"},{"location":"builtin-U16/#parameters_8","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_21","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#add_partial","text":"[Source] fun box add_partial( y: U16 val) : U16 val ?","title":"add_partial"},{"location":"builtin-U16/#parameters_9","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_22","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#sub_partial","text":"[Source] fun box sub_partial( y: U16 val) : U16 val ?","title":"sub_partial"},{"location":"builtin-U16/#parameters_10","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_23","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mul_partial","text":"[Source] fun box mul_partial( y: U16 val) : U16 val ?","title":"mul_partial"},{"location":"builtin-U16/#parameters_11","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_24","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#div_partial","text":"[Source] fun box div_partial( y: U16 val) : U16 val ?","title":"div_partial"},{"location":"builtin-U16/#parameters_12","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_25","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#rem_partial","text":"[Source] fun box rem_partial( y: U16 val) : U16 val ?","title":"rem_partial"},{"location":"builtin-U16/#parameters_13","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_26","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#divrem_partial","text":"[Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ?","title":"divrem_partial"},{"location":"builtin-U16/#parameters_14","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_27","text":"( U16 val , U16 val) ?","title":"Returns"},{"location":"builtin-U16/#shl","text":"fun box shl( y: U16 val) : U16 val","title":"shl"},{"location":"builtin-U16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_28","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr","text":"fun box shr( y: U16 val) : U16 val","title":"shr"},{"location":"builtin-U16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_29","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : U16 val","title":"shl_unsafe"},{"location":"builtin-U16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : U16 val","title":"shr_unsafe"},{"location":"builtin-U16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_31","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotl","text":"fun box rotl( y: U16 val) : U16 val","title":"rotl"},{"location":"builtin-U16/#parameters_19","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_32","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotr","text":"fun box rotr( y: U16 val) : U16 val","title":"rotr"},{"location":"builtin-U16/#parameters_20","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_33","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U16/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-U16/#add_unsafe","text":"fun box add_unsafe( y: U16 val) : U16 val","title":"add_unsafe"},{"location":"builtin-U16/#parameters_21","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_35","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub_unsafe","text":"fun box sub_unsafe( y: U16 val) : U16 val","title":"sub_unsafe"},{"location":"builtin-U16/#parameters_22","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_36","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul_unsafe","text":"fun box mul_unsafe( y: U16 val) : U16 val","title":"mul_unsafe"},{"location":"builtin-U16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_37","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div_unsafe","text":"fun box div_unsafe( y: U16 val) : U16 val","title":"div_unsafe"},{"location":"builtin-U16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_38","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem_unsafe","text":"fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val)","title":"divrem_unsafe"},{"location":"builtin-U16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_39","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem_unsafe","text":"fun box rem_unsafe( y: U16 val) : U16 val","title":"rem_unsafe"},{"location":"builtin-U16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_40","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg_unsafe","text":"fun box neg_unsafe() : U16 val","title":"neg_unsafe"},{"location":"builtin-U16/#returns_41","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_and","text":"fun box op_and( y: U16 val) : U16 val","title":"op_and"},{"location":"builtin-U16/#parameters_27","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_42","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_or","text":"fun box op_or( y: U16 val) : U16 val","title":"op_or"},{"location":"builtin-U16/#parameters_28","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_43","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_xor","text":"fun box op_xor( y: U16 val) : U16 val","title":"op_xor"},{"location":"builtin-U16/#parameters_29","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_44","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_not","text":"fun box op_not() : U16 val","title":"op_not"},{"location":"builtin-U16/#returns_45","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#add","text":"fun box add( y: U16 val) : U16 val","title":"add"},{"location":"builtin-U16/#parameters_30","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub","text":"fun box sub( y: U16 val) : U16 val","title":"sub"},{"location":"builtin-U16/#parameters_31","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_47","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul","text":"fun box mul( y: U16 val) : U16 val","title":"mul"},{"location":"builtin-U16/#parameters_32","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div","text":"fun box div( y: U16 val) : U16 val","title":"div"},{"location":"builtin-U16/#parameters_33","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_49","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem","text":"fun box divrem( y: U16 val) : (U16 val , U16 val)","title":"divrem"},{"location":"builtin-U16/#parameters_34","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_50","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem","text":"fun box rem( y: U16 val) : U16 val","title":"rem"},{"location":"builtin-U16/#parameters_35","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_51","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg","text":"fun box neg() : U16 val","title":"neg"},{"location":"builtin-U16/#returns_52","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#eq","text":"fun box eq( y: U16 val) : Bool val","title":"eq"},{"location":"builtin-U16/#parameters_36","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ne","text":"fun box ne( y: U16 val) : Bool val","title":"ne"},{"location":"builtin-U16/#parameters_37","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#lt","text":"fun box lt( y: U16 val) : Bool val","title":"lt"},{"location":"builtin-U16/#parameters_38","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#le","text":"fun box le( y: U16 val) : Bool val","title":"le"},{"location":"builtin-U16/#parameters_39","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ge","text":"fun box ge( y: U16 val) : Bool val","title":"ge"},{"location":"builtin-U16/#parameters_40","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#gt","text":"fun box gt( y: U16 val) : Bool val","title":"gt"},{"location":"builtin-U16/#parameters_41","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U16/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-U16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U16/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U16/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U16/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U16/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U16/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U16/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U16/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U16/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U16/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_1","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U16/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U16/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U16/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U16/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U16/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U16/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U16/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U16/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U16/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U16/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U16/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U16/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U16/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U16/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U16/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U16/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U16/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U16/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U16/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U16/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U16/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U16/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U16/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U16/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#compare","text":"fun box compare( that: U16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U16/#parameters_42","text":"that: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U16/#_value","text":"fun box _value() : U16 val","title":"_value"},{"location":"builtin-U16/#returns_94","text":"U16 val","title":"Returns"},{"location":"builtin-U32/","text":"U32 [Source] primitive val U32 is _UnsignedInteger[U32 val] val Implements _UnsignedInteger [ U32 val] val Constructors create [Source] new val create( value: U32 val) : U32 val^ Parameters value: U32 val Returns U32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U32 val^ Parameters a: A Returns U32 val^ min_value [Source] new val min_value() : U32 val^ Returns U32 val^ max_value [Source] new val max_value() : U32 val^ Returns U32 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U32 val Returns U32 val abs [Source] fun box abs() : U32 val Returns U32 val bit_reverse [Source] fun box bit_reverse() : U32 val Returns U32 val bswap [Source] fun box bswap() : U32 val Returns U32 val popcount [Source] fun box popcount() : U32 val Returns U32 val clz [Source] fun box clz() : U32 val Returns U32 val ctz [Source] fun box ctz() : U32 val Returns U32 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns U32 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns U32 val bitwidth [Source] fun box bitwidth() : U32 val Returns U32 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val max [Source] fun box max( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val addc [Source] fun box addc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) subc [Source] fun box subc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) mulc [Source] fun box mulc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) divc [Source] fun box divc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) remc [Source] fun box remc( y: U32 val) : (U32 val , Bool val) Parameters y: U32 val Returns ( U32 val , Bool val) add_partial [Source] fun box add_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? sub_partial [Source] fun box sub_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? mul_partial [Source] fun box mul_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? div_partial [Source] fun box div_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? rem_partial [Source] fun box rem_partial( y: U32 val) : U32 val ? Parameters y: U32 val Returns U32 val ? divrem_partial [Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ? Parameters y: U32 val Returns ( U32 val , U32 val) ? shl fun box shl( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val shr fun box shr( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val shl_unsafe fun box shl_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val shr_unsafe fun box shr_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val rotl fun box rotl( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val rotr fun box rotr( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val sub_unsafe fun box sub_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val mul_unsafe fun box mul_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val div_unsafe fun box div_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val divrem_unsafe fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val) Parameters y: U32 val Returns ( U32 val , U32 val) rem_unsafe fun box rem_unsafe( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val neg_unsafe fun box neg_unsafe() : U32 val Returns U32 val op_and fun box op_and( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val op_or fun box op_or( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val op_xor fun box op_xor( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val op_not fun box op_not() : U32 val Returns U32 val add fun box add( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val sub fun box sub( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val mul fun box mul( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val div fun box div( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val divrem fun box divrem( y: U32 val) : (U32 val , U32 val) Parameters y: U32 val Returns ( U32 val , U32 val) rem fun box rem( y: U32 val) : U32 val Parameters y: U32 val Returns U32 val neg fun box neg() : U32 val Returns U32 val eq fun box eq( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val ne fun box ne( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val lt fun box lt( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val le fun box le( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val ge fun box ge( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val gt fun box gt( y: U32 val) : Bool val Parameters y: U32 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U32 val) : (Less val | Equal val | Greater val) Parameters that: U32 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U32 val Returns U32 val","title":"primitive U32"},{"location":"builtin-U32/#u32","text":"[Source] primitive val U32 is _UnsignedInteger[U32 val] val","title":"U32"},{"location":"builtin-U32/#implements","text":"_UnsignedInteger [ U32 val] val","title":"Implements"},{"location":"builtin-U32/#constructors","text":"","title":"Constructors"},{"location":"builtin-U32/#create","text":"[Source] new val create( value: U32 val) : U32 val^","title":"create"},{"location":"builtin-U32/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U32/#returns_1","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#min_value","text":"[Source] new val min_value() : U32 val^","title":"min_value"},{"location":"builtin-U32/#returns_2","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#max_value","text":"[Source] new val max_value() : U32 val^","title":"max_value"},{"location":"builtin-U32/#returns_3","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U32/#next_pow2","text":"[Source] fun box next_pow2() : U32 val","title":"next_pow2"},{"location":"builtin-U32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-U32/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bit_reverse","text":"[Source] fun box bit_reverse() : U32 val","title":"bit_reverse"},{"location":"builtin-U32/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bswap","text":"[Source] fun box bswap() : U32 val","title":"bswap"},{"location":"builtin-U32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-U32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-U32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-U32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-U32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-U32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-U32/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U32/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U32/#min","text":"[Source] fun box min( y: U32 val) : U32 val","title":"min"},{"location":"builtin-U32/#parameters_2","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_15","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#max","text":"[Source] fun box max( y: U32 val) : U32 val","title":"max"},{"location":"builtin-U32/#parameters_3","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_16","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#addc","text":"[Source] fun box addc( y: U32 val) : (U32 val , Bool val)","title":"addc"},{"location":"builtin-U32/#parameters_4","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_17","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#subc","text":"[Source] fun box subc( y: U32 val) : (U32 val , Bool val)","title":"subc"},{"location":"builtin-U32/#parameters_5","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_18","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mulc","text":"[Source] fun box mulc( y: U32 val) : (U32 val , Bool val)","title":"mulc"},{"location":"builtin-U32/#parameters_6","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_19","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#divc","text":"[Source] fun box divc( y: U32 val) : (U32 val , Bool val)","title":"divc"},{"location":"builtin-U32/#parameters_7","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_20","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#remc","text":"[Source] fun box remc( y: U32 val) : (U32 val , Bool val)","title":"remc"},{"location":"builtin-U32/#parameters_8","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_21","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#add_partial","text":"[Source] fun box add_partial( y: U32 val) : U32 val ?","title":"add_partial"},{"location":"builtin-U32/#parameters_9","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_22","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#sub_partial","text":"[Source] fun box sub_partial( y: U32 val) : U32 val ?","title":"sub_partial"},{"location":"builtin-U32/#parameters_10","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_23","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mul_partial","text":"[Source] fun box mul_partial( y: U32 val) : U32 val ?","title":"mul_partial"},{"location":"builtin-U32/#parameters_11","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_24","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#div_partial","text":"[Source] fun box div_partial( y: U32 val) : U32 val ?","title":"div_partial"},{"location":"builtin-U32/#parameters_12","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_25","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#rem_partial","text":"[Source] fun box rem_partial( y: U32 val) : U32 val ?","title":"rem_partial"},{"location":"builtin-U32/#parameters_13","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_26","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#divrem_partial","text":"[Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ?","title":"divrem_partial"},{"location":"builtin-U32/#parameters_14","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_27","text":"( U32 val , U32 val) ?","title":"Returns"},{"location":"builtin-U32/#shl","text":"fun box shl( y: U32 val) : U32 val","title":"shl"},{"location":"builtin-U32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_28","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr","text":"fun box shr( y: U32 val) : U32 val","title":"shr"},{"location":"builtin-U32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_29","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : U32 val","title":"shl_unsafe"},{"location":"builtin-U32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_30","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : U32 val","title":"shr_unsafe"},{"location":"builtin-U32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_31","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotl","text":"fun box rotl( y: U32 val) : U32 val","title":"rotl"},{"location":"builtin-U32/#parameters_19","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_32","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotr","text":"fun box rotr( y: U32 val) : U32 val","title":"rotr"},{"location":"builtin-U32/#parameters_20","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U32/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-U32/#add_unsafe","text":"fun box add_unsafe( y: U32 val) : U32 val","title":"add_unsafe"},{"location":"builtin-U32/#parameters_21","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_35","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub_unsafe","text":"fun box sub_unsafe( y: U32 val) : U32 val","title":"sub_unsafe"},{"location":"builtin-U32/#parameters_22","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_36","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul_unsafe","text":"fun box mul_unsafe( y: U32 val) : U32 val","title":"mul_unsafe"},{"location":"builtin-U32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_37","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div_unsafe","text":"fun box div_unsafe( y: U32 val) : U32 val","title":"div_unsafe"},{"location":"builtin-U32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_38","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem_unsafe","text":"fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val)","title":"divrem_unsafe"},{"location":"builtin-U32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_39","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem_unsafe","text":"fun box rem_unsafe( y: U32 val) : U32 val","title":"rem_unsafe"},{"location":"builtin-U32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_40","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg_unsafe","text":"fun box neg_unsafe() : U32 val","title":"neg_unsafe"},{"location":"builtin-U32/#returns_41","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_and","text":"fun box op_and( y: U32 val) : U32 val","title":"op_and"},{"location":"builtin-U32/#parameters_27","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_42","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_or","text":"fun box op_or( y: U32 val) : U32 val","title":"op_or"},{"location":"builtin-U32/#parameters_28","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_43","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_xor","text":"fun box op_xor( y: U32 val) : U32 val","title":"op_xor"},{"location":"builtin-U32/#parameters_29","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_44","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_not","text":"fun box op_not() : U32 val","title":"op_not"},{"location":"builtin-U32/#returns_45","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#add","text":"fun box add( y: U32 val) : U32 val","title":"add"},{"location":"builtin-U32/#parameters_30","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_46","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub","text":"fun box sub( y: U32 val) : U32 val","title":"sub"},{"location":"builtin-U32/#parameters_31","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_47","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul","text":"fun box mul( y: U32 val) : U32 val","title":"mul"},{"location":"builtin-U32/#parameters_32","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_48","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div","text":"fun box div( y: U32 val) : U32 val","title":"div"},{"location":"builtin-U32/#parameters_33","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem","text":"fun box divrem( y: U32 val) : (U32 val , U32 val)","title":"divrem"},{"location":"builtin-U32/#parameters_34","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_50","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem","text":"fun box rem( y: U32 val) : U32 val","title":"rem"},{"location":"builtin-U32/#parameters_35","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_51","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg","text":"fun box neg() : U32 val","title":"neg"},{"location":"builtin-U32/#returns_52","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#eq","text":"fun box eq( y: U32 val) : Bool val","title":"eq"},{"location":"builtin-U32/#parameters_36","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ne","text":"fun box ne( y: U32 val) : Bool val","title":"ne"},{"location":"builtin-U32/#parameters_37","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#lt","text":"fun box lt( y: U32 val) : Bool val","title":"lt"},{"location":"builtin-U32/#parameters_38","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#le","text":"fun box le( y: U32 val) : Bool val","title":"le"},{"location":"builtin-U32/#parameters_39","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ge","text":"fun box ge( y: U32 val) : Bool val","title":"ge"},{"location":"builtin-U32/#parameters_40","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#gt","text":"fun box gt( y: U32 val) : Bool val","title":"gt"},{"location":"builtin-U32/#parameters_41","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U32/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-U32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U32/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U32/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U32/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U32/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U32/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U32/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U32/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U32/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U32/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U32/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_1","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U32/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U32/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U32/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U32/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U32/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U32/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U32/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U32/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U32/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U32/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U32/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U32/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U32/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U32/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U32/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U32/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U32/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U32/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U32/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U32/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U32/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U32/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U32/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#compare","text":"fun box compare( that: U32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U32/#parameters_42","text":"that: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U32/#_value","text":"fun box _value() : U32 val","title":"_value"},{"location":"builtin-U32/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U64/","text":"U64 [Source] primitive val U64 is _UnsignedInteger[U64 val] val Implements _UnsignedInteger [ U64 val] val Constructors create [Source] new val create( value: U64 val) : U64 val^ Parameters value: U64 val Returns U64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U64 val^ Parameters a: A Returns U64 val^ min_value [Source] new val min_value() : U64 val^ Returns U64 val^ max_value [Source] new val max_value() : U64 val^ Returns U64 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U64 val Returns U64 val abs [Source] fun box abs() : U64 val Returns U64 val bit_reverse [Source] fun box bit_reverse() : U64 val Returns U64 val bswap [Source] fun box bswap() : U64 val Returns U64 val popcount [Source] fun box popcount() : U64 val Returns U64 val clz [Source] fun box clz() : U64 val Returns U64 val ctz [Source] fun box ctz() : U64 val Returns U64 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns U64 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns U64 val bitwidth [Source] fun box bitwidth() : U64 val Returns U64 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val max [Source] fun box max( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) subc [Source] fun box subc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) mulc [Source] fun box mulc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) divc [Source] fun box divc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) remc [Source] fun box remc( y: U64 val) : (U64 val , Bool val) Parameters y: U64 val Returns ( U64 val , Bool val) add_partial [Source] fun box add_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? sub_partial [Source] fun box sub_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? mul_partial [Source] fun box mul_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? div_partial [Source] fun box div_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? rem_partial [Source] fun box rem_partial( y: U64 val) : U64 val ? Parameters y: U64 val Returns U64 val ? divrem_partial [Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ? Parameters y: U64 val Returns ( U64 val , U64 val) ? shl fun box shl( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val shr fun box shr( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val shl_unsafe fun box shl_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val shr_unsafe fun box shr_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val rotl fun box rotl( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val rotr fun box rotr( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val sub_unsafe fun box sub_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val mul_unsafe fun box mul_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val div_unsafe fun box div_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val divrem_unsafe fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val) Parameters y: U64 val Returns ( U64 val , U64 val) rem_unsafe fun box rem_unsafe( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val neg_unsafe fun box neg_unsafe() : U64 val Returns U64 val op_and fun box op_and( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val op_or fun box op_or( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val op_xor fun box op_xor( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val op_not fun box op_not() : U64 val Returns U64 val add fun box add( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val sub fun box sub( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val mul fun box mul( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val div fun box div( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val divrem fun box divrem( y: U64 val) : (U64 val , U64 val) Parameters y: U64 val Returns ( U64 val , U64 val) rem fun box rem( y: U64 val) : U64 val Parameters y: U64 val Returns U64 val neg fun box neg() : U64 val Returns U64 val eq fun box eq( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val ne fun box ne( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val lt fun box lt( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val le fun box le( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val ge fun box ge( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val gt fun box gt( y: U64 val) : Bool val Parameters y: U64 val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U64 val) : (Less val | Equal val | Greater val) Parameters that: U64 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U64 val Returns U64 val","title":"primitive U64"},{"location":"builtin-U64/#u64","text":"[Source] primitive val U64 is _UnsignedInteger[U64 val] val","title":"U64"},{"location":"builtin-U64/#implements","text":"_UnsignedInteger [ U64 val] val","title":"Implements"},{"location":"builtin-U64/#constructors","text":"","title":"Constructors"},{"location":"builtin-U64/#create","text":"[Source] new val create( value: U64 val) : U64 val^","title":"create"},{"location":"builtin-U64/#parameters","text":"value: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : U64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U64/#returns_1","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#min_value","text":"[Source] new val min_value() : U64 val^","title":"min_value"},{"location":"builtin-U64/#returns_2","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#max_value","text":"[Source] new val max_value() : U64 val^","title":"max_value"},{"location":"builtin-U64/#returns_3","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U64/#next_pow2","text":"[Source] fun box next_pow2() : U64 val","title":"next_pow2"},{"location":"builtin-U64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-U64/#returns_5","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bit_reverse","text":"[Source] fun box bit_reverse() : U64 val","title":"bit_reverse"},{"location":"builtin-U64/#returns_6","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bswap","text":"[Source] fun box bswap() : U64 val","title":"bswap"},{"location":"builtin-U64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-U64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-U64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-U64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-U64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-U64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-U64/#returns_13","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U64/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U64/#min","text":"[Source] fun box min( y: U64 val) : U64 val","title":"min"},{"location":"builtin-U64/#parameters_2","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_15","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#max","text":"[Source] fun box max( y: U64 val) : U64 val","title":"max"},{"location":"builtin-U64/#parameters_3","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_16","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U64/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U64/#addc","text":"[Source] fun box addc( y: U64 val) : (U64 val , Bool val)","title":"addc"},{"location":"builtin-U64/#parameters_4","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_18","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#subc","text":"[Source] fun box subc( y: U64 val) : (U64 val , Bool val)","title":"subc"},{"location":"builtin-U64/#parameters_5","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_19","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mulc","text":"[Source] fun box mulc( y: U64 val) : (U64 val , Bool val)","title":"mulc"},{"location":"builtin-U64/#parameters_6","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_20","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#divc","text":"[Source] fun box divc( y: U64 val) : (U64 val , Bool val)","title":"divc"},{"location":"builtin-U64/#parameters_7","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_21","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#remc","text":"[Source] fun box remc( y: U64 val) : (U64 val , Bool val)","title":"remc"},{"location":"builtin-U64/#parameters_8","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_22","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#add_partial","text":"[Source] fun box add_partial( y: U64 val) : U64 val ?","title":"add_partial"},{"location":"builtin-U64/#parameters_9","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_23","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#sub_partial","text":"[Source] fun box sub_partial( y: U64 val) : U64 val ?","title":"sub_partial"},{"location":"builtin-U64/#parameters_10","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_24","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mul_partial","text":"[Source] fun box mul_partial( y: U64 val) : U64 val ?","title":"mul_partial"},{"location":"builtin-U64/#parameters_11","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_25","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#div_partial","text":"[Source] fun box div_partial( y: U64 val) : U64 val ?","title":"div_partial"},{"location":"builtin-U64/#parameters_12","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_26","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#rem_partial","text":"[Source] fun box rem_partial( y: U64 val) : U64 val ?","title":"rem_partial"},{"location":"builtin-U64/#parameters_13","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_27","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#divrem_partial","text":"[Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ?","title":"divrem_partial"},{"location":"builtin-U64/#parameters_14","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_28","text":"( U64 val , U64 val) ?","title":"Returns"},{"location":"builtin-U64/#shl","text":"fun box shl( y: U64 val) : U64 val","title":"shl"},{"location":"builtin-U64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_29","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr","text":"fun box shr( y: U64 val) : U64 val","title":"shr"},{"location":"builtin-U64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_30","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : U64 val","title":"shl_unsafe"},{"location":"builtin-U64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_31","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : U64 val","title":"shr_unsafe"},{"location":"builtin-U64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_32","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotl","text":"fun box rotl( y: U64 val) : U64 val","title":"rotl"},{"location":"builtin-U64/#parameters_19","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_33","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotr","text":"fun box rotr( y: U64 val) : U64 val","title":"rotr"},{"location":"builtin-U64/#parameters_20","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U64/#returns_35","text":"String iso^","title":"Returns"},{"location":"builtin-U64/#add_unsafe","text":"fun box add_unsafe( y: U64 val) : U64 val","title":"add_unsafe"},{"location":"builtin-U64/#parameters_21","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_36","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub_unsafe","text":"fun box sub_unsafe( y: U64 val) : U64 val","title":"sub_unsafe"},{"location":"builtin-U64/#parameters_22","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_37","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul_unsafe","text":"fun box mul_unsafe( y: U64 val) : U64 val","title":"mul_unsafe"},{"location":"builtin-U64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_38","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div_unsafe","text":"fun box div_unsafe( y: U64 val) : U64 val","title":"div_unsafe"},{"location":"builtin-U64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_39","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem_unsafe","text":"fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val)","title":"divrem_unsafe"},{"location":"builtin-U64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_40","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem_unsafe","text":"fun box rem_unsafe( y: U64 val) : U64 val","title":"rem_unsafe"},{"location":"builtin-U64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_41","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg_unsafe","text":"fun box neg_unsafe() : U64 val","title":"neg_unsafe"},{"location":"builtin-U64/#returns_42","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_and","text":"fun box op_and( y: U64 val) : U64 val","title":"op_and"},{"location":"builtin-U64/#parameters_27","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_43","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_or","text":"fun box op_or( y: U64 val) : U64 val","title":"op_or"},{"location":"builtin-U64/#parameters_28","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_xor","text":"fun box op_xor( y: U64 val) : U64 val","title":"op_xor"},{"location":"builtin-U64/#parameters_29","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_45","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_not","text":"fun box op_not() : U64 val","title":"op_not"},{"location":"builtin-U64/#returns_46","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#add","text":"fun box add( y: U64 val) : U64 val","title":"add"},{"location":"builtin-U64/#parameters_30","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_47","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub","text":"fun box sub( y: U64 val) : U64 val","title":"sub"},{"location":"builtin-U64/#parameters_31","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_48","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul","text":"fun box mul( y: U64 val) : U64 val","title":"mul"},{"location":"builtin-U64/#parameters_32","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_49","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div","text":"fun box div( y: U64 val) : U64 val","title":"div"},{"location":"builtin-U64/#parameters_33","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem","text":"fun box divrem( y: U64 val) : (U64 val , U64 val)","title":"divrem"},{"location":"builtin-U64/#parameters_34","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_51","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem","text":"fun box rem( y: U64 val) : U64 val","title":"rem"},{"location":"builtin-U64/#parameters_35","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg","text":"fun box neg() : U64 val","title":"neg"},{"location":"builtin-U64/#returns_53","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#eq","text":"fun box eq( y: U64 val) : Bool val","title":"eq"},{"location":"builtin-U64/#parameters_36","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ne","text":"fun box ne( y: U64 val) : Bool val","title":"ne"},{"location":"builtin-U64/#parameters_37","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#lt","text":"fun box lt( y: U64 val) : Bool val","title":"lt"},{"location":"builtin-U64/#parameters_38","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#le","text":"fun box le( y: U64 val) : Bool val","title":"le"},{"location":"builtin-U64/#parameters_39","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ge","text":"fun box ge( y: U64 val) : Bool val","title":"ge"},{"location":"builtin-U64/#parameters_40","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#gt","text":"fun box gt( y: U64 val) : Bool val","title":"gt"},{"location":"builtin-U64/#parameters_41","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U64/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U64/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U64/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U64/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U64/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U64/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U64/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U64/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U64/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U64/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U64/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_1","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U64/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U64/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U64/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U64/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U64/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U64/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U64/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U64/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U64/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U64/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U64/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U64/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U64/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U64/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U64/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U64/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U64/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U64/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U64/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U64/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U64/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U64/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#compare","text":"fun box compare( that: U64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U64/#parameters_42","text":"that: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U64/#_value","text":"fun box _value() : U64 val","title":"_value"},{"location":"builtin-U64/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-U8/","text":"U8 [Source] primitive val U8 is _UnsignedInteger[U8 val] val Implements _UnsignedInteger [ U8 val] val Constructors create [Source] new val create( value: U8 val) : U8 val^ Parameters value: U8 val Returns U8 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : U8 val^ Parameters a: B Returns U8 val^ min_value [Source] new val min_value() : U8 val^ Returns U8 val^ max_value [Source] new val max_value() : U8 val^ Returns U8 val^ Public Functions next_pow2 [Source] fun box next_pow2() : U8 val Returns U8 val abs [Source] fun box abs() : U8 val Returns U8 val bit_reverse [Source] fun box bit_reverse() : U8 val Returns U8 val bswap [Source] fun box bswap() : U8 val Returns U8 val popcount [Source] fun box popcount() : U8 val Returns U8 val clz [Source] fun box clz() : U8 val Returns U8 val ctz [Source] fun box ctz() : U8 val Returns U8 val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns U8 val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns U8 val bitwidth [Source] fun box bitwidth() : U8 val Returns U8 val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val max [Source] fun box max( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val addc [Source] fun box addc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) subc [Source] fun box subc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) mulc [Source] fun box mulc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) divc [Source] fun box divc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) remc [Source] fun box remc( y: U8 val) : (U8 val , Bool val) Parameters y: U8 val Returns ( U8 val , Bool val) add_partial [Source] fun box add_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? sub_partial [Source] fun box sub_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? mul_partial [Source] fun box mul_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? div_partial [Source] fun box div_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? rem_partial [Source] fun box rem_partial( y: U8 val) : U8 val ? Parameters y: U8 val Returns U8 val ? divrem_partial [Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ? Parameters y: U8 val Returns ( U8 val , U8 val) ? shl fun box shl( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val shr fun box shr( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val shl_unsafe fun box shl_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val shr_unsafe fun box shr_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val rotl fun box rotl( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val rotr fun box rotr( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val sub_unsafe fun box sub_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val mul_unsafe fun box mul_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val div_unsafe fun box div_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val divrem_unsafe fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val) Parameters y: U8 val Returns ( U8 val , U8 val) rem_unsafe fun box rem_unsafe( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val neg_unsafe fun box neg_unsafe() : U8 val Returns U8 val op_and fun box op_and( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val op_or fun box op_or( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val op_xor fun box op_xor( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val op_not fun box op_not() : U8 val Returns U8 val add fun box add( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val sub fun box sub( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val mul fun box mul( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val div fun box div( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val divrem fun box divrem( y: U8 val) : (U8 val , U8 val) Parameters y: U8 val Returns ( U8 val , U8 val) rem fun box rem( y: U8 val) : U8 val Parameters y: U8 val Returns U8 val neg fun box neg() : U8 val Returns U8 val eq fun box eq( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val ne fun box ne( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val lt fun box lt( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val le fun box le( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val ge fun box ge( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val gt fun box gt( y: U8 val) : Bool val Parameters y: U8 val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: U8 val) : (Less val | Equal val | Greater val) Parameters that: U8 val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : U8 val Returns U8 val","title":"primitive U8"},{"location":"builtin-U8/#u8","text":"[Source] primitive val U8 is _UnsignedInteger[U8 val] val","title":"U8"},{"location":"builtin-U8/#implements","text":"_UnsignedInteger [ U8 val] val","title":"Implements"},{"location":"builtin-U8/#constructors","text":"","title":"Constructors"},{"location":"builtin-U8/#create","text":"[Source] new val create( value: U8 val) : U8 val^","title":"create"},{"location":"builtin-U8/#parameters","text":"value: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : U8 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-U8/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-U8/#returns_1","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#min_value","text":"[Source] new val min_value() : U8 val^","title":"min_value"},{"location":"builtin-U8/#returns_2","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#max_value","text":"[Source] new val max_value() : U8 val^","title":"max_value"},{"location":"builtin-U8/#returns_3","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U8/#next_pow2","text":"[Source] fun box next_pow2() : U8 val","title":"next_pow2"},{"location":"builtin-U8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-U8/#returns_5","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bit_reverse","text":"[Source] fun box bit_reverse() : U8 val","title":"bit_reverse"},{"location":"builtin-U8/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bswap","text":"[Source] fun box bswap() : U8 val","title":"bswap"},{"location":"builtin-U8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-U8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-U8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-U8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-U8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-U8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-U8/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U8/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U8/#min","text":"[Source] fun box min( y: U8 val) : U8 val","title":"min"},{"location":"builtin-U8/#parameters_2","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_15","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#max","text":"[Source] fun box max( y: U8 val) : U8 val","title":"max"},{"location":"builtin-U8/#parameters_3","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_16","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#addc","text":"[Source] fun box addc( y: U8 val) : (U8 val , Bool val)","title":"addc"},{"location":"builtin-U8/#parameters_4","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_17","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#subc","text":"[Source] fun box subc( y: U8 val) : (U8 val , Bool val)","title":"subc"},{"location":"builtin-U8/#parameters_5","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_18","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mulc","text":"[Source] fun box mulc( y: U8 val) : (U8 val , Bool val)","title":"mulc"},{"location":"builtin-U8/#parameters_6","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_19","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#divc","text":"[Source] fun box divc( y: U8 val) : (U8 val , Bool val)","title":"divc"},{"location":"builtin-U8/#parameters_7","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_20","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#remc","text":"[Source] fun box remc( y: U8 val) : (U8 val , Bool val)","title":"remc"},{"location":"builtin-U8/#parameters_8","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_21","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#add_partial","text":"[Source] fun box add_partial( y: U8 val) : U8 val ?","title":"add_partial"},{"location":"builtin-U8/#parameters_9","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_22","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#sub_partial","text":"[Source] fun box sub_partial( y: U8 val) : U8 val ?","title":"sub_partial"},{"location":"builtin-U8/#parameters_10","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_23","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mul_partial","text":"[Source] fun box mul_partial( y: U8 val) : U8 val ?","title":"mul_partial"},{"location":"builtin-U8/#parameters_11","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_24","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#div_partial","text":"[Source] fun box div_partial( y: U8 val) : U8 val ?","title":"div_partial"},{"location":"builtin-U8/#parameters_12","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#rem_partial","text":"[Source] fun box rem_partial( y: U8 val) : U8 val ?","title":"rem_partial"},{"location":"builtin-U8/#parameters_13","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#divrem_partial","text":"[Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ?","title":"divrem_partial"},{"location":"builtin-U8/#parameters_14","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_27","text":"( U8 val , U8 val) ?","title":"Returns"},{"location":"builtin-U8/#shl","text":"fun box shl( y: U8 val) : U8 val","title":"shl"},{"location":"builtin-U8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_28","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr","text":"fun box shr( y: U8 val) : U8 val","title":"shr"},{"location":"builtin-U8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : U8 val","title":"shl_unsafe"},{"location":"builtin-U8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_30","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : U8 val","title":"shr_unsafe"},{"location":"builtin-U8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_31","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotl","text":"fun box rotl( y: U8 val) : U8 val","title":"rotl"},{"location":"builtin-U8/#parameters_19","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_32","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotr","text":"fun box rotr( y: U8 val) : U8 val","title":"rotr"},{"location":"builtin-U8/#parameters_20","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_33","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U8/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-U8/#add_unsafe","text":"fun box add_unsafe( y: U8 val) : U8 val","title":"add_unsafe"},{"location":"builtin-U8/#parameters_21","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_35","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub_unsafe","text":"fun box sub_unsafe( y: U8 val) : U8 val","title":"sub_unsafe"},{"location":"builtin-U8/#parameters_22","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_36","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul_unsafe","text":"fun box mul_unsafe( y: U8 val) : U8 val","title":"mul_unsafe"},{"location":"builtin-U8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_37","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div_unsafe","text":"fun box div_unsafe( y: U8 val) : U8 val","title":"div_unsafe"},{"location":"builtin-U8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_38","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem_unsafe","text":"fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val)","title":"divrem_unsafe"},{"location":"builtin-U8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_39","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem_unsafe","text":"fun box rem_unsafe( y: U8 val) : U8 val","title":"rem_unsafe"},{"location":"builtin-U8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_40","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg_unsafe","text":"fun box neg_unsafe() : U8 val","title":"neg_unsafe"},{"location":"builtin-U8/#returns_41","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_and","text":"fun box op_and( y: U8 val) : U8 val","title":"op_and"},{"location":"builtin-U8/#parameters_27","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_42","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_or","text":"fun box op_or( y: U8 val) : U8 val","title":"op_or"},{"location":"builtin-U8/#parameters_28","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_43","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_xor","text":"fun box op_xor( y: U8 val) : U8 val","title":"op_xor"},{"location":"builtin-U8/#parameters_29","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_44","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_not","text":"fun box op_not() : U8 val","title":"op_not"},{"location":"builtin-U8/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#add","text":"fun box add( y: U8 val) : U8 val","title":"add"},{"location":"builtin-U8/#parameters_30","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_46","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub","text":"fun box sub( y: U8 val) : U8 val","title":"sub"},{"location":"builtin-U8/#parameters_31","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_47","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul","text":"fun box mul( y: U8 val) : U8 val","title":"mul"},{"location":"builtin-U8/#parameters_32","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_48","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div","text":"fun box div( y: U8 val) : U8 val","title":"div"},{"location":"builtin-U8/#parameters_33","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_49","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem","text":"fun box divrem( y: U8 val) : (U8 val , U8 val)","title":"divrem"},{"location":"builtin-U8/#parameters_34","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_50","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem","text":"fun box rem( y: U8 val) : U8 val","title":"rem"},{"location":"builtin-U8/#parameters_35","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_51","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg","text":"fun box neg() : U8 val","title":"neg"},{"location":"builtin-U8/#returns_52","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#eq","text":"fun box eq( y: U8 val) : Bool val","title":"eq"},{"location":"builtin-U8/#parameters_36","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ne","text":"fun box ne( y: U8 val) : Bool val","title":"ne"},{"location":"builtin-U8/#parameters_37","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#lt","text":"fun box lt( y: U8 val) : Bool val","title":"lt"},{"location":"builtin-U8/#parameters_38","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#le","text":"fun box le( y: U8 val) : Bool val","title":"le"},{"location":"builtin-U8/#parameters_39","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ge","text":"fun box ge( y: U8 val) : Bool val","title":"ge"},{"location":"builtin-U8/#parameters_40","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#gt","text":"fun box gt( y: U8 val) : Bool val","title":"gt"},{"location":"builtin-U8/#parameters_41","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U8/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-U8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U8/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U8/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U8/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U8/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U8/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U8/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U8/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U8/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_1","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U8/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U8/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U8/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U8/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U8/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U8/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U8/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U8/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U8/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U8/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U8/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U8/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U8/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U8/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U8/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U8/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U8/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U8/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U8/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U8/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U8/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U8/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U8/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U8/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U8/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#compare","text":"fun box compare( that: U8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U8/#parameters_42","text":"that: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U8/#_value","text":"fun box _value() : U8 val","title":"_value"},{"location":"builtin-U8/#returns_94","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/","text":"ULong [Source] primitive val ULong is _UnsignedInteger[ULong val] val Implements _UnsignedInteger [ ULong val] val Constructors create [Source] new val create( value: ULong val) : ULong val^ Parameters value: ULong val Returns ULong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ULong val^ Parameters a: A Returns ULong val^ min_value [Source] new val min_value() : ULong val^ Returns ULong val^ max_value [Source] new val max_value() : ULong val^ Returns ULong val^ Public Functions next_pow2 [Source] fun box next_pow2() : ULong val Returns ULong val abs [Source] fun box abs() : ULong val Returns ULong val bit_reverse [Source] fun box bit_reverse() : ULong val Returns ULong val bswap [Source] fun box bswap() : ULong val Returns ULong val popcount [Source] fun box popcount() : ULong val Returns ULong val clz [Source] fun box clz() : ULong val Returns ULong val ctz [Source] fun box ctz() : ULong val Returns ULong val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val Returns ULong val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val Returns ULong val bitwidth [Source] fun box bitwidth() : ULong val Returns ULong val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val max [Source] fun box max( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val hash [Source] fun box hash() : USize val Returns USize val addc [Source] fun box addc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) subc [Source] fun box subc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) mulc [Source] fun box mulc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) divc [Source] fun box divc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) remc [Source] fun box remc( y: ULong val) : (ULong val , Bool val) Parameters y: ULong val Returns ( ULong val , Bool val) add_partial [Source] fun box add_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? sub_partial [Source] fun box sub_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? mul_partial [Source] fun box mul_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? div_partial [Source] fun box div_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? rem_partial [Source] fun box rem_partial( y: ULong val) : ULong val ? Parameters y: ULong val Returns ULong val ? divrem_partial [Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ? Parameters y: ULong val Returns ( ULong val , ULong val) ? shl fun box shl( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val shr fun box shr( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val shl_unsafe fun box shl_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val shr_unsafe fun box shr_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val rotl fun box rotl( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val rotr fun box rotr( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val sub_unsafe fun box sub_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val mul_unsafe fun box mul_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val div_unsafe fun box div_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val divrem_unsafe fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val) Parameters y: ULong val Returns ( ULong val , ULong val) rem_unsafe fun box rem_unsafe( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val neg_unsafe fun box neg_unsafe() : ULong val Returns ULong val op_and fun box op_and( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val op_or fun box op_or( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val op_xor fun box op_xor( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val op_not fun box op_not() : ULong val Returns ULong val add fun box add( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val sub fun box sub( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val mul fun box mul( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val div fun box div( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val divrem fun box divrem( y: ULong val) : (ULong val , ULong val) Parameters y: ULong val Returns ( ULong val , ULong val) rem fun box rem( y: ULong val) : ULong val Parameters y: ULong val Returns ULong val neg fun box neg() : ULong val Returns ULong val eq fun box eq( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val ne fun box ne( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val lt fun box lt( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val le fun box le( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val ge fun box ge( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val gt fun box gt( y: ULong val) : Bool val Parameters y: ULong val Returns Bool val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: ULong val) : (Less val | Equal val | Greater val) Parameters that: ULong val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : ULong val Returns ULong val","title":"primitive ULong"},{"location":"builtin-ULong/#ulong","text":"[Source] primitive val ULong is _UnsignedInteger[ULong val] val","title":"ULong"},{"location":"builtin-ULong/#implements","text":"_UnsignedInteger [ ULong val] val","title":"Implements"},{"location":"builtin-ULong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ULong/#create","text":"[Source] new val create( value: ULong val) : ULong val^","title":"create"},{"location":"builtin-ULong/#parameters","text":"value: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : ULong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ULong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ULong/#returns_1","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#min_value","text":"[Source] new val min_value() : ULong val^","title":"min_value"},{"location":"builtin-ULong/#returns_2","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#max_value","text":"[Source] new val max_value() : ULong val^","title":"max_value"},{"location":"builtin-ULong/#returns_3","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ULong/#next_pow2","text":"[Source] fun box next_pow2() : ULong val","title":"next_pow2"},{"location":"builtin-ULong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ULong/#returns_5","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bit_reverse","text":"[Source] fun box bit_reverse() : ULong val","title":"bit_reverse"},{"location":"builtin-ULong/#returns_6","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bswap","text":"[Source] fun box bswap() : ULong val","title":"bswap"},{"location":"builtin-ULong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ULong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ULong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ULong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ULong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ULong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ULong/#returns_13","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ULong/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#min","text":"[Source] fun box min( y: ULong val) : ULong val","title":"min"},{"location":"builtin-ULong/#parameters_2","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_15","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#max","text":"[Source] fun box max( y: ULong val) : ULong val","title":"max"},{"location":"builtin-ULong/#parameters_3","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_16","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ULong/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#addc","text":"[Source] fun box addc( y: ULong val) : (ULong val , Bool val)","title":"addc"},{"location":"builtin-ULong/#parameters_4","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_18","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#subc","text":"[Source] fun box subc( y: ULong val) : (ULong val , Bool val)","title":"subc"},{"location":"builtin-ULong/#parameters_5","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_19","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mulc","text":"[Source] fun box mulc( y: ULong val) : (ULong val , Bool val)","title":"mulc"},{"location":"builtin-ULong/#parameters_6","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_20","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#divc","text":"[Source] fun box divc( y: ULong val) : (ULong val , Bool val)","title":"divc"},{"location":"builtin-ULong/#parameters_7","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_21","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#remc","text":"[Source] fun box remc( y: ULong val) : (ULong val , Bool val)","title":"remc"},{"location":"builtin-ULong/#parameters_8","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_22","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#add_partial","text":"[Source] fun box add_partial( y: ULong val) : ULong val ?","title":"add_partial"},{"location":"builtin-ULong/#parameters_9","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_23","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#sub_partial","text":"[Source] fun box sub_partial( y: ULong val) : ULong val ?","title":"sub_partial"},{"location":"builtin-ULong/#parameters_10","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_24","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mul_partial","text":"[Source] fun box mul_partial( y: ULong val) : ULong val ?","title":"mul_partial"},{"location":"builtin-ULong/#parameters_11","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_25","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#div_partial","text":"[Source] fun box div_partial( y: ULong val) : ULong val ?","title":"div_partial"},{"location":"builtin-ULong/#parameters_12","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_26","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#rem_partial","text":"[Source] fun box rem_partial( y: ULong val) : ULong val ?","title":"rem_partial"},{"location":"builtin-ULong/#parameters_13","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_27","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ?","title":"divrem_partial"},{"location":"builtin-ULong/#parameters_14","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_28","text":"( ULong val , ULong val) ?","title":"Returns"},{"location":"builtin-ULong/#shl","text":"fun box shl( y: ULong val) : ULong val","title":"shl"},{"location":"builtin-ULong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_29","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr","text":"fun box shr( y: ULong val) : ULong val","title":"shr"},{"location":"builtin-ULong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_30","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ULong val","title":"shl_unsafe"},{"location":"builtin-ULong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_31","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ULong val","title":"shr_unsafe"},{"location":"builtin-ULong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_32","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotl","text":"fun box rotl( y: ULong val) : ULong val","title":"rotl"},{"location":"builtin-ULong/#parameters_19","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_33","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotr","text":"fun box rotr( y: ULong val) : ULong val","title":"rotr"},{"location":"builtin-ULong/#parameters_20","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ULong/#returns_35","text":"String iso^","title":"Returns"},{"location":"builtin-ULong/#add_unsafe","text":"fun box add_unsafe( y: ULong val) : ULong val","title":"add_unsafe"},{"location":"builtin-ULong/#parameters_21","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_36","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub_unsafe","text":"fun box sub_unsafe( y: ULong val) : ULong val","title":"sub_unsafe"},{"location":"builtin-ULong/#parameters_22","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_37","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul_unsafe","text":"fun box mul_unsafe( y: ULong val) : ULong val","title":"mul_unsafe"},{"location":"builtin-ULong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_38","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div_unsafe","text":"fun box div_unsafe( y: ULong val) : ULong val","title":"div_unsafe"},{"location":"builtin-ULong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_39","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val)","title":"divrem_unsafe"},{"location":"builtin-ULong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_40","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem_unsafe","text":"fun box rem_unsafe( y: ULong val) : ULong val","title":"rem_unsafe"},{"location":"builtin-ULong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_41","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg_unsafe","text":"fun box neg_unsafe() : ULong val","title":"neg_unsafe"},{"location":"builtin-ULong/#returns_42","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_and","text":"fun box op_and( y: ULong val) : ULong val","title":"op_and"},{"location":"builtin-ULong/#parameters_27","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_43","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_or","text":"fun box op_or( y: ULong val) : ULong val","title":"op_or"},{"location":"builtin-ULong/#parameters_28","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_44","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_xor","text":"fun box op_xor( y: ULong val) : ULong val","title":"op_xor"},{"location":"builtin-ULong/#parameters_29","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_45","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_not","text":"fun box op_not() : ULong val","title":"op_not"},{"location":"builtin-ULong/#returns_46","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#add","text":"fun box add( y: ULong val) : ULong val","title":"add"},{"location":"builtin-ULong/#parameters_30","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_47","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub","text":"fun box sub( y: ULong val) : ULong val","title":"sub"},{"location":"builtin-ULong/#parameters_31","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_48","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul","text":"fun box mul( y: ULong val) : ULong val","title":"mul"},{"location":"builtin-ULong/#parameters_32","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_49","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div","text":"fun box div( y: ULong val) : ULong val","title":"div"},{"location":"builtin-ULong/#parameters_33","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem","text":"fun box divrem( y: ULong val) : (ULong val , ULong val)","title":"divrem"},{"location":"builtin-ULong/#parameters_34","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_51","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem","text":"fun box rem( y: ULong val) : ULong val","title":"rem"},{"location":"builtin-ULong/#parameters_35","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg","text":"fun box neg() : ULong val","title":"neg"},{"location":"builtin-ULong/#returns_53","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#eq","text":"fun box eq( y: ULong val) : Bool val","title":"eq"},{"location":"builtin-ULong/#parameters_36","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ne","text":"fun box ne( y: ULong val) : Bool val","title":"ne"},{"location":"builtin-ULong/#parameters_37","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#lt","text":"fun box lt( y: ULong val) : Bool val","title":"lt"},{"location":"builtin-ULong/#parameters_38","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#le","text":"fun box le( y: ULong val) : Bool val","title":"le"},{"location":"builtin-ULong/#parameters_39","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ge","text":"fun box ge( y: ULong val) : Bool val","title":"ge"},{"location":"builtin-ULong/#parameters_40","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#gt","text":"fun box gt( y: ULong val) : Bool val","title":"gt"},{"location":"builtin-ULong/#parameters_41","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ULong/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ULong/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ULong/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ULong/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ULong/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ULong/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ULong/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ULong/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ULong/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ULong/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ULong/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ULong/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ULong/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_1","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ULong/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ULong/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ULong/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ULong/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ULong/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ULong/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ULong/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ULong/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ULong/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ULong/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ULong/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ULong/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ULong/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ULong/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ULong/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ULong/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ULong/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ULong/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ULong/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ULong/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#compare","text":"fun box compare( that: ULong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ULong/#parameters_42","text":"that: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ULong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ULong/#_value","text":"fun box _value() : ULong val","title":"_value"},{"location":"builtin-ULong/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-USize/","text":"USize [Source] primitive val USize is _UnsignedInteger[USize val] val Implements _UnsignedInteger [ USize val] val Constructors create [Source] new val create( value: USize val) : USize val^ Parameters value: USize val Returns USize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [A] val)] [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : USize val^ Parameters a: A Returns USize val^ min_value [Source] new val min_value() : USize val^ Returns USize val^ max_value [Source] new val max_value() : USize val^ Returns USize val^ Public Functions next_pow2 [Source] fun box next_pow2() : USize val Returns USize val abs [Source] fun box abs() : USize val Returns USize val bit_reverse [Source] fun box bit_reverse() : USize val Returns USize val bswap [Source] fun box bswap() : USize val Returns USize val popcount [Source] fun box popcount() : USize val Returns USize val clz [Source] fun box clz() : USize val Returns USize val ctz [Source] fun box ctz() : USize val Returns USize val clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val Returns USize val ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val Returns USize val bitwidth [Source] fun box bitwidth() : USize val Returns USize val bytewidth [Source] fun box bytewidth() : USize val Returns USize val min [Source] fun box min( y: USize val) : USize val Parameters y: USize val Returns USize val max [Source] fun box max( y: USize val) : USize val Parameters y: USize val Returns USize val addc [Source] fun box addc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) subc [Source] fun box subc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) mulc [Source] fun box mulc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) divc [Source] fun box divc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) remc [Source] fun box remc( y: USize val) : (USize val , Bool val) Parameters y: USize val Returns ( USize val , Bool val) add_partial [Source] fun box add_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? sub_partial [Source] fun box sub_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? mul_partial [Source] fun box mul_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? div_partial [Source] fun box div_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? rem_partial [Source] fun box rem_partial( y: USize val) : USize val ? Parameters y: USize val Returns USize val ? divrem_partial [Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ? Parameters y: USize val Returns ( USize val , USize val) ? shl fun box shl( y: USize val) : USize val Parameters y: USize val Returns USize val shr fun box shr( y: USize val) : USize val Parameters y: USize val Returns USize val shl_unsafe fun box shl_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val shr_unsafe fun box shr_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val rotl fun box rotl( y: USize val) : USize val Parameters y: USize val Returns USize val rotr fun box rotr( y: USize val) : USize val Parameters y: USize val Returns USize val string fun box string() : String iso^ Returns String iso^ add_unsafe fun box add_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val sub_unsafe fun box sub_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val mul_unsafe fun box mul_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val div_unsafe fun box div_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val divrem_unsafe fun box divrem_unsafe( y: USize val) : (USize val , USize val) Parameters y: USize val Returns ( USize val , USize val) rem_unsafe fun box rem_unsafe( y: USize val) : USize val Parameters y: USize val Returns USize val neg_unsafe fun box neg_unsafe() : USize val Returns USize val op_and fun box op_and( y: USize val) : USize val Parameters y: USize val Returns USize val op_or fun box op_or( y: USize val) : USize val Parameters y: USize val Returns USize val op_xor fun box op_xor( y: USize val) : USize val Parameters y: USize val Returns USize val op_not fun box op_not() : USize val Returns USize val add fun box add( y: USize val) : USize val Parameters y: USize val Returns USize val sub fun box sub( y: USize val) : USize val Parameters y: USize val Returns USize val mul fun box mul( y: USize val) : USize val Parameters y: USize val Returns USize val div fun box div( y: USize val) : USize val Parameters y: USize val Returns USize val divrem fun box divrem( y: USize val) : (USize val , USize val) Parameters y: USize val Returns ( USize val , USize val) rem fun box rem( y: USize val) : USize val Parameters y: USize val Returns USize val neg fun box neg() : USize val Returns USize val eq fun box eq( y: USize val) : Bool val Parameters y: USize val Returns Bool val ne fun box ne( y: USize val) : Bool val Parameters y: USize val Returns Bool val lt fun box lt( y: USize val) : Bool val Parameters y: USize val Returns Bool val le fun box le( y: USize val) : Bool val Parameters y: USize val Returns Bool val ge fun box ge( y: USize val) : Bool val Parameters y: USize val Returns Bool val gt fun box gt( y: USize val) : Bool val Parameters y: USize val Returns Bool val hash fun box hash() : USize val Returns USize val hash64 fun box hash64() : U64 val Returns U64 val i8 fun box i8() : I8 val Returns I8 val i16 fun box i16() : I16 val Returns I16 val i32 fun box i32() : I32 val Returns I32 val i64 fun box i64() : I64 val Returns I64 val i128 fun box i128() : I128 val Returns I128 val ilong fun box ilong() : ILong val Returns ILong val isize fun box isize() : ISize val Returns ISize val u8 fun box u8() : U8 val Returns U8 val u16 fun box u16() : U16 val Returns U16 val u32 fun box u32() : U32 val Returns U32 val u64 fun box u64() : U64 val Returns U64 val u128 fun box u128() : U128 val Returns U128 val ulong fun box ulong() : ULong val Returns ULong val usize fun box usize() : USize val Returns USize val f32 fun box f32() : F32 val Returns F32 val f64 fun box f64() : F64 val Returns F64 val i8_unsafe fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe fun box usize_unsafe() : USize val Returns USize val f32_unsafe fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: USize val) : (Less val | Equal val | Greater val) Parameters that: USize val Returns ( Less val | Equal val | Greater val) Private Functions _value fun box _value() : USize val Returns USize val","title":"primitive USize"},{"location":"builtin-USize/#usize","text":"[Source] primitive val USize is _UnsignedInteger[USize val] val","title":"USize"},{"location":"builtin-USize/#implements","text":"_UnsignedInteger [ USize val] val","title":"Implements"},{"location":"builtin-USize/#constructors","text":"","title":"Constructors"},{"location":"builtin-USize/#create","text":"[Source] new val create( value: USize val) : USize val^","title":"create"},{"location":"builtin-USize/#parameters","text":"value: USize val","title":"Parameters"},{"location":"builtin-USize/#returns","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[A] val)]( a: A) : USize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-USize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-USize/#returns_1","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#min_value","text":"[Source] new val min_value() : USize val^","title":"min_value"},{"location":"builtin-USize/#returns_2","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#max_value","text":"[Source] new val max_value() : USize val^","title":"max_value"},{"location":"builtin-USize/#returns_3","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-USize/#next_pow2","text":"[Source] fun box next_pow2() : USize val","title":"next_pow2"},{"location":"builtin-USize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-USize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-USize/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bit_reverse","text":"[Source] fun box bit_reverse() : USize val","title":"bit_reverse"},{"location":"builtin-USize/#returns_6","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bswap","text":"[Source] fun box bswap() : USize val","title":"bswap"},{"location":"builtin-USize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-USize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-USize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-USize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-USize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-USize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-USize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-USize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-USize/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-USize/#min","text":"[Source] fun box min( y: USize val) : USize val","title":"min"},{"location":"builtin-USize/#parameters_2","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-USize/#max","text":"[Source] fun box max( y: USize val) : USize val","title":"max"},{"location":"builtin-USize/#parameters_3","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-USize/#addc","text":"[Source] fun box addc( y: USize val) : (USize val , Bool val)","title":"addc"},{"location":"builtin-USize/#parameters_4","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_17","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#subc","text":"[Source] fun box subc( y: USize val) : (USize val , Bool val)","title":"subc"},{"location":"builtin-USize/#parameters_5","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_18","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mulc","text":"[Source] fun box mulc( y: USize val) : (USize val , Bool val)","title":"mulc"},{"location":"builtin-USize/#parameters_6","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_19","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#divc","text":"[Source] fun box divc( y: USize val) : (USize val , Bool val)","title":"divc"},{"location":"builtin-USize/#parameters_7","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_20","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#remc","text":"[Source] fun box remc( y: USize val) : (USize val , Bool val)","title":"remc"},{"location":"builtin-USize/#parameters_8","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_21","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#add_partial","text":"[Source] fun box add_partial( y: USize val) : USize val ?","title":"add_partial"},{"location":"builtin-USize/#parameters_9","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_22","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#sub_partial","text":"[Source] fun box sub_partial( y: USize val) : USize val ?","title":"sub_partial"},{"location":"builtin-USize/#parameters_10","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_23","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mul_partial","text":"[Source] fun box mul_partial( y: USize val) : USize val ?","title":"mul_partial"},{"location":"builtin-USize/#parameters_11","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_24","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#div_partial","text":"[Source] fun box div_partial( y: USize val) : USize val ?","title":"div_partial"},{"location":"builtin-USize/#parameters_12","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_25","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#rem_partial","text":"[Source] fun box rem_partial( y: USize val) : USize val ?","title":"rem_partial"},{"location":"builtin-USize/#parameters_13","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_26","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#divrem_partial","text":"[Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ?","title":"divrem_partial"},{"location":"builtin-USize/#parameters_14","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_27","text":"( USize val , USize val) ?","title":"Returns"},{"location":"builtin-USize/#shl","text":"fun box shl( y: USize val) : USize val","title":"shl"},{"location":"builtin-USize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_28","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr","text":"fun box shr( y: USize val) : USize val","title":"shr"},{"location":"builtin-USize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : USize val","title":"shl_unsafe"},{"location":"builtin-USize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_30","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : USize val","title":"shr_unsafe"},{"location":"builtin-USize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_31","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotl","text":"fun box rotl( y: USize val) : USize val","title":"rotl"},{"location":"builtin-USize/#parameters_19","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_32","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotr","text":"fun box rotr( y: USize val) : USize val","title":"rotr"},{"location":"builtin-USize/#parameters_20","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-USize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-USize/#returns_34","text":"String iso^","title":"Returns"},{"location":"builtin-USize/#add_unsafe","text":"fun box add_unsafe( y: USize val) : USize val","title":"add_unsafe"},{"location":"builtin-USize/#parameters_21","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_35","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub_unsafe","text":"fun box sub_unsafe( y: USize val) : USize val","title":"sub_unsafe"},{"location":"builtin-USize/#parameters_22","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_36","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul_unsafe","text":"fun box mul_unsafe( y: USize val) : USize val","title":"mul_unsafe"},{"location":"builtin-USize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div_unsafe","text":"fun box div_unsafe( y: USize val) : USize val","title":"div_unsafe"},{"location":"builtin-USize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_38","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem_unsafe","text":"fun box divrem_unsafe( y: USize val) : (USize val , USize val)","title":"divrem_unsafe"},{"location":"builtin-USize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_39","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem_unsafe","text":"fun box rem_unsafe( y: USize val) : USize val","title":"rem_unsafe"},{"location":"builtin-USize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_40","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg_unsafe","text":"fun box neg_unsafe() : USize val","title":"neg_unsafe"},{"location":"builtin-USize/#returns_41","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_and","text":"fun box op_and( y: USize val) : USize val","title":"op_and"},{"location":"builtin-USize/#parameters_27","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_42","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_or","text":"fun box op_or( y: USize val) : USize val","title":"op_or"},{"location":"builtin-USize/#parameters_28","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_xor","text":"fun box op_xor( y: USize val) : USize val","title":"op_xor"},{"location":"builtin-USize/#parameters_29","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_44","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_not","text":"fun box op_not() : USize val","title":"op_not"},{"location":"builtin-USize/#returns_45","text":"USize val","title":"Returns"},{"location":"builtin-USize/#add","text":"fun box add( y: USize val) : USize val","title":"add"},{"location":"builtin-USize/#parameters_30","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_46","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub","text":"fun box sub( y: USize val) : USize val","title":"sub"},{"location":"builtin-USize/#parameters_31","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_47","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul","text":"fun box mul( y: USize val) : USize val","title":"mul"},{"location":"builtin-USize/#parameters_32","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_48","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div","text":"fun box div( y: USize val) : USize val","title":"div"},{"location":"builtin-USize/#parameters_33","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_49","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem","text":"fun box divrem( y: USize val) : (USize val , USize val)","title":"divrem"},{"location":"builtin-USize/#parameters_34","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_50","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem","text":"fun box rem( y: USize val) : USize val","title":"rem"},{"location":"builtin-USize/#parameters_35","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg","text":"fun box neg() : USize val","title":"neg"},{"location":"builtin-USize/#returns_52","text":"USize val","title":"Returns"},{"location":"builtin-USize/#eq","text":"fun box eq( y: USize val) : Bool val","title":"eq"},{"location":"builtin-USize/#parameters_36","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ne","text":"fun box ne( y: USize val) : Bool val","title":"ne"},{"location":"builtin-USize/#parameters_37","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#lt","text":"fun box lt( y: USize val) : Bool val","title":"lt"},{"location":"builtin-USize/#parameters_38","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#le","text":"fun box le( y: USize val) : Bool val","title":"le"},{"location":"builtin-USize/#parameters_39","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ge","text":"fun box ge( y: USize val) : Bool val","title":"ge"},{"location":"builtin-USize/#parameters_40","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#gt","text":"fun box gt( y: USize val) : Bool val","title":"gt"},{"location":"builtin-USize/#parameters_41","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-USize/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-USize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-USize/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-USize/#returns_61","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-USize/#returns_62","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-USize/#returns_63","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-USize/#returns_64","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-USize/#returns_65","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-USize/#returns_66","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-USize/#returns_67","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-USize/#returns_68","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-USize/#returns_69","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-USize/#returns_70","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-USize/#returns_71","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-USize/#returns_72","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-USize/#returns_73","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_1","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-USize/#returns_74","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-USize/#returns_75","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-USize/#returns_76","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-USize/#returns_77","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-USize/#returns_78","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-USize/#returns_79","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-USize/#returns_80","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-USize/#returns_81","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-USize/#returns_82","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-USize/#returns_83","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-USize/#returns_84","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-USize/#returns_85","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-USize/#returns_86","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-USize/#returns_87","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-USize/#returns_88","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-USize/#returns_89","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-USize/#returns_90","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-USize/#returns_91","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-USize/#returns_92","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#compare","text":"fun box compare( that: USize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-USize/#parameters_42","text":"that: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_93","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-USize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-USize/#_value","text":"fun box _value() : USize val","title":"_value"},{"location":"builtin-USize/#returns_94","text":"USize val","title":"Returns"},{"location":"builtin-Unsigned/","text":"Unsigned [Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For ( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Unsigned"},{"location":"builtin-Unsigned/#unsigned","text":"[Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Unsigned"},{"location":"builtin-Unsigned/#type-alias-for","text":"( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-_ArithmeticConvertible/","text":"_ArithmeticConvertible [Source] trait val _ArithmeticConvertible Public Functions i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns F64 val","title":"trait _ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#_arithmeticconvertible","text":"[Source] trait val _ArithmeticConvertible","title":"_ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ArithmeticConvertible/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_ArithmeticConvertible/#returns","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_ArithmeticConvertible/#returns_1","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_ArithmeticConvertible/#returns_2","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_ArithmeticConvertible/#returns_3","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_ArithmeticConvertible/#returns_4","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_ArithmeticConvertible/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_ArithmeticConvertible/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_ArithmeticConvertible/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_ArithmeticConvertible/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_ArithmeticConvertible/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_ArithmeticConvertible/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_ArithmeticConvertible/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_ArithmeticConvertible/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_ArithmeticConvertible/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_ArithmeticConvertible/#returns_14","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_ArithmeticConvertible/#returns_15","text":"F64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_20","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_21","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_22","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_23","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_24","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_25","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_26","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_28","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-_PartialArithmetic/","text":"_PartialArithmetic [Source] trait ref _PartialArithmetic Public Functions add_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? sub_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? mul_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ?","title":"trait _PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#_partialarithmetic","text":"[Source] trait ref _PartialArithmetic","title":"_PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_PartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/","text":"_SignedCheckedArithmetic [Source] primitive val _SignedCheckedArithmetic Constructors create [Source] new val create() : _SignedCheckedArithmetic val^ Returns _SignedCheckedArithmetic val^ Public Functions eq [Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val Parameters that: _SignedCheckedArithmetic val Returns Bool val ne [Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val Parameters that: _SignedCheckedArithmetic val Returns Bool val Private Functions _mulc[U: _UnsignedInteger [U] val, T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) _SignedInteger [T, U] val)] [Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mulc[U: _UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) _SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val)","title":"primitive _SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#_signedcheckedarithmetic","text":"[Source] primitive val _SignedCheckedArithmetic","title":"_SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedCheckedArithmetic/#create","text":"[Source] new val create() : _SignedCheckedArithmetic val^","title":"create"},{"location":"builtin-_SignedCheckedArithmetic/#returns","text":"_SignedCheckedArithmetic val^","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedCheckedArithmetic/#eq","text":"[Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedCheckedArithmetic/#parameters","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#ne","text":"[Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_1","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_SignedCheckedArithmetic/#_mulc91u-_unsignedinteger91u93-val-t-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-_signedinteger91t-u93-val93","text":"[Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mulc[U: _UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) _SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val)","title":"_mulc[U: _UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) &amp; _SignedInteger[T, U] val)]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_3","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/","text":"_SignedInteger[A: _SignedInteger [A, B] val, B: _UnsignedInteger [B] val] [Source] trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is Integer[A] val Implements Integer [A] val Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions abs [Source] fun box abs() : B Returns B shl [Source] fun box shl( y: B) : A Parameters y: B Returns A shr [Source] fun box shr( y: B) : A Parameters y: B Returns A shl_unsafe [Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A Parameters y: B Returns A shr_unsafe [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A Parameters y: B Returns A popcount [Source] fun box popcount() : B Returns B clz [Source] fun box clz() : B Returns B ctz [Source] fun box ctz() : B Returns B clz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B Returns B ctz_unsafe [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B Returns B bitwidth [Source] fun box bitwidth() : B Returns B bytewidth [Source] fun box bytewidth() : USize val Returns USize val string [Source] fun box string() : String iso^ Returns String iso^ add_unsafe [Source] fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] fun box rem_unsafe( y: A) : A Parameters y: A Returns A add_partial [Source] fun box add_partial( y: A) : A ? Parameters y: A Returns A ? sub_partial [Source] fun box sub_partial( y: A) : A ? Parameters y: A Returns A ? mul_partial [Source] fun box mul_partial( y: A) : A ? Parameters y: A Returns A ? div_partial [Source] fun box div_partial( y: A) : A ? Parameters y: A Returns A ? rem_partial [Source] fun box rem_partial( y: A) : A ? Parameters y: A Returns A ? divrem_partial [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters y: A Returns (A , A) ? neg_unsafe [Source] fun box neg_unsafe() : A Returns A addc [Source] fun box addc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) subc [Source] fun box subc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) mulc [Source] fun box mulc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) divc [Source] fun box divc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) remc [Source] fun box remc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) op_and [Source] fun box op_and( y: A) : A Parameters y: A Returns A op_or [Source] fun box op_or( y: A) : A Parameters y: A Returns A op_xor [Source] fun box op_xor( y: A) : A Parameters y: A Returns A op_not [Source] fun box op_not() : A Returns A bit_reverse [Source] fun box bit_reverse() : A Returns A bswap [Source] fun box bswap() : A Returns A add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait _SignedInteger"},{"location":"builtin-_SignedInteger/#_signedinteger91a-_signedinteger91a-b93-val-b-_unsignedinteger91b93-val93","text":"[Source] trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is Integer[A] val","title":"_SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val]"},{"location":"builtin-_SignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-_SignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-_SignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-_SignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-_SignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-_SignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_SignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedInteger/#abs","text":"[Source] fun box abs() : B","title":"abs"},{"location":"builtin-_SignedInteger/#returns_4","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#shl","text":"[Source] fun box shl( y: B) : A","title":"shl"},{"location":"builtin-_SignedInteger/#parameters_2","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#shr","text":"[Source] fun box shr( y: B) : A","title":"shr"},{"location":"builtin-_SignedInteger/#parameters_3","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A","title":"shl_unsafe"},{"location":"builtin-_SignedInteger/#parameters_4","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A","title":"shr_unsafe"},{"location":"builtin-_SignedInteger/#parameters_5","text":"y: B","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#popcount","text":"[Source] fun box popcount() : B","title":"popcount"},{"location":"builtin-_SignedInteger/#returns_9","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#clz","text":"[Source] fun box clz() : B","title":"clz"},{"location":"builtin-_SignedInteger/#returns_10","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#ctz","text":"[Source] fun box ctz() : B","title":"ctz"},{"location":"builtin-_SignedInteger/#returns_11","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B","title":"clz_unsafe"},{"location":"builtin-_SignedInteger/#returns_12","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B","title":"ctz_unsafe"},{"location":"builtin-_SignedInteger/#returns_13","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : B","title":"bitwidth"},{"location":"builtin-_SignedInteger/#returns_14","text":"B","title":"Returns"},{"location":"builtin-_SignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-_SignedInteger/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-_SignedInteger/#returns_16","text":"String iso^","title":"Returns"},{"location":"builtin-_SignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-_SignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-_SignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-_SignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-_SignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-_SignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_21","text":"(A , A)","title":"Returns"},{"location":"builtin-_SignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-_SignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-_SignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_23","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-_SignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_24","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-_SignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-_SignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-_SignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-_SignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-_SignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_28","text":"(A , A) ?","title":"Returns"},{"location":"builtin-_SignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-_SignedInteger/#returns_29","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-_SignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_30","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-_SignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_31","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-_SignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_32","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-_SignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_33","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-_SignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_SignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-_SignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_35","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-_SignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_36","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-_SignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_37","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-_SignedInteger/#returns_38","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-_SignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-_SignedInteger/#returns_40","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-_SignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-_SignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-_SignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-_SignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-_SignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_45","text":"(A , A)","title":"Returns"},{"location":"builtin-_SignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-_SignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-_SignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-_SignedInteger/#parameters_32","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_48","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-_SignedInteger/#parameters_33","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_49","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-_SignedInteger/#parameters_34","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-_SignedInteger/#parameters_35","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-_SignedInteger/#parameters_36","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-_SignedInteger/#parameters_37","text":"y: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-_SignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-_SignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_55","text":"A","title":"Returns"},{"location":"builtin-_SignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-_SignedInteger/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-_SignedInteger/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_SignedInteger/#returns_58","text":"I8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_SignedInteger/#returns_59","text":"I16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_SignedInteger/#returns_60","text":"I32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_SignedInteger/#returns_61","text":"I64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_SignedInteger/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_SignedInteger/#returns_63","text":"ILong val","title":"Returns"},{"location":"builtin-_SignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_SignedInteger/#returns_64","text":"ISize val","title":"Returns"},{"location":"builtin-_SignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_SignedInteger/#returns_65","text":"U8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_SignedInteger/#returns_66","text":"U16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_SignedInteger/#returns_67","text":"U32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_SignedInteger/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_SignedInteger/#returns_69","text":"U128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_SignedInteger/#returns_70","text":"ULong val","title":"Returns"},{"location":"builtin-_SignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_SignedInteger/#returns_71","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_SignedInteger/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_SignedInteger/#returns_73","text":"F64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_SignedInteger/#returns_74","text":"I8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_SignedInteger/#returns_75","text":"I16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_SignedInteger/#returns_76","text":"I32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_SignedInteger/#returns_77","text":"I64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_SignedInteger/#returns_78","text":"I128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_SignedInteger/#returns_79","text":"ILong val","title":"Returns"},{"location":"builtin-_SignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_SignedInteger/#returns_80","text":"ISize val","title":"Returns"},{"location":"builtin-_SignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_SignedInteger/#returns_81","text":"U8 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_SignedInteger/#returns_82","text":"U16 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_SignedInteger/#returns_83","text":"U32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_SignedInteger/#returns_84","text":"U64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_SignedInteger/#returns_85","text":"U128 val","title":"Returns"},{"location":"builtin-_SignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_SignedInteger/#returns_86","text":"ULong val","title":"Returns"},{"location":"builtin-_SignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_SignedInteger/#returns_87","text":"USize val","title":"Returns"},{"location":"builtin-_SignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_SignedInteger/#returns_88","text":"F32 val","title":"Returns"},{"location":"builtin-_SignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_SignedInteger/#returns_89","text":"F64 val","title":"Returns"},{"location":"builtin-_SignedInteger/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-_SignedInteger/#parameters_40","text":"that: box- A","title":"Parameters"},{"location":"builtin-_SignedInteger/#returns_90","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-_SignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_SignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-_SignedInteger/#returns_91","text":"A","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/","text":"_SignedPartialArithmetic [Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref Implements _PartialArithmetic ref Constructors create [Source] new val create() : _SignedPartialArithmetic val^ Returns _SignedPartialArithmetic val^ Public Functions div_checked[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box div_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) rem_checked[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box rem_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) div_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box div_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? rem_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box rem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? divrem_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box divrem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , T) ? Parameters x: T y: T Returns (T , T) ? neg_partial[T: ( _SignedInteger [T, U] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger [U] val] [Source] fun box neg_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T) : T ? Parameters x: T Returns T ? add_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? sub_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? mul_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? eq [Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val Parameters that: _SignedPartialArithmetic val Returns Bool val ne [Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val Parameters that: _SignedPartialArithmetic val Returns Bool val","title":"primitive _SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#_signedpartialarithmetic","text":"[Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref","title":"_SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_SignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedPartialArithmetic/#create","text":"[Source] new val create() : _SignedPartialArithmetic val^","title":"create"},{"location":"builtin-_SignedPartialArithmetic/#returns","text":"_SignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedPartialArithmetic/#div_checked91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box div_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#rem_checked91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box rem_checked[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#div_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box div_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"div_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_3","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#rem_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box rem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"rem_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#divrem_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box divrem_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_5","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#neg_partial91t-_signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-_unsignedinteger91u93-val93","text":"[Source] fun box neg_partial[T: (_SignedInteger[T, U] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]( x: T) : T ?","title":"neg_partial[T: (_SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: _UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_5","text":"x: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_8","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_9","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedPartialArithmetic/#parameters_9","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedPartialArithmetic/#parameters_10","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/","text":"_ToString [Source] Worker type providing simple to string conversions for numbers. primitive val _ToString Constructors create [Source] new val create() : _ToString val^ Returns _ToString val^ Public Functions eq [Source] fun box eq( that: _ToString val) : Bool val Parameters that: _ToString val Returns Bool val ne [Source] fun box ne( that: _ToString val) : Bool val Parameters that: _ToString val Returns Bool val Private Functions _u64 [Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^ Parameters x: U64 val neg: Bool val Returns String iso^ _u128 [Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^ Parameters x: U128 val neg: Bool val Returns String iso^ _f64 [Source] fun box _f64( x: F64 val) : String iso^ Parameters x: F64 val Returns String iso^","title":"primitive _ToString"},{"location":"builtin-_ToString/#_tostring","text":"[Source] Worker type providing simple to string conversions for numbers. primitive val _ToString","title":"_ToString"},{"location":"builtin-_ToString/#constructors","text":"","title":"Constructors"},{"location":"builtin-_ToString/#create","text":"[Source] new val create() : _ToString val^","title":"create"},{"location":"builtin-_ToString/#returns","text":"_ToString val^","title":"Returns"},{"location":"builtin-_ToString/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ToString/#eq","text":"[Source] fun box eq( that: _ToString val) : Bool val","title":"eq"},{"location":"builtin-_ToString/#parameters","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#ne","text":"[Source] fun box ne( that: _ToString val) : Bool val","title":"ne"},{"location":"builtin-_ToString/#parameters_1","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_ToString/#_u64","text":"[Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^","title":"_u64"},{"location":"builtin-_ToString/#parameters_2","text":"x: U64 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_3","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_u128","text":"[Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^","title":"_u128"},{"location":"builtin-_ToString/#parameters_3","text":"x: U128 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_4","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_f64","text":"[Source] fun box _f64( x: F64 val) : String iso^","title":"_f64"},{"location":"builtin-_ToString/#parameters_4","text":"x: F64 val","title":"Parameters"},{"location":"builtin-_ToString/#returns_5","text":"String iso^","title":"Returns"},{"location":"builtin-_UTF32Encoder/","text":"_UTF32Encoder [Source] primitive val _UTF32Encoder Constructors create [Source] new val create() : _UTF32Encoder val^ Returns _UTF32Encoder val^ Public Functions encode [Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val) Parameters value: U32 val Returns ( USize val , U8 val , U8 val , U8 val , U8 val) eq [Source] fun box eq( that: _UTF32Encoder val) : Bool val Parameters that: _UTF32Encoder val Returns Bool val ne [Source] fun box ne( that: _UTF32Encoder val) : Bool val Parameters that: _UTF32Encoder val Returns Bool val","title":"primitive _UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#_utf32encoder","text":"[Source] primitive val _UTF32Encoder","title":"_UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UTF32Encoder/#create","text":"[Source] new val create() : _UTF32Encoder val^","title":"create"},{"location":"builtin-_UTF32Encoder/#returns","text":"_UTF32Encoder val^","title":"Returns"},{"location":"builtin-_UTF32Encoder/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UTF32Encoder/#encode","text":"[Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val)","title":"encode"},{"location":"builtin-_UTF32Encoder/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_1","text":"( USize val , U8 val , U8 val , U8 val , U8 val)","title":"Returns"},{"location":"builtin-_UTF32Encoder/#eq","text":"[Source] fun box eq( that: _UTF32Encoder val) : Bool val","title":"eq"},{"location":"builtin-_UTF32Encoder/#parameters_1","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_UTF32Encoder/#ne","text":"[Source] fun box ne( that: _UTF32Encoder val) : Bool val","title":"ne"},{"location":"builtin-_UTF32Encoder/#parameters_2","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/","text":"_UnsignedInteger[A: _UnsignedInteger [A] val] [Source] trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A] val Implements Integer [A] val Constructors create [Source] new val create( value: A) : Real[A] val^ Parameters value: A Returns Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real [B] val)] [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^ Parameters a: B Returns Real [A] val^ min_value [Source] new val min_value() : Real[A] val^ Returns Real [A] val^ max_value [Source] new val max_value() : Real[A] val^ Returns Real [A] val^ Public Functions abs [Source] fun box abs() : A Returns A shl [Source] fun box shl( y: A) : A Parameters y: A Returns A shr [Source] fun box shr( y: A) : A Parameters y: A Returns A shl_unsafe [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A Parameters y: A Returns A shr_unsafe [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A Parameters y: A Returns A rotl [Source] fun box rotl( y: A) : A Parameters y: A Returns A rotr [Source] fun box rotr( y: A) : A Parameters y: A Returns A popcount [Source] fun box popcount() : A Returns A clz [Source] fun box clz() : A Returns A ctz [Source] fun box ctz() : A Returns A clz_unsafe [Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A Returns A ctz_unsafe [Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A Returns A bitwidth [Source] fun box bitwidth() : A Returns A bytewidth [Source] fun box bytewidth() : USize val Returns USize val string [Source] fun box string() : String iso^ Returns String iso^ add_unsafe [Source] fun box add_unsafe( y: A) : A Parameters y: A Returns A sub_unsafe [Source] fun box sub_unsafe( y: A) : A Parameters y: A Returns A mul_unsafe [Source] fun box mul_unsafe( y: A) : A Parameters y: A Returns A div_unsafe [Source] fun box div_unsafe( y: A) : A Parameters y: A Returns A divrem_unsafe [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters y: A Returns (A , A) rem_unsafe [Source] fun box rem_unsafe( y: A) : A Parameters y: A Returns A add_partial [Source] fun box add_partial( y: A) : A ? Parameters y: A Returns A ? sub_partial [Source] fun box sub_partial( y: A) : A ? Parameters y: A Returns A ? mul_partial [Source] fun box mul_partial( y: A) : A ? Parameters y: A Returns A ? div_partial [Source] fun box div_partial( y: A) : A ? Parameters y: A Returns A ? rem_partial [Source] fun box rem_partial( y: A) : A ? Parameters y: A Returns A ? divrem_partial [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters y: A Returns (A , A) ? neg_unsafe [Source] fun box neg_unsafe() : A Returns A addc [Source] fun box addc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) subc [Source] fun box subc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) mulc [Source] fun box mulc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) divc [Source] fun box divc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) remc [Source] fun box remc( y: A) : (A , Bool val) Parameters y: A Returns (A , Bool val) op_and [Source] fun box op_and( y: A) : A Parameters y: A Returns A op_or [Source] fun box op_or( y: A) : A Parameters y: A Returns A op_xor [Source] fun box op_xor( y: A) : A Parameters y: A Returns A op_not [Source] fun box op_not() : A Returns A bit_reverse [Source] fun box bit_reverse() : A Returns A bswap [Source] fun box bswap() : A Returns A add [Source] fun box add( y: A) : A Parameters y: A Returns A sub [Source] fun box sub( y: A) : A Parameters y: A Returns A mul [Source] fun box mul( y: A) : A Parameters y: A Returns A div [Source] fun box div( y: A) : A Parameters y: A Returns A divrem [Source] fun box divrem( y: A) : (A , A) Parameters y: A Returns (A , A) rem [Source] fun box rem( y: A) : A Parameters y: A Returns A neg [Source] fun box neg() : A Returns A eq [Source] fun box eq( y: box- A) : Bool val Parameters y: box- A Returns Bool val ne [Source] fun box ne( y: box- A) : Bool val Parameters y: box- A Returns Bool val lt [Source] fun box lt( y: box- A) : Bool val Parameters y: box- A Returns Bool val le [Source] fun box le( y: box- A) : Bool val Parameters y: box- A Returns Bool val ge [Source] fun box ge( y: box- A) : Bool val Parameters y: box- A Returns Bool val gt [Source] fun box gt( y: box- A) : Bool val Parameters y: box- A Returns Bool val min [Source] fun box min( y: A) : A Parameters y: A Returns A max [Source] fun box max( y: A) : A Parameters y: A Returns A hash [Source] fun box hash() : USize val Returns USize val hash64 [Source] fun box hash64() : U64 val Returns U64 val i8 [Source] fun box i8() : I8 val Returns I8 val i16 [Source] fun box i16() : I16 val Returns I16 val i32 [Source] fun box i32() : I32 val Returns I32 val i64 [Source] fun box i64() : I64 val Returns I64 val i128 [Source] fun box i128() : I128 val Returns I128 val ilong [Source] fun box ilong() : ILong val Returns ILong val isize [Source] fun box isize() : ISize val Returns ISize val u8 [Source] fun box u8() : U8 val Returns U8 val u16 [Source] fun box u16() : U16 val Returns U16 val u32 [Source] fun box u32() : U32 val Returns U32 val u64 [Source] fun box u64() : U64 val Returns U64 val u128 [Source] fun box u128() : U128 val Returns U128 val ulong [Source] fun box ulong() : ULong val Returns ULong val usize [Source] fun box usize() : USize val Returns USize val f32 [Source] fun box f32() : F32 val Returns F32 val f64 [Source] fun box f64() : F64 val Returns F64 val i8_unsafe [Source] fun box i8_unsafe() : I8 val Returns I8 val i16_unsafe [Source] fun box i16_unsafe() : I16 val Returns I16 val i32_unsafe [Source] fun box i32_unsafe() : I32 val Returns I32 val i64_unsafe [Source] fun box i64_unsafe() : I64 val Returns I64 val i128_unsafe [Source] fun box i128_unsafe() : I128 val Returns I128 val ilong_unsafe [Source] fun box ilong_unsafe() : ILong val Returns ILong val isize_unsafe [Source] fun box isize_unsafe() : ISize val Returns ISize val u8_unsafe [Source] fun box u8_unsafe() : U8 val Returns U8 val u16_unsafe [Source] fun box u16_unsafe() : U16 val Returns U16 val u32_unsafe [Source] fun box u32_unsafe() : U32 val Returns U32 val u64_unsafe [Source] fun box u64_unsafe() : U64 val Returns U64 val u128_unsafe [Source] fun box u128_unsafe() : U128 val Returns U128 val ulong_unsafe [Source] fun box ulong_unsafe() : ULong val Returns ULong val usize_unsafe [Source] fun box usize_unsafe() : USize val Returns USize val f32_unsafe [Source] fun box f32_unsafe() : F32 val Returns F32 val f64_unsafe [Source] fun box f64_unsafe() : F64 val Returns F64 val compare fun box compare( that: box- A) : (Less val | Equal val | Greater val) Parameters that: box- A Returns ( Less val | Equal val | Greater val) Private Functions _value [Source] fun box _value() : A Returns A","title":"trait _UnsignedInteger"},{"location":"builtin-_UnsignedInteger/#_unsignedinteger91a-_unsignedinteger91a93-val93","text":"[Source] trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A] val","title":"_UnsignedInteger[A: _UnsignedInteger[A] val]"},{"location":"builtin-_UnsignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-_UnsignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-_UnsignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-_UnsignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-_UnsignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-_UnsignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedInteger/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-_UnsignedInteger/#returns_4","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shl","text":"[Source] fun box shl( y: A) : A","title":"shl"},{"location":"builtin-_UnsignedInteger/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shr","text":"[Source] fun box shr( y: A) : A","title":"shr"},{"location":"builtin-_UnsignedInteger/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A","title":"shl_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A","title":"shr_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rotl","text":"[Source] fun box rotl( y: A) : A","title":"rotl"},{"location":"builtin-_UnsignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_9","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rotr","text":"[Source] fun box rotr( y: A) : A","title":"rotr"},{"location":"builtin-_UnsignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_10","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#popcount","text":"[Source] fun box popcount() : A","title":"popcount"},{"location":"builtin-_UnsignedInteger/#returns_11","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#clz","text":"[Source] fun box clz() : A","title":"clz"},{"location":"builtin-_UnsignedInteger/#returns_12","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ctz","text":"[Source] fun box ctz() : A","title":"ctz"},{"location":"builtin-_UnsignedInteger/#returns_13","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#clz_unsafe","text":"[Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A","title":"clz_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_14","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ctz_unsafe","text":"[Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A","title":"ctz_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_15","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : A","title":"bitwidth"},{"location":"builtin-_UnsignedInteger/#returns_16","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-_UnsignedInteger/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-_UnsignedInteger/#returns_18","text":"String iso^","title":"Returns"},{"location":"builtin-_UnsignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_21","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_23","text":"(A , A)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-_UnsignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-_UnsignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-_UnsignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-_UnsignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-_UnsignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_28","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-_UnsignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_29","text":"A ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-_UnsignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_30","text":"(A , A) ?","title":"Returns"},{"location":"builtin-_UnsignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_31","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-_UnsignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_32","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-_UnsignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_33","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-_UnsignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-_UnsignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_35","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-_UnsignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_36","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-_UnsignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_37","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-_UnsignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_38","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-_UnsignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-_UnsignedInteger/#returns_40","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-_UnsignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-_UnsignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-_UnsignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-_UnsignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-_UnsignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-_UnsignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-_UnsignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_47","text":"(A , A)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-_UnsignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-_UnsignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#eq","text":"[Source] fun box eq( y: box- A) : Bool val","title":"eq"},{"location":"builtin-_UnsignedInteger/#parameters_34","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_50","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ne","text":"[Source] fun box ne( y: box- A) : Bool val","title":"ne"},{"location":"builtin-_UnsignedInteger/#parameters_35","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_51","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#lt","text":"[Source] fun box lt( y: box- A) : Bool val","title":"lt"},{"location":"builtin-_UnsignedInteger/#parameters_36","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_52","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#le","text":"[Source] fun box le( y: box- A) : Bool val","title":"le"},{"location":"builtin-_UnsignedInteger/#parameters_37","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_53","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ge","text":"[Source] fun box ge( y: box- A) : Bool val","title":"ge"},{"location":"builtin-_UnsignedInteger/#parameters_38","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_54","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#gt","text":"[Source] fun box gt( y: box- A) : Bool val","title":"gt"},{"location":"builtin-_UnsignedInteger/#parameters_39","text":"y: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_55","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-_UnsignedInteger/#parameters_40","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_56","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-_UnsignedInteger/#parameters_41","text":"y: A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_57","text":"A","title":"Returns"},{"location":"builtin-_UnsignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-_UnsignedInteger/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-_UnsignedInteger/#returns_59","text":"U64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_UnsignedInteger/#returns_60","text":"I8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_UnsignedInteger/#returns_61","text":"I16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_UnsignedInteger/#returns_62","text":"I32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_UnsignedInteger/#returns_63","text":"I64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_UnsignedInteger/#returns_64","text":"I128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_UnsignedInteger/#returns_65","text":"ILong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_UnsignedInteger/#returns_66","text":"ISize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_UnsignedInteger/#returns_67","text":"U8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_UnsignedInteger/#returns_68","text":"U16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_UnsignedInteger/#returns_69","text":"U32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_UnsignedInteger/#returns_70","text":"U64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_UnsignedInteger/#returns_71","text":"U128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_UnsignedInteger/#returns_72","text":"ULong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_UnsignedInteger/#returns_73","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_UnsignedInteger/#returns_74","text":"F32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_UnsignedInteger/#returns_75","text":"F64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_76","text":"I8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_77","text":"I16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_78","text":"I32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_79","text":"I64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_80","text":"I128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_81","text":"ILong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_82","text":"ISize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_83","text":"U8 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_84","text":"U16 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_85","text":"U32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_86","text":"U64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_87","text":"U128 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_88","text":"ULong val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_89","text":"USize val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_90","text":"F32 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_UnsignedInteger/#returns_91","text":"F64 val","title":"Returns"},{"location":"builtin-_UnsignedInteger/#compare","text":"fun box compare( that: box- A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-_UnsignedInteger/#parameters_42","text":"that: box- A","title":"Parameters"},{"location":"builtin-_UnsignedInteger/#returns_92","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-_UnsignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_UnsignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-_UnsignedInteger/#returns_93","text":"A","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/","text":"_UnsignedPartialArithmetic [Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref Implements _PartialArithmetic ref Constructors create [Source] new val create() : _UnsignedPartialArithmetic val^ Returns _UnsignedPartialArithmetic val^ Public Functions div_checked[T: _UnsignedInteger [T] val] [Source] fun box div_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) rem_checked[T: _UnsignedInteger [T] val] [Source] fun box rem_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters x: T y: T Returns (T , Bool val) div_partial[T: _UnsignedInteger [T] val] [Source] fun box div_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? rem_partial[T: _UnsignedInteger [T] val] [Source] fun box rem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? divrem_partial[T: _UnsignedInteger [T] val] [Source] fun box divrem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , T) ? Parameters x: T y: T Returns (T , T) ? add_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? sub_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? mul_partial[T: ( Integer [T] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] [Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters x: T y: T Returns T ? eq [Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val Parameters that: _UnsignedPartialArithmetic val Returns Bool val ne [Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val Parameters that: _UnsignedPartialArithmetic val Returns Bool val","title":"primitive _UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#_unsignedpartialarithmetic","text":"[Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref","title":"_UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_UnsignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedPartialArithmetic/#create","text":"[Source] new val create() : _UnsignedPartialArithmetic val^","title":"create"},{"location":"builtin-_UnsignedPartialArithmetic/#returns","text":"_UnsignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedPartialArithmetic/#div_checked91t-_unsignedinteger91t93-val93","text":"[Source] fun box div_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_checked91t-_unsignedinteger91t93-val93","text":"[Source] fun box rem_checked[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#div_partial91t-_unsignedinteger91t93-val93","text":"[Source] fun box div_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"div_partial[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_3","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_partial91t-_unsignedinteger91t93-val93","text":"[Source] fun box rem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"rem_partial[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#divrem_partial91t-_unsignedinteger91t93-val93","text":"[Source] fun box divrem_partial[T: _UnsignedInteger[T] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: _UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_5","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_5","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_8","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_9","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"collections--index/","text":"No package doc string provided for collections. Public Types primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags Private Types primitive _MapEmpty primitive _MapDeleted","title":"Package"},{"location":"collections--index/#public-types","text":"primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags","title":"Public Types"},{"location":"collections--index/#private-types","text":"primitive _MapEmpty primitive _MapDeleted","title":"Private Types"},{"location":"collections-Flag/","text":"Flag[A: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [A] val)] [Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)] Public Functions value [Source] fun box value() : A Returns A","title":"interface Flag"},{"location":"collections-Flag/#flag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[A] val)]","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"collections-Flag/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flag/#value","text":"[Source] fun box value() : A","title":"value"},{"location":"collections-Flag/#returns","text":"A","title":"Returns"},{"location":"collections-Flags/","text":"Flags[A: Flag [B] val, optional B: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer [B] val)] [Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 = 1 primitive AVX fun value(): U64 = 2 primitive RDTSCP fun value(): U64 = 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[B] val)] is Comparable[Flags[A, B] box] ref Implements Comparable [ Flags [A, B] box] ref Constructors create [Source] new iso create() : Flags[A, B] iso^ Returns Flags [A, B] iso^ Public Functions value [Source] Returns the bit encoding of the set flags. fun box value() : B Returns B apply [Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val Parameters flag: A Returns Bool val all [Source] Sets all bits, including undefined flags. fun ref all() : None val Returns None val clear [Source] Unsets all flags. fun ref clear() : None val Returns None val set [Source] Sets the flag. fun ref set( flag: A) : None val Parameters flag: A Returns None val unset [Source] Unsets the flag. fun ref unset( flag: A) : None val Parameters flag: A Returns None val flip [Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val Parameters flag: A Returns None val union [Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val intersect [Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val difference [Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val remove [Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val Parameters that: Flags [A, B] box Returns None val add [Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^ Parameters flag: A Returns Flags [A, B] iso^ sub [Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^ Parameters flag: A Returns Flags [A, B] iso^ op_or [Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ op_and [Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ op_xor [Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ without [Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters that: Flags [A, B] box Returns Flags [A, B] iso^ clone [Source] Create a clone. fun box clone() : Flags[A, B] iso^ Returns Flags [A, B] iso^ eq [Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val lt [Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val le [Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val gt [Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val ge [Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val compare [Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val) Parameters that: Flags [A, B] box Returns ( Less val | Equal val | Greater val) ne [Source] fun box ne( that: Flags[A, B] box) : Bool val Parameters that: Flags [A, B] box Returns Bool val","title":"class Flags"},{"location":"collections-Flags/#flags91a-flag91b93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b93-val93","text":"[Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 = 1 primitive AVX fun value(): U64 = 2 primitive RDTSCP fun value(): U64 = 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Integer[B] val)] is Comparable[Flags[A, B] box] ref","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"},{"location":"collections-Flags/#implements","text":"Comparable [ Flags [A, B] box] ref","title":"Implements"},{"location":"collections-Flags/#constructors","text":"","title":"Constructors"},{"location":"collections-Flags/#create","text":"[Source] new iso create() : Flags[A, B] iso^","title":"create"},{"location":"collections-Flags/#returns","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flags/#value","text":"[Source] Returns the bit encoding of the set flags. fun box value() : B","title":"value"},{"location":"collections-Flags/#returns_1","text":"B","title":"Returns"},{"location":"collections-Flags/#apply","text":"[Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val","title":"apply"},{"location":"collections-Flags/#parameters","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#all","text":"[Source] Sets all bits, including undefined flags. fun ref all() : None val","title":"all"},{"location":"collections-Flags/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Flags/#clear","text":"[Source] Unsets all flags. fun ref clear() : None val","title":"clear"},{"location":"collections-Flags/#returns_4","text":"None val","title":"Returns"},{"location":"collections-Flags/#set","text":"[Source] Sets the flag. fun ref set( flag: A) : None val","title":"set"},{"location":"collections-Flags/#parameters_1","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_5","text":"None val","title":"Returns"},{"location":"collections-Flags/#unset","text":"[Source] Unsets the flag. fun ref unset( flag: A) : None val","title":"unset"},{"location":"collections-Flags/#parameters_2","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Flags/#flip","text":"[Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val","title":"flip"},{"location":"collections-Flags/#parameters_3","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_7","text":"None val","title":"Returns"},{"location":"collections-Flags/#union","text":"[Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val","title":"union"},{"location":"collections-Flags/#parameters_4","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_8","text":"None val","title":"Returns"},{"location":"collections-Flags/#intersect","text":"[Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val","title":"intersect"},{"location":"collections-Flags/#parameters_5","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_9","text":"None val","title":"Returns"},{"location":"collections-Flags/#difference","text":"[Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val","title":"difference"},{"location":"collections-Flags/#parameters_6","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_10","text":"None val","title":"Returns"},{"location":"collections-Flags/#remove","text":"[Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val","title":"remove"},{"location":"collections-Flags/#parameters_7","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_11","text":"None val","title":"Returns"},{"location":"collections-Flags/#add","text":"[Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^","title":"add"},{"location":"collections-Flags/#parameters_8","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_12","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#sub","text":"[Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^","title":"sub"},{"location":"collections-Flags/#parameters_9","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_13","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_or","text":"[Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_or"},{"location":"collections-Flags/#parameters_10","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_14","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_and","text":"[Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_and"},{"location":"collections-Flags/#parameters_11","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_15","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_xor","text":"[Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_xor"},{"location":"collections-Flags/#parameters_12","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_16","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#without","text":"[Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^","title":"without"},{"location":"collections-Flags/#parameters_13","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_17","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#clone","text":"[Source] Create a clone. fun box clone() : Flags[A, B] iso^","title":"clone"},{"location":"collections-Flags/#returns_18","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#eq","text":"[Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val","title":"eq"},{"location":"collections-Flags/#parameters_14","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_19","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#lt","text":"[Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val","title":"lt"},{"location":"collections-Flags/#parameters_15","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#le","text":"[Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val","title":"le"},{"location":"collections-Flags/#parameters_16","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#gt","text":"[Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val","title":"gt"},{"location":"collections-Flags/#parameters_17","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#ge","text":"[Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val","title":"ge"},{"location":"collections-Flags/#parameters_18","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#compare","text":"[Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-Flags/#parameters_19","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_24","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Flags/#ne","text":"[Source] fun box ne( that: Flags[A, B] box) : Bool val","title":"ne"},{"location":"collections-Flags/#parameters_20","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/","text":"HashByteSeq [Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val Implements HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val Constructors create [Source] new val create() : HashByteSeq val^ Returns HashByteSeq val^ Public Functions hash [Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val Parameters x: ( String box | Array [ U8 val] box) Returns USize val hash64 [Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val Parameters x: ( String box | Array [ U8 val] box) Returns U64 val eq [Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val Parameters x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box) Returns Bool val ne [Source] fun box ne( that: HashByteSeq val) : Bool val Parameters that: HashByteSeq val Returns Bool val","title":"primitive HashByteSeq"},{"location":"collections-HashByteSeq/#hashbyteseq","text":"[Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val","title":"HashByteSeq"},{"location":"collections-HashByteSeq/#implements","text":"HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val","title":"Implements"},{"location":"collections-HashByteSeq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashByteSeq/#create","text":"[Source] new val create() : HashByteSeq val^","title":"create"},{"location":"collections-HashByteSeq/#returns","text":"HashByteSeq val^","title":"Returns"},{"location":"collections-HashByteSeq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashByteSeq/#hash","text":"[Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val","title":"hash"},{"location":"collections-HashByteSeq/#parameters","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashByteSeq/#hash64","text":"[Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val","title":"hash64"},{"location":"collections-HashByteSeq/#parameters_1","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashByteSeq/#eq","text":"[Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val","title":"eq"},{"location":"collections-HashByteSeq/#parameters_2","text":"x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/#ne","text":"[Source] fun box ne( that: HashByteSeq val) : Bool val","title":"ne"},{"location":"collections-HashByteSeq/#parameters_3","text":"that: HashByteSeq val","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/","text":"HashEq[A: ( Hashable #read Equatable [A] #read)] [Source] primitive val HashEq[A: (Hashable #read Equatable[A] #read)] is HashFunction[A] val Implements HashFunction [A] val Constructors create [Source] new val create() : HashEq[A] val^ Returns HashEq [A] val^ Public Functions hash [Source] Use the hash function from the type parameter. fun box hash( x: box- A) : USize val Parameters x: box- A Returns USize val eq [Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val Parameters x: box- A y: box- A Returns Bool val ne [Source] fun box ne( that: HashEq[A] val) : Bool val Parameters that: HashEq [A] val Returns Bool val","title":"primitive HashEq"},{"location":"collections-HashEq/#hasheq91a-hashable-read-equatable91a93-read93","text":"[Source] primitive val HashEq[A: (Hashable #read Equatable[A] #read)] is HashFunction[A] val","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq/#implements","text":"HashFunction [A] val","title":"Implements"},{"location":"collections-HashEq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq/#create","text":"[Source] new val create() : HashEq[A] val^","title":"create"},{"location":"collections-HashEq/#returns","text":"HashEq [A] val^","title":"Returns"},{"location":"collections-HashEq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq/#hash","text":"[Source] Use the hash function from the type parameter. fun box hash( x: box- A) : USize val","title":"hash"},{"location":"collections-HashEq/#parameters","text":"x: box- A","title":"Parameters"},{"location":"collections-HashEq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashEq/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val","title":"eq"},{"location":"collections-HashEq/#parameters_1","text":"x: box- A y: box- A","title":"Parameters"},{"location":"collections-HashEq/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/#ne","text":"[Source] fun box ne( that: HashEq[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq/#parameters_2","text":"that: HashEq [A] val","title":"Parameters"},{"location":"collections-HashEq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/","text":"HashEq64[A: ( Hashable64 #read Equatable [A] #read)] [Source] primitive val HashEq64[A: (Hashable64 #read Equatable[A] #read)] is HashFunction64[A] val Implements HashFunction64 [A] val Constructors create [Source] new val create() : HashEq64[A] val^ Returns HashEq64 [A] val^ Public Functions hash64 [Source] Use the hash function from the type parameter. fun box hash64( x: box- A) : U64 val Parameters x: box- A Returns U64 val eq [Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val Parameters x: box- A y: box- A Returns Bool val ne [Source] fun box ne( that: HashEq64[A] val) : Bool val Parameters that: HashEq64 [A] val Returns Bool val","title":"primitive HashEq64"},{"location":"collections-HashEq64/#hasheq6491a-hashable64-read-equatable91a93-read93","text":"[Source] primitive val HashEq64[A: (Hashable64 #read Equatable[A] #read)] is HashFunction64[A] val","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq64/#implements","text":"HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashEq64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq64/#create","text":"[Source] new val create() : HashEq64[A] val^","title":"create"},{"location":"collections-HashEq64/#returns","text":"HashEq64 [A] val^","title":"Returns"},{"location":"collections-HashEq64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq64/#hash64","text":"[Source] Use the hash function from the type parameter. fun box hash64( x: box- A) : U64 val","title":"hash64"},{"location":"collections-HashEq64/#parameters","text":"x: box- A","title":"Parameters"},{"location":"collections-HashEq64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashEq64/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box- A, y: box- A) : Bool val","title":"eq"},{"location":"collections-HashEq64/#parameters_1","text":"x: box- A y: box- A","title":"Parameters"},{"location":"collections-HashEq64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/#ne","text":"[Source] fun box ne( that: HashEq64[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq64/#parameters_2","text":"that: HashEq64 [A] val","title":"Parameters"},{"location":"collections-HashEq64/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction/","text":"HashFunction[A: A] [Source] A pluggable hash function. interface val HashFunction[A: A] Constructors create [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^ Returns HashFunction [A] val^ Public Functions hash [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box- A!) : USize val Parameters x: box- A! Returns USize val eq [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val Parameters x: box- A! y: box- A! Returns Bool val","title":"interface HashFunction"},{"location":"collections-HashFunction/#hashfunction91a-a93","text":"[Source] A pluggable hash function. interface val HashFunction[A: A]","title":"HashFunction[A: A]"},{"location":"collections-HashFunction/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^","title":"create"},{"location":"collections-HashFunction/#returns","text":"HashFunction [A] val^","title":"Returns"},{"location":"collections-HashFunction/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction/#hash","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box- A!) : USize val","title":"hash"},{"location":"collections-HashFunction/#parameters","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashFunction/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val","title":"eq"},{"location":"collections-HashFunction/#parameters_1","text":"x: box- A! y: box- A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction64/","text":"HashFunction64[A: A] [Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A] Constructors create [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^ Returns HashFunction64 [A] val^ Public Functions hash64 [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box- A!) : U64 val Parameters x: box- A! Returns U64 val eq [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val Parameters x: box- A! y: box- A! Returns Bool val","title":"interface HashFunction64"},{"location":"collections-HashFunction64/#hashfunction6491a-a93","text":"[Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A]","title":"HashFunction64[A: A]"},{"location":"collections-HashFunction64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction64/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^","title":"create"},{"location":"collections-HashFunction64/#returns","text":"HashFunction64 [A] val^","title":"Returns"},{"location":"collections-HashFunction64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction64/#hash64","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box- A!) : U64 val","title":"hash64"},{"location":"collections-HashFunction64/#parameters","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashFunction64/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box- A!, y: box- A!) : Bool val","title":"eq"},{"location":"collections-HashFunction64/#parameters_1","text":"x: box- A! y: box- A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/","text":"HashIs[A: A] [Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val Implements HashFunction [A] val HashFunction64 [A] val Constructors create [Source] new val create() : HashIs[A] val^ Returns HashIs [A] val^ Public Functions hash [Source] Hash the identity rather than the contents. fun box hash( x: box- A!) : USize val Parameters x: box- A! Returns USize val hash64 [Source] Hash the identity rather than the contents. fun box hash64( x: box- A!) : U64 val Parameters x: box- A! Returns U64 val eq [Source] Determine equality by identity rather than structurally. fun box eq( x: box- A!, y: box- A!) : Bool val Parameters x: box- A! y: box- A! Returns Bool val ne [Source] fun box ne( that: HashIs[A] val) : Bool val Parameters that: HashIs [A] val Returns Bool val","title":"primitive HashIs"},{"location":"collections-HashIs/#hashis91a-a93","text":"[Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val","title":"HashIs[A: A]"},{"location":"collections-HashIs/#implements","text":"HashFunction [A] val HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashIs/#constructors","text":"","title":"Constructors"},{"location":"collections-HashIs/#create","text":"[Source] new val create() : HashIs[A] val^","title":"create"},{"location":"collections-HashIs/#returns","text":"HashIs [A] val^","title":"Returns"},{"location":"collections-HashIs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashIs/#hash","text":"[Source] Hash the identity rather than the contents. fun box hash( x: box- A!) : USize val","title":"hash"},{"location":"collections-HashIs/#parameters","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashIs/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashIs/#hash64","text":"[Source] Hash the identity rather than the contents. fun box hash64( x: box- A!) : U64 val","title":"hash64"},{"location":"collections-HashIs/#parameters_1","text":"x: box- A!","title":"Parameters"},{"location":"collections-HashIs/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashIs/#eq","text":"[Source] Determine equality by identity rather than structurally. fun box eq( x: box- A!, y: box- A!) : Bool val","title":"eq"},{"location":"collections-HashIs/#parameters_2","text":"x: box- A! y: box- A!","title":"Parameters"},{"location":"collections-HashIs/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/#ne","text":"[Source] fun box ne( that: HashIs[A] val) : Bool val","title":"ne"},{"location":"collections-HashIs/#parameters_3","text":"that: HashIs [A] val","title":"Parameters"},{"location":"collections-HashIs/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/","text":"HashMap[K: K, V: V, H: HashFunction [K] val] [Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val] Constructors create [Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = seq) : HashMap[K, V, H] ref^ Parameters prealloc: USize val = seq Returns HashMap [K, V, H] ref^ Public Functions size [Source] The number of items in the map. fun box size() : USize val Returns USize val space [Source] The available space in the map. Resize will happen when size / space = 0.75. fun box space() : USize val Returns USize val apply [Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box- K!) : this- V ? Parameters key: box- K! Returns this- V ? update [Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val) Parameters key: K value: V Returns (V^ | None val) upsert [Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(x, y) = x - y }) This changes the value associated with \"test\" to -2. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(x, y) = x - y }) then \"new-key\" is added to the map with a value of -4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V ? Parameters key: K value: V f: {(V, V): V^}[K, V, H] box Returns V ? insert [Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V ? Parameters key: K value: V Returns V ? insert_if_absent [Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V ? Parameters key: K value: V Returns V ? remove [Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box- K!) : (K^ , V^) ? Parameters key: box- K! Returns (K^ , V^) ? get_or_else [Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box- K!, alt: this- V) : this- V Parameters key: box- K! alt: this- V Returns this- V contains [Source] Checks whether the map contains the key k fun box contains( k: box- K!) : Bool val Parameters k: box- K! Returns Bool val concat [Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val Parameters iter: Iterator [(K^ , V^)] ref Returns None val add[optional H2: HashFunction [this- K!] val] [Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^ Parameters key: this- K! value: this- V! Returns HashMap [this- K!, this- V!, H2] ref^ sub[optional H2: HashFunction [this- K!] val] [Source] This without the given key. fun box sub[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^ Parameters key: this- K! value: this- V! Returns HashMap [this- K!, this- V!, H2] ref^ next_index [Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ? Parameters prev: USize val = seq Returns USize val ? index [Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this- K , this- V) ? Parameters i: USize val Returns (this- K , this- V) ? compact [Source] Minimise the memory used for the map. fun ref compact() : None val Returns None val clone[optional H2: HashFunction [this- K!] val] [Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this- K!] val]() : HashMap[this- K!, this- V!, H2] ref^ Returns HashMap [this- K!, this- V!, H2] ref^ clear [Source] Remove all entries. fun ref clear() : None val Returns None val keys [Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this- HashMap[K, V, H] ref] ref^ Returns MapKeys [K, V, H, this- HashMap [K, V, H] ref] ref^ values [Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this- HashMap[K, V, H] ref] ref^ Returns MapValues [K, V, H, this- HashMap [K, V, H] ref] ref^ pairs [Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this- HashMap[K, V, H] ref] ref^ Returns MapPairs [K, V, H, this- HashMap [K, V, H] ref] ref^ Private Functions _search [Source] Return a slot number and whether or not it's currently occupied. fun box _search( key: box- K!) : (USize val , Bool val) Parameters key: box- K! Returns ( USize val , Bool val) _resize [Source] Change the available space. fun ref _resize( len: USize val) : None val Parameters len: USize val Returns None val","title":"class HashMap"},{"location":"collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93","text":"[Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val]","title":"HashMap[K: K, V: V, H: HashFunction[K] val]"},{"location":"collections-HashMap/#constructors","text":"","title":"Constructors"},{"location":"collections-HashMap/#create","text":"[Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = seq) : HashMap[K, V, H] ref^","title":"create"},{"location":"collections-HashMap/#parameters","text":"prealloc: USize val = seq","title":"Parameters"},{"location":"collections-HashMap/#returns","text":"HashMap [K, V, H] ref^","title":"Returns"},{"location":"collections-HashMap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashMap/#size","text":"[Source] The number of items in the map. fun box size() : USize val","title":"size"},{"location":"collections-HashMap/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#space","text":"[Source] The available space in the map. Resize will happen when size / space = 0.75. fun box space() : USize val","title":"space"},{"location":"collections-HashMap/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#apply","text":"[Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box- K!) : this- V ?","title":"apply"},{"location":"collections-HashMap/#parameters_1","text":"key: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_3","text":"this- V ?","title":"Returns"},{"location":"collections-HashMap/#update","text":"[Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val)","title":"update"},{"location":"collections-HashMap/#parameters_2","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_4","text":"(V^ | None val)","title":"Returns"},{"location":"collections-HashMap/#upsert","text":"[Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(x, y) = x - y }) This changes the value associated with \"test\" to -2. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(x, y) = x - y }) then \"new-key\" is added to the map with a value of -4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V ?","title":"upsert"},{"location":"collections-HashMap/#parameters_3","text":"key: K value: V f: {(V, V): V^}[K, V, H] box","title":"Parameters"},{"location":"collections-HashMap/#returns_5","text":"V ?","title":"Returns"},{"location":"collections-HashMap/#insert","text":"[Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V ?","title":"insert"},{"location":"collections-HashMap/#parameters_4","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_6","text":"V ?","title":"Returns"},{"location":"collections-HashMap/#insert_if_absent","text":"[Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V ?","title":"insert_if_absent"},{"location":"collections-HashMap/#parameters_5","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_7","text":"V ?","title":"Returns"},{"location":"collections-HashMap/#remove","text":"[Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box- K!) : (K^ , V^) ?","title":"remove"},{"location":"collections-HashMap/#parameters_6","text":"key: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_8","text":"(K^ , V^) ?","title":"Returns"},{"location":"collections-HashMap/#get_or_else","text":"[Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box- K!, alt: this- V) : this- V","title":"get_or_else"},{"location":"collections-HashMap/#parameters_7","text":"key: box- K! alt: this- V","title":"Parameters"},{"location":"collections-HashMap/#returns_9","text":"this- V","title":"Returns"},{"location":"collections-HashMap/#contains","text":"[Source] Checks whether the map contains the key k fun box contains( k: box- K!) : Bool val","title":"contains"},{"location":"collections-HashMap/#parameters_8","text":"k: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_10","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/#concat","text":"[Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val","title":"concat"},{"location":"collections-HashMap/#parameters_9","text":"iter: Iterator [(K^ , V^)] ref","title":"Parameters"},{"location":"collections-HashMap/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashMap/#add91optional-h2-hashfunction91this-k93-val93","text":"[Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^","title":"add[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_10","text":"key: this- K! value: this- V!","title":"Parameters"},{"location":"collections-HashMap/#returns_12","text":"HashMap [this- K!, this- V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#sub91optional-h2-hashfunction91this-k93-val93","text":"[Source] This without the given key. fun box sub[optional H2: HashFunction[this- K!] val]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2] ref^","title":"sub[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_11","text":"key: this- K! value: this- V!","title":"Parameters"},{"location":"collections-HashMap/#returns_13","text":"HashMap [this- K!, this- V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#next_index","text":"[Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ?","title":"next_index"},{"location":"collections-HashMap/#parameters_12","text":"prev: USize val = seq","title":"Parameters"},{"location":"collections-HashMap/#returns_14","text":"USize val ?","title":"Returns"},{"location":"collections-HashMap/#index","text":"[Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this- K , this- V) ?","title":"index"},{"location":"collections-HashMap/#parameters_13","text":"i: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_15","text":"(this- K , this- V) ?","title":"Returns"},{"location":"collections-HashMap/#compact","text":"[Source] Minimise the memory used for the map. fun ref compact() : None val","title":"compact"},{"location":"collections-HashMap/#returns_16","text":"None val","title":"Returns"},{"location":"collections-HashMap/#clone91optional-h2-hashfunction91this-k93-val93","text":"[Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this- K!] val]() : HashMap[this- K!, this- V!, H2] ref^","title":"clone[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#returns_17","text":"HashMap [this- K!, this- V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#clear","text":"[Source] Remove all entries. fun ref clear() : None val","title":"clear"},{"location":"collections-HashMap/#returns_18","text":"None val","title":"Returns"},{"location":"collections-HashMap/#keys","text":"[Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this- HashMap[K, V, H] ref] ref^","title":"keys"},{"location":"collections-HashMap/#returns_19","text":"MapKeys [K, V, H, this- HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#values","text":"[Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this- HashMap[K, V, H] ref] ref^","title":"values"},{"location":"collections-HashMap/#returns_20","text":"MapValues [K, V, H, this- HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#pairs","text":"[Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this- HashMap[K, V, H] ref] ref^","title":"pairs"},{"location":"collections-HashMap/#returns_21","text":"MapPairs [K, V, H, this- HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#private-functions","text":"","title":"Private Functions"},{"location":"collections-HashMap/#_search","text":"[Source] Return a slot number and whether or not it's currently occupied. fun box _search( key: box- K!) : (USize val , Bool val)","title":"_search"},{"location":"collections-HashMap/#parameters_14","text":"key: box- K!","title":"Parameters"},{"location":"collections-HashMap/#returns_22","text":"( USize val , Bool val)","title":"Returns"},{"location":"collections-HashMap/#_resize","text":"[Source] Change the available space. fun ref _resize( len: USize val) : None val","title":"_resize"},{"location":"collections-HashMap/#parameters_15","text":"len: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_23","text":"None val","title":"Returns"},{"location":"collections-HashSet/","text":"HashSet[A: A, H: HashFunction [A!] val] [Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref Implements Comparable [ HashSet [A, H] box] ref Constructors create [Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = seq) : HashSet[A, H] ref^ Parameters prealloc: USize val = seq Returns HashSet [A, H] ref^ Public Functions size [Source] The number of items in the set. fun box size() : USize val Returns USize val space [Source] The available space in the set. fun box space() : USize val Returns USize val apply [Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box- A!) : this- A ? Parameters value: box- A! Returns this- A ? contains [Source] Checks whether the set contains the value. fun box contains( value: box- A!) : Bool val Parameters value: box- A! Returns Bool val clear [Source] Remove all elements from the set. fun ref clear() : None val Returns None val set [Source] Add a value to the set. fun ref set( value: A) : None val Parameters value: A Returns None val unset [Source] Remove a value from the set. fun ref unset( value: box- A!) : None val Parameters value: box- A! Returns None val extract [Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box- A!) : A^ ? Parameters value: box- A! Returns A^ ? union [Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val Parameters that: Iterator [A^] ref Returns None val intersect[optional K: HashFunction [box- A!] val] [Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box- A!] val]( that: HashSet[box- A!, K] ref) : None val Parameters that: HashSet [box- A!, K] ref Returns None val difference [Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val Parameters that: Iterator [A^] ref Returns None val remove [Source] Remove everything that is in that. fun ref remove( that: Iterator[box- A!] ref) : None val Parameters that: Iterator [box- A!] ref Returns None val add[optional K: HashFunction [this- A!] val] [Source] Add a value to the set. fun box add[optional K: HashFunction[this- A!] val]( value: this- A!) : HashSet[this- A!, K] ref^ Parameters value: this- A! Returns HashSet [this- A!, K] ref^ sub[optional K: HashFunction [this- A!] val] [Source] Remove a value from the set. fun box sub[optional K: HashFunction[this- A!] val]( value: box- this- A!) : HashSet[this- A!, K] ref^ Parameters value: box- this- A! Returns HashSet [this- A!, K] ref^ op_or[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ op_and[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ op_xor[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ without[optional K: HashFunction [this- A!] val] [Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^ Parameters that: this- HashSet [A, H] ref Returns HashSet [this- A!, K] ref^ clone[optional K: HashFunction [this- A!] val] [Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this- A!] val]() : HashSet[this- A!, K] ref^ Returns HashSet [this- A!, K] ref^ eq [Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val ne [Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val lt [Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val le [Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val gt [Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val ge [Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val Parameters that: HashSet [A, H] box Returns Bool val next_index [Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ? Parameters prev: USize val = seq Returns USize val ? index [Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? values [Source] Return an iterator over the values. fun box values() : SetValues[A, H, this- HashSet[A, H] ref] ref^ Returns SetValues [A, H, this- HashSet [A, H] ref] ref^ compare [Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val) Parameters that: HashSet [A, H] box Returns ( Less val | Equal val | Greater val)","title":"class HashSet"},{"location":"collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93","text":"[Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref","title":"HashSet[A: A, H: HashFunction[A!] val]"},{"location":"collections-HashSet/#implements","text":"Comparable [ HashSet [A, H] box] ref","title":"Implements"},{"location":"collections-HashSet/#constructors","text":"","title":"Constructors"},{"location":"collections-HashSet/#create","text":"[Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = seq) : HashSet[A, H] ref^","title":"create"},{"location":"collections-HashSet/#parameters","text":"prealloc: USize val = seq","title":"Parameters"},{"location":"collections-HashSet/#returns","text":"HashSet [A, H] ref^","title":"Returns"},{"location":"collections-HashSet/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashSet/#size","text":"[Source] The number of items in the set. fun box size() : USize val","title":"size"},{"location":"collections-HashSet/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#space","text":"[Source] The available space in the set. fun box space() : USize val","title":"space"},{"location":"collections-HashSet/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#apply","text":"[Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box- A!) : this- A ?","title":"apply"},{"location":"collections-HashSet/#parameters_1","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_3","text":"this- A ?","title":"Returns"},{"location":"collections-HashSet/#contains","text":"[Source] Checks whether the set contains the value. fun box contains( value: box- A!) : Bool val","title":"contains"},{"location":"collections-HashSet/#parameters_2","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#clear","text":"[Source] Remove all elements from the set. fun ref clear() : None val","title":"clear"},{"location":"collections-HashSet/#returns_5","text":"None val","title":"Returns"},{"location":"collections-HashSet/#set","text":"[Source] Add a value to the set. fun ref set( value: A) : None val","title":"set"},{"location":"collections-HashSet/#parameters_3","text":"value: A","title":"Parameters"},{"location":"collections-HashSet/#returns_6","text":"None val","title":"Returns"},{"location":"collections-HashSet/#unset","text":"[Source] Remove a value from the set. fun ref unset( value: box- A!) : None val","title":"unset"},{"location":"collections-HashSet/#parameters_4","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_7","text":"None val","title":"Returns"},{"location":"collections-HashSet/#extract","text":"[Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box- A!) : A^ ?","title":"extract"},{"location":"collections-HashSet/#parameters_5","text":"value: box- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_8","text":"A^ ?","title":"Returns"},{"location":"collections-HashSet/#union","text":"[Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val","title":"union"},{"location":"collections-HashSet/#parameters_6","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_9","text":"None val","title":"Returns"},{"location":"collections-HashSet/#intersect91optional-k-hashfunction91box-a93-val93","text":"[Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box- A!] val]( that: HashSet[box- A!, K] ref) : None val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_7","text":"that: HashSet [box- A!, K] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_10","text":"None val","title":"Returns"},{"location":"collections-HashSet/#difference","text":"[Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val","title":"difference"},{"location":"collections-HashSet/#parameters_8","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashSet/#remove","text":"[Source] Remove everything that is in that. fun ref remove( that: Iterator[box- A!] ref) : None val","title":"remove"},{"location":"collections-HashSet/#parameters_9","text":"that: Iterator [box- A!] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_12","text":"None val","title":"Returns"},{"location":"collections-HashSet/#add91optional-k-hashfunction91this-a93-val93","text":"[Source] Add a value to the set. fun box add[optional K: HashFunction[this- A!] val]( value: this- A!) : HashSet[this- A!, K] ref^","title":"add[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_10","text":"value: this- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_13","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#sub91optional-k-hashfunction91this-a93-val93","text":"[Source] Remove a value from the set. fun box sub[optional K: HashFunction[this- A!] val]( value: box- this- A!) : HashSet[this- A!, K] ref^","title":"sub[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_11","text":"value: box- this- A!","title":"Parameters"},{"location":"collections-HashSet/#returns_14","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_or91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"op_or[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_12","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_15","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_and91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"op_and[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_13","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_16","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_xor91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_14","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_17","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#without91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this- A!] val]( that: this- HashSet[A, H] ref) : HashSet[this- A!, K] ref^","title":"without[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_15","text":"that: this- HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_18","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#clone91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this- A!] val]() : HashSet[this- A!, K] ref^","title":"clone[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#returns_19","text":"HashSet [this- A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#eq","text":"[Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val","title":"eq"},{"location":"collections-HashSet/#parameters_16","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ne","text":"[Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val","title":"ne"},{"location":"collections-HashSet/#parameters_17","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#lt","text":"[Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val","title":"lt"},{"location":"collections-HashSet/#parameters_18","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#le","text":"[Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val","title":"le"},{"location":"collections-HashSet/#parameters_19","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#gt","text":"[Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val","title":"gt"},{"location":"collections-HashSet/#parameters_20","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_24","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ge","text":"[Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val","title":"ge"},{"location":"collections-HashSet/#parameters_21","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#next_index","text":"[Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = seq) : USize val ?","title":"next_index"},{"location":"collections-HashSet/#parameters_22","text":"prev: USize val = seq","title":"Parameters"},{"location":"collections-HashSet/#returns_26","text":"USize val ?","title":"Returns"},{"location":"collections-HashSet/#index","text":"[Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this- A ?","title":"index"},{"location":"collections-HashSet/#parameters_23","text":"i: USize val","title":"Parameters"},{"location":"collections-HashSet/#returns_27","text":"this- A ?","title":"Returns"},{"location":"collections-HashSet/#values","text":"[Source] Return an iterator over the values. fun box values() : SetValues[A, H, this- HashSet[A, H] ref] ref^","title":"values"},{"location":"collections-HashSet/#returns_28","text":"SetValues [A, H, this- HashSet [A, H] ref] ref^","title":"Returns"},{"location":"collections-HashSet/#compare","text":"[Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-HashSet/#parameters_24","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_29","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Hashable/","text":"Hashable [Source] Anything with a hash method is hashable. interface ref Hashable Public Functions hash [Source] fun box hash() : USize val Returns USize val","title":"interface Hashable"},{"location":"collections-Hashable/#hashable","text":"[Source] Anything with a hash method is hashable. interface ref Hashable","title":"Hashable"},{"location":"collections-Hashable/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"collections-Hashable/#returns","text":"USize val","title":"Returns"},{"location":"collections-Hashable64/","text":"Hashable64 [Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64 Public Functions hash64 [Source] fun box hash64() : U64 val Returns U64 val","title":"interface Hashable64"},{"location":"collections-Hashable64/#hashable64","text":"[Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64","title":"Hashable64"},{"location":"collections-Hashable64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"collections-Hashable64/#returns","text":"U64 val","title":"Returns"},{"location":"collections-List/","text":"List[A: A] [Source] A doubly linked list. class ref List[A: A] is Seq[A] ref Implements Seq [A] ref Constructors create [Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = seq) : List[A] ref^ Parameters len: USize val = seq Returns List [A] ref^ unit [Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^ Parameters a: A Returns List [A] ref^ from [Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^ Parameters seq: Array [A^] ref Returns List [A] ref^ Public Functions reserve [Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val Parameters len: USize val Returns None val size [Source] Returns the number of items in the list. fun box size() : USize val Returns USize val apply [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = seq) : this- A ? Parameters i: USize val = seq Returns this- A ? update [Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ? Parameters i: USize val value: A Returns A^ ? index [Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this- ListNode[A] ref ? Parameters i: USize val Returns this- ListNode [A] ref ? remove [Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ? Parameters i: USize val Returns ListNode [A] ref ? clear [Source] Empties the list. fun ref clear() : None val Returns None val head [Source] Get the head of the list. fun box head() : this- ListNode[A] ref ? Returns this- ListNode [A] ref ? tail [Source] Get the tail of the list. fun box tail() : this- ListNode[A] ref ? Returns this- ListNode [A] ref ? prepend_node [Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val Parameters node: ListNode [A] ref Returns None val append_node [Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val Parameters node: ListNode [A] ref Returns None val append_list [Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val Parameters that: List [A] ref Returns None val prepend_list [Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val Parameters that: List [A] ref Returns None val push [Source] Adds a value to the tail of the list. fun ref push( a: A) : None val Parameters a: A Returns None val pop [Source] Removes a value from the tail of the list. fun ref pop() : A^ ? Returns A^ ? unshift [Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val Parameters a: A Returns None val shift [Source] Removes a value from the head of the list. fun ref shift() : A^ ? Returns A^ ? append [Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val Parameters seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq Returns None val concat [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val Parameters iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq Returns None val truncate [Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters len: USize val Returns None val clone [Source] Clone the list. fun box clone() : List[this- A!] ref^ Returns List [this- A!] ref^ map[B: B] [Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this- A!): B^}[A, B] box) : List[B] ref^ Parameters f: {(this- A!): B^}[A, B] box Returns List [B] ref^ flat_map[B: B] [Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this- A!): List[B]}[A, B] box) : List[B] ref^ Parameters f: {(this- A!): List[B]}[A, B] box Returns List [B] ref^ filter [Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^ Parameters f: {(this- A!): Bool}[A] box Returns List [this- A!] ref^ fold[B: B] [Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this- A!): B^}[A, B] box, acc: B) : B Parameters f: {(B!, this- A!): B^}[A, B] box acc: B Returns B every [Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this- A!): Bool}[A] box) : Bool val Parameters f: {(this- A!): Bool}[A] box Returns Bool val exists [Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this- A!): Bool}[A] box) : Bool val Parameters f: {(this- A!): Bool}[A] box Returns Bool val partition [Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this- A!): Bool}[A] box) : (List[this- A!] ref^ , List[this- A!] ref^) Parameters f: {(this- A!): Bool}[A] box Returns ( List [this- A!] ref^ , List [this- A!] ref^) drop [Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this- A!] ref^ Parameters n: USize val Returns List [this- A!] ref^ take [Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this- A!] ref Parameters n: USize val Returns List [this- A!] ref take_while [Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^ Parameters f: {(this- A!): Bool}[A] box Returns List [this- A!] ref^ reverse [Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this- A!] ref^ Returns List [this- A!] ref^ contains[optional B: (A HasEq [A!] #read)] [Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A HasEq[A!] #read)]( a: box- B) : Bool val Parameters a: box- B Returns Bool val nodes [Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this- ListNode[A] ref] ref^ Returns ListNodes [A, this- ListNode [A] ref] ref^ rnodes [Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this- ListNode[A] ref] ref^ Returns ListNodes [A, this- ListNode [A] ref] ref^ values [Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this- ListNode[A] ref] ref^ Returns ListValues [A, this- ListNode [A] ref] ref^ rvalues [Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this- ListNode[A] ref] ref^ Returns ListValues [A, this- ListNode [A] ref] ref^ Private Functions _map[B: B] [Source] Private helper for map, recursively working with ListNodes. fun box _map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): B^}[A, B] box, acc: List[B] ref) : List[B] ref^ Parameters ln: this- ListNode [A] ref f: {(this- A!): B^}[A, B] box acc: List [B] ref Returns List [B] ref^ _flat_map[B: B] [Source] Private helper for flat_map, recursively working with ListNodes. fun box _flat_map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): List[B]}[A, B] box, acc: List[B] ref) : List[B] ref^ Parameters ln: this- ListNode [A] ref f: {(this- A!): List[B]}[A, B] box acc: List [B] ref Returns List [B] ref^ _filter [Source] Private helper for filter, recursively working with ListNodes. fun box _filter( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box, acc: List[this- A!] ref) : List[this- A!] ref Parameters ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box acc: List [this- A!] ref Returns List [this- A!] ref _fold[B: B] [Source] Private helper for fold, recursively working with ListNodes. fun box _fold[B: B]( ln: this- ListNode[A] ref, f: {(B!, this- A!): B^}[A, B] box, acc: B) : B Parameters ln: this- ListNode [A] ref f: {(B!, this- A!): B^}[A, B] box acc: B Returns B _every [Source] Private helper for every, recursively working with ListNodes. fun box _every( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val Parameters ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box Returns Bool val _exists [Source] Private helper for exists, recursively working with ListNodes. fun box _exists( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val Parameters ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box Returns Bool val _reverse [Source] Private helper for reverse, recursively working with ListNodes. fun box _reverse( ln: this- ListNode[A] ref, acc: List[this- A!] ref) : List[this- A!] ref^ Parameters ln: this- ListNode [A] ref acc: List [this- A!] ref Returns List [this- A!] ref^ _contains[optional B: (A HasEq [A!] #read)] [Source] Private helper for contains, recursively working with ListNodes. fun box _contains[optional B: (A HasEq[A!] #read)]( ln: this- ListNode[A] ref, a: box- B) : Bool val Parameters ln: this- ListNode [A] ref a: box- B Returns Bool val _increment [Source] fun ref _increment() : None val Returns None val _decrement [Source] fun ref _decrement() : None val Returns None val _set_head [Source] fun ref _set_head( head': (ListNode[A] ref | None val)) : None val Parameters head': ( ListNode [A] ref | None val) Returns None val _set_tail [Source] fun ref _set_tail( tail': (ListNode[A] ref | None val)) : None val Parameters tail': ( ListNode [A] ref | None val) Returns None val _set_both [Source] fun ref _set_both( node: ListNode[A] ref) : None val Parameters node: ListNode [A] ref Returns None val","title":"class List"},{"location":"collections-List/#list91a-a93","text":"[Source] A doubly linked list. class ref List[A: A] is Seq[A] ref","title":"List[A: A]"},{"location":"collections-List/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"collections-List/#constructors","text":"","title":"Constructors"},{"location":"collections-List/#create","text":"[Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = seq) : List[A] ref^","title":"create"},{"location":"collections-List/#parameters","text":"len: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#unit","text":"[Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^","title":"unit"},{"location":"collections-List/#parameters_1","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_1","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#from","text":"[Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^","title":"from"},{"location":"collections-List/#parameters_2","text":"seq: Array [A^] ref","title":"Parameters"},{"location":"collections-List/#returns_2","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#public-functions","text":"","title":"Public Functions"},{"location":"collections-List/#reserve","text":"[Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"collections-List/#parameters_3","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_3","text":"None val","title":"Returns"},{"location":"collections-List/#size","text":"[Source] Returns the number of items in the list. fun box size() : USize val","title":"size"},{"location":"collections-List/#returns_4","text":"USize val","title":"Returns"},{"location":"collections-List/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = seq) : this- A ?","title":"apply"},{"location":"collections-List/#parameters_4","text":"i: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns_5","text":"this- A ?","title":"Returns"},{"location":"collections-List/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"collections-List/#parameters_5","text":"i: USize val value: A","title":"Parameters"},{"location":"collections-List/#returns_6","text":"A^ ?","title":"Returns"},{"location":"collections-List/#index","text":"[Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this- ListNode[A] ref ?","title":"index"},{"location":"collections-List/#parameters_6","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_7","text":"this- ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#remove","text":"[Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ?","title":"remove"},{"location":"collections-List/#parameters_7","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_8","text":"ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#clear","text":"[Source] Empties the list. fun ref clear() : None val","title":"clear"},{"location":"collections-List/#returns_9","text":"None val","title":"Returns"},{"location":"collections-List/#head","text":"[Source] Get the head of the list. fun box head() : this- ListNode[A] ref ?","title":"head"},{"location":"collections-List/#returns_10","text":"this- ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#tail","text":"[Source] Get the tail of the list. fun box tail() : this- ListNode[A] ref ?","title":"tail"},{"location":"collections-List/#returns_11","text":"this- ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#prepend_node","text":"[Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val","title":"prepend_node"},{"location":"collections-List/#parameters_8","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_12","text":"None val","title":"Returns"},{"location":"collections-List/#append_node","text":"[Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val","title":"append_node"},{"location":"collections-List/#parameters_9","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_13","text":"None val","title":"Returns"},{"location":"collections-List/#append_list","text":"[Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val","title":"append_list"},{"location":"collections-List/#parameters_10","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_14","text":"None val","title":"Returns"},{"location":"collections-List/#prepend_list","text":"[Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val","title":"prepend_list"},{"location":"collections-List/#parameters_11","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_15","text":"None val","title":"Returns"},{"location":"collections-List/#push","text":"[Source] Adds a value to the tail of the list. fun ref push( a: A) : None val","title":"push"},{"location":"collections-List/#parameters_12","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_16","text":"None val","title":"Returns"},{"location":"collections-List/#pop","text":"[Source] Removes a value from the tail of the list. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-List/#returns_17","text":"A^ ?","title":"Returns"},{"location":"collections-List/#unshift","text":"[Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val","title":"unshift"},{"location":"collections-List/#parameters_13","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_18","text":"None val","title":"Returns"},{"location":"collections-List/#shift","text":"[Source] Removes a value from the head of the list. fun ref shift() : A^ ?","title":"shift"},{"location":"collections-List/#returns_19","text":"A^ ?","title":"Returns"},{"location":"collections-List/#append","text":"[Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box ReadElement[A^] box), offset: USize val = seq, len: USize val = seq) : None val","title":"append"},{"location":"collections-List/#parameters_14","text":"seq: ( ReadSeq [A] box ReadElement [A^] box) offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns_20","text":"None val","title":"Returns"},{"location":"collections-List/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = seq, len: USize val = seq) : None val","title":"concat"},{"location":"collections-List/#parameters_15","text":"iter: Iterator [A^] ref offset: USize val = seq len: USize val = seq","title":"Parameters"},{"location":"collections-List/#returns_21","text":"None val","title":"Returns"},{"location":"collections-List/#truncate","text":"[Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"collections-List/#parameters_16","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_22","text":"None val","title":"Returns"},{"location":"collections-List/#clone","text":"[Source] Clone the list. fun box clone() : List[this- A!] ref^","title":"clone"},{"location":"collections-List/#returns_23","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this- A!): B^}[A, B] box) : List[B] ref^","title":"map[B: B]"},{"location":"collections-List/#parameters_17","text":"f: {(this- A!): B^}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_24","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#flat_map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this- A!): List[B]}[A, B] box) : List[B] ref^","title":"flat_map[B: B]"},{"location":"collections-List/#parameters_18","text":"f: {(this- A!): List[B]}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_25","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#filter","text":"[Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^","title":"filter"},{"location":"collections-List/#parameters_19","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_26","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#fold91b-b93","text":"[Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this- A!): B^}[A, B] box, acc: B) : B","title":"fold[B: B]"},{"location":"collections-List/#parameters_20","text":"f: {(B!, this- A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_27","text":"B","title":"Returns"},{"location":"collections-List/#every","text":"[Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this- A!): Bool}[A] box) : Bool val","title":"every"},{"location":"collections-List/#parameters_21","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_28","text":"Bool val","title":"Returns"},{"location":"collections-List/#exists","text":"[Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this- A!): Bool}[A] box) : Bool val","title":"exists"},{"location":"collections-List/#parameters_22","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_29","text":"Bool val","title":"Returns"},{"location":"collections-List/#partition","text":"[Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this- A!): Bool}[A] box) : (List[this- A!] ref^ , List[this- A!] ref^)","title":"partition"},{"location":"collections-List/#parameters_23","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_30","text":"( List [this- A!] ref^ , List [this- A!] ref^)","title":"Returns"},{"location":"collections-List/#drop","text":"[Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this- A!] ref^","title":"drop"},{"location":"collections-List/#parameters_24","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_31","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#take","text":"[Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this- A!] ref","title":"take"},{"location":"collections-List/#parameters_25","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_32","text":"List [this- A!] ref","title":"Returns"},{"location":"collections-List/#take_while","text":"[Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this- A!): Bool}[A] box) : List[this- A!] ref^","title":"take_while"},{"location":"collections-List/#parameters_26","text":"f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_33","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#reverse","text":"[Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this- A!] ref^","title":"reverse"},{"location":"collections-List/#returns_34","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#contains91optional-b-a-haseq91a93-read93","text":"[Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A HasEq[A!] #read)]( a: box- B) : Bool val","title":"contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_27","text":"a: box- B","title":"Parameters"},{"location":"collections-List/#returns_35","text":"Bool val","title":"Returns"},{"location":"collections-List/#nodes","text":"[Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this- ListNode[A] ref] ref^","title":"nodes"},{"location":"collections-List/#returns_36","text":"ListNodes [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rnodes","text":"[Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this- ListNode[A] ref] ref^","title":"rnodes"},{"location":"collections-List/#returns_37","text":"ListNodes [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#values","text":"[Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this- ListNode[A] ref] ref^","title":"values"},{"location":"collections-List/#returns_38","text":"ListValues [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rvalues","text":"[Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this- ListNode[A] ref] ref^","title":"rvalues"},{"location":"collections-List/#returns_39","text":"ListValues [A, this- ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#private-functions","text":"","title":"Private Functions"},{"location":"collections-List/#_map91b-b93","text":"[Source] Private helper for map, recursively working with ListNodes. fun box _map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): B^}[A, B] box, acc: List[B] ref) : List[B] ref^","title":"_map[B: B]"},{"location":"collections-List/#parameters_28","text":"ln: this- ListNode [A] ref f: {(this- A!): B^}[A, B] box acc: List [B] ref","title":"Parameters"},{"location":"collections-List/#returns_40","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#_flat_map91b-b93","text":"[Source] Private helper for flat_map, recursively working with ListNodes. fun box _flat_map[B: B]( ln: this- ListNode[A] ref, f: {(this- A!): List[B]}[A, B] box, acc: List[B] ref) : List[B] ref^","title":"_flat_map[B: B]"},{"location":"collections-List/#parameters_29","text":"ln: this- ListNode [A] ref f: {(this- A!): List[B]}[A, B] box acc: List [B] ref","title":"Parameters"},{"location":"collections-List/#returns_41","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#_filter","text":"[Source] Private helper for filter, recursively working with ListNodes. fun box _filter( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box, acc: List[this- A!] ref) : List[this- A!] ref","title":"_filter"},{"location":"collections-List/#parameters_30","text":"ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box acc: List [this- A!] ref","title":"Parameters"},{"location":"collections-List/#returns_42","text":"List [this- A!] ref","title":"Returns"},{"location":"collections-List/#_fold91b-b93","text":"[Source] Private helper for fold, recursively working with ListNodes. fun box _fold[B: B]( ln: this- ListNode[A] ref, f: {(B!, this- A!): B^}[A, B] box, acc: B) : B","title":"_fold[B: B]"},{"location":"collections-List/#parameters_31","text":"ln: this- ListNode [A] ref f: {(B!, this- A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_43","text":"B","title":"Returns"},{"location":"collections-List/#_every","text":"[Source] Private helper for every, recursively working with ListNodes. fun box _every( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val","title":"_every"},{"location":"collections-List/#parameters_32","text":"ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_44","text":"Bool val","title":"Returns"},{"location":"collections-List/#_exists","text":"[Source] Private helper for exists, recursively working with ListNodes. fun box _exists( ln: this- ListNode[A] ref, f: {(this- A!): Bool}[A] box) : Bool val","title":"_exists"},{"location":"collections-List/#parameters_33","text":"ln: this- ListNode [A] ref f: {(this- A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_45","text":"Bool val","title":"Returns"},{"location":"collections-List/#_reverse","text":"[Source] Private helper for reverse, recursively working with ListNodes. fun box _reverse( ln: this- ListNode[A] ref, acc: List[this- A!] ref) : List[this- A!] ref^","title":"_reverse"},{"location":"collections-List/#parameters_34","text":"ln: this- ListNode [A] ref acc: List [this- A!] ref","title":"Parameters"},{"location":"collections-List/#returns_46","text":"List [this- A!] ref^","title":"Returns"},{"location":"collections-List/#_contains91optional-b-a-haseq91a93-read93","text":"[Source] Private helper for contains, recursively working with ListNodes. fun box _contains[optional B: (A HasEq[A!] #read)]( ln: this- ListNode[A] ref, a: box- B) : Bool val","title":"_contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_35","text":"ln: this- ListNode [A] ref a: box- B","title":"Parameters"},{"location":"collections-List/#returns_47","text":"Bool val","title":"Returns"},{"location":"collections-List/#_increment","text":"[Source] fun ref _increment() : None val","title":"_increment"},{"location":"collections-List/#returns_48","text":"None val","title":"Returns"},{"location":"collections-List/#_decrement","text":"[Source] fun ref _decrement() : None val","title":"_decrement"},{"location":"collections-List/#returns_49","text":"None val","title":"Returns"},{"location":"collections-List/#_set_head","text":"[Source] fun ref _set_head( head': (ListNode[A] ref | None val)) : None val","title":"_set_head"},{"location":"collections-List/#parameters_36","text":"head': ( ListNode [A] ref | None val)","title":"Parameters"},{"location":"collections-List/#returns_50","text":"None val","title":"Returns"},{"location":"collections-List/#_set_tail","text":"[Source] fun ref _set_tail( tail': (ListNode[A] ref | None val)) : None val","title":"_set_tail"},{"location":"collections-List/#parameters_37","text":"tail': ( ListNode [A] ref | None val)","title":"Parameters"},{"location":"collections-List/#returns_51","text":"None val","title":"Returns"},{"location":"collections-List/#_set_both","text":"[Source] fun ref _set_both( node: ListNode[A] ref) : None val","title":"_set_both"},{"location":"collections-List/#parameters_38","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_52","text":"None val","title":"Returns"},{"location":"collections-ListNode/","text":"ListNode[A: A] [Source] A node in a list. class ref ListNode[A: A] Constructors create [Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = seq) : ListNode[A] ref^ Parameters item: (A | None val) = seq Returns ListNode [A] ref^ Public Functions apply [Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this- A ? Returns this- A ? update [Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ? Parameters value: (A | None val) Returns A^ ? pop [Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ? Returns A^ ? prepend [Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. fun ref prepend( that: ListNode[A] ref) : Bool val Parameters that: ListNode [A] ref Returns Bool val append [Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. fun ref append( that: ListNode[A] ref) : Bool val Parameters that: ListNode [A] ref Returns Bool val remove [Source] Remove a node from a list. fun ref remove() : None val Returns None val has_prev [Source] Return true if there is a previous node. fun box has_prev() : Bool val Returns Bool val has_next [Source] Return true if there is a next node. fun box has_next() : Bool val Returns Bool val prev [Source] Return the previous node. fun box prev() : (this- ListNode[A] ref | None val) Returns (this- ListNode [A] ref | None val) next [Source] Return the next node. fun box next() : (this- ListNode[A] ref | None val) Returns (this- ListNode [A] ref | None val) Private Functions _set_list [Source] Make this node the only node on the given list. fun ref _set_list( list: List[A] ref) : ListNode[A] ref^ Parameters list: List [A] ref Returns ListNode [A] ref^","title":"class ListNode"},{"location":"collections-ListNode/#listnode91a-a93","text":"[Source] A node in a list. class ref ListNode[A: A]","title":"ListNode[A: A]"},{"location":"collections-ListNode/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNode/#create","text":"[Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = seq) : ListNode[A] ref^","title":"create"},{"location":"collections-ListNode/#parameters","text":"item: (A | None val) = seq","title":"Parameters"},{"location":"collections-ListNode/#returns","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNode/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNode/#apply","text":"[Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this- A ?","title":"apply"},{"location":"collections-ListNode/#returns_1","text":"this- A ?","title":"Returns"},{"location":"collections-ListNode/#update","text":"[Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ?","title":"update"},{"location":"collections-ListNode/#parameters_1","text":"value: (A | None val)","title":"Parameters"},{"location":"collections-ListNode/#returns_2","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#pop","text":"[Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-ListNode/#returns_3","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#prepend","text":"[Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. fun ref prepend( that: ListNode[A] ref) : Bool val","title":"prepend"},{"location":"collections-ListNode/#parameters_2","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#append","text":"[Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. fun ref append( that: ListNode[A] ref) : Bool val","title":"append"},{"location":"collections-ListNode/#parameters_3","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#remove","text":"[Source] Remove a node from a list. fun ref remove() : None val","title":"remove"},{"location":"collections-ListNode/#returns_6","text":"None val","title":"Returns"},{"location":"collections-ListNode/#has_prev","text":"[Source] Return true if there is a previous node. fun box has_prev() : Bool val","title":"has_prev"},{"location":"collections-ListNode/#returns_7","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#has_next","text":"[Source] Return true if there is a next node. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNode/#returns_8","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#prev","text":"[Source] Return the previous node. fun box prev() : (this- ListNode[A] ref | None val)","title":"prev"},{"location":"collections-ListNode/#returns_9","text":"(this- ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#next","text":"[Source] Return the next node. fun box next() : (this- ListNode[A] ref | None val)","title":"next"},{"location":"collections-ListNode/#returns_10","text":"(this- ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#private-functions","text":"","title":"Private Functions"},{"location":"collections-ListNode/#_set_list","text":"[Source] Make this node the only node on the given list. fun ref _set_list( list: List[A] ref) : ListNode[A] ref^","title":"_set_list"},{"location":"collections-ListNode/#parameters_4","text":"list: List [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_11","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNodes/","text":"ListNodes[A: A, N: ListNode [A] #read] [Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref Implements Iterator [N] ref Constructors create [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListNodes[A, N] ref^ Parameters head: (N | None val) reverse: Bool val = seq Returns ListNodes [A, N] ref^ Public Functions has_next [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns Bool val next [Source] Get the list node and replace it with the next one. fun ref next() : N ? Returns N ?","title":"class ListNodes"},{"location":"collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93","text":"[Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref","title":"ListNodes[A: A, N: ListNode[A] #read]"},{"location":"collections-ListNodes/#implements","text":"Iterator [N] ref","title":"Implements"},{"location":"collections-ListNodes/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNodes/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListNodes[A, N] ref^","title":"create"},{"location":"collections-ListNodes/#parameters","text":"head: (N | None val) reverse: Bool val = seq","title":"Parameters"},{"location":"collections-ListNodes/#returns","text":"ListNodes [A, N] ref^","title":"Returns"},{"location":"collections-ListNodes/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNodes/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNodes/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListNodes/#next","text":"[Source] Get the list node and replace it with the next one. fun ref next() : N ?","title":"next"},{"location":"collections-ListNodes/#returns_2","text":"N ?","title":"Returns"},{"location":"collections-ListValues/","text":"ListValues[A: A, N: ListNode [A] #read] [Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N- A] ref Implements Iterator [N- A] ref Constructors create [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListValues[A, N] ref^ Parameters head: (N | None val) reverse: Bool val = seq Returns ListValues [A, N] ref^ Public Functions has_next [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns Bool val next [Source] Get the value of the list node and replace it with the next one. fun ref next() : N- A ? Returns N- A ?","title":"class ListValues"},{"location":"collections-ListValues/#listvalues91a-a-n-listnode91a93-read93","text":"[Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N- A] ref","title":"ListValues[A: A, N: ListNode[A] #read]"},{"location":"collections-ListValues/#implements","text":"Iterator [N- A] ref","title":"Implements"},{"location":"collections-ListValues/#constructors","text":"","title":"Constructors"},{"location":"collections-ListValues/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = seq) : ListValues[A, N] ref^","title":"create"},{"location":"collections-ListValues/#parameters","text":"head: (N | None val) reverse: Bool val = seq","title":"Parameters"},{"location":"collections-ListValues/#returns","text":"ListValues [A, N] ref^","title":"Returns"},{"location":"collections-ListValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListValues/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListValues/#next","text":"[Source] Get the value of the list node and replace it with the next one. fun ref next() : N- A ?","title":"next"},{"location":"collections-ListValues/#returns_2","text":"N- A ?","title":"Returns"},{"location":"collections-Map/","text":"Map[K: ( Hashable #read Equatable [K] #read), V: V] [Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref Type Alias For HashMap [K, V, HashEq [K] val] ref","title":"type Map"},{"location":"collections-Map/#map91k-hashable-read-equatable91k93-read-v-v93","text":"[Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"},{"location":"collections-Map/#type-alias-for","text":"HashMap [K, V, HashEq [K] val] ref","title":"Type Alias For"},{"location":"collections-MapIs/","text":"MapIs[K: K, V: V] [Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref Type Alias For HashMap [K, V, HashIs [K] val] ref","title":"type MapIs"},{"location":"collections-MapIs/#mapis91k-k-v-v93","text":"[Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref","title":"MapIs[K: K, V: V]"},{"location":"collections-MapIs/#type-alias-for","text":"HashMap [K, V, HashIs [K] val] ref","title":"Type Alias For"},{"location":"collections-MapKeys/","text":"MapKeys[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] [Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- K] ref Implements Iterator [M- K] ref Constructors create [Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^ Parameters map: M Returns MapKeys [K, V, H, M] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M- K ? Returns M- K ?","title":"class MapKeys"},{"location":"collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- K] ref","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapKeys/#implements","text":"Iterator [M- K] ref","title":"Implements"},{"location":"collections-MapKeys/#constructors","text":"","title":"Constructors"},{"location":"collections-MapKeys/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^","title":"create"},{"location":"collections-MapKeys/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapKeys/#returns","text":"MapKeys [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapKeys/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapKeys/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapKeys/#next","text":"[Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M- K ?","title":"next"},{"location":"collections-MapKeys/#returns_2","text":"M- K ?","title":"Returns"},{"location":"collections-MapPairs/","text":"MapPairs[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] [Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M- K , M- V)] ref Implements Iterator [(M- K , M- V)] ref Constructors create [Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^ Parameters map: M Returns MapPairs [K, V, H, M] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M- K , M- V) ? Returns (M- K , M- V) ?","title":"class MapPairs"},{"location":"collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M- K , M- V)] ref","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapPairs/#implements","text":"Iterator [(M- K , M- V)] ref","title":"Implements"},{"location":"collections-MapPairs/#constructors","text":"","title":"Constructors"},{"location":"collections-MapPairs/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^","title":"create"},{"location":"collections-MapPairs/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapPairs/#returns","text":"MapPairs [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapPairs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapPairs/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapPairs/#next","text":"[Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M- K , M- V) ?","title":"next"},{"location":"collections-MapPairs/#returns_2","text":"(M- K , M- V) ?","title":"Returns"},{"location":"collections-MapValues/","text":"MapValues[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] [Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- V] ref Implements Iterator [M- V] ref Constructors create [Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^ Parameters map: M Returns MapValues [K, V, H, M] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M- V ? Returns M- V ?","title":"class MapValues"},{"location":"collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- V] ref","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapValues/#implements","text":"Iterator [M- V] ref","title":"Implements"},{"location":"collections-MapValues/#constructors","text":"","title":"Constructors"},{"location":"collections-MapValues/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^","title":"create"},{"location":"collections-MapValues/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapValues/#returns","text":"MapValues [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M- V ?","title":"next"},{"location":"collections-MapValues/#returns_2","text":"M- V ?","title":"Returns"},{"location":"collections-Range/","text":"Range[optional A: ( Real [A] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print( will this ever end? ) env.err.print( no, never! ) end When using Range with floating point types ( F32 and F64 ) inc steps 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements Iterator [A] ref Constructors create [Source] new ref create( min: A, max: A, inc: A = seq) : Range[A] ref^ Parameters min: A max: A inc: A = seq Returns Range [A] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : A Returns A rewind [Source] fun ref rewind() : None val Returns None val is_infinite [Source] fun box is_infinite() : Bool val Returns Bool val","title":"class Range"},{"location":"collections-Range/#range91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print( will this ever end? ) env.err.print( no, never! ) end When using Range with floating point types ( F32 and F64 ) inc steps 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Range/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Range/#constructors","text":"","title":"Constructors"},{"location":"collections-Range/#create","text":"[Source] new ref create( min: A, max: A, inc: A = seq) : Range[A] ref^","title":"create"},{"location":"collections-Range/#parameters","text":"min: A max: A inc: A = seq","title":"Parameters"},{"location":"collections-Range/#returns","text":"Range [A] ref^","title":"Returns"},{"location":"collections-Range/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Range/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Range/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Range/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Range/#returns_2","text":"A","title":"Returns"},{"location":"collections-Range/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Range/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Range/#is_infinite","text":"[Source] fun box is_infinite() : Bool val","title":"is_infinite"},{"location":"collections-Range/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/","text":"Reverse[optional A: ( Real [A] val ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] [Source] Produces [max, min]. class ref Reverse[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements Iterator [A] ref Constructors create [Source] new ref create( max: A, min: A, dec: A = seq) : Reverse[A] ref^ Parameters max: A min: A dec: A = seq Returns Reverse [A] ref^ Public Functions has_next [Source] fun box has_next() : Bool val Returns Bool val next [Source] fun ref next() : A Returns A rewind [Source] fun ref rewind() : None val Returns None val","title":"class Reverse"},{"location":"collections-Reverse/#reverse91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Produces [max, min]. class ref Reverse[optional A: (Real[A] val (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Reverse/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Reverse/#constructors","text":"","title":"Constructors"},{"location":"collections-Reverse/#create","text":"[Source] new ref create( max: A, min: A, dec: A = seq) : Reverse[A] ref^","title":"create"},{"location":"collections-Reverse/#parameters","text":"max: A min: A dec: A = seq","title":"Parameters"},{"location":"collections-Reverse/#returns","text":"Reverse [A] ref^","title":"Returns"},{"location":"collections-Reverse/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Reverse/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Reverse/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Reverse/#returns_2","text":"A","title":"Returns"},{"location":"collections-Reverse/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Reverse/#returns_3","text":"None val","title":"Returns"},{"location":"collections-RingBuffer/","text":"RingBuffer[A: A] [Source] A ring buffer. class ref RingBuffer[A: A] Constructors create [Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^ Parameters len: USize val Returns RingBuffer [A] ref^ Public Functions head [Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ? Returns USize val ? size [Source] The number of elements that have been added to the ring. fun box size() : USize val Returns USize val space [Source] The available space in the ring. fun box space() : USize val Returns USize val apply [Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this- A ? Parameters i: USize val Returns this- A ? push [Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val Parameters value: A Returns Bool val clear [Source] Clear the queue. fun ref clear() : None val Returns None val","title":"class RingBuffer"},{"location":"collections-RingBuffer/#ringbuffer91a-a93","text":"[Source] A ring buffer. class ref RingBuffer[A: A]","title":"RingBuffer[A: A]"},{"location":"collections-RingBuffer/#constructors","text":"","title":"Constructors"},{"location":"collections-RingBuffer/#create","text":"[Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^","title":"create"},{"location":"collections-RingBuffer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns","text":"RingBuffer [A] ref^","title":"Returns"},{"location":"collections-RingBuffer/#public-functions","text":"","title":"Public Functions"},{"location":"collections-RingBuffer/#head","text":"[Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ?","title":"head"},{"location":"collections-RingBuffer/#returns_1","text":"USize val ?","title":"Returns"},{"location":"collections-RingBuffer/#size","text":"[Source] The number of elements that have been added to the ring. fun box size() : USize val","title":"size"},{"location":"collections-RingBuffer/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#space","text":"[Source] The available space in the ring. fun box space() : USize val","title":"space"},{"location":"collections-RingBuffer/#returns_3","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#apply","text":"[Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this- A ?","title":"apply"},{"location":"collections-RingBuffer/#parameters_1","text":"i: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns_4","text":"this- A ?","title":"Returns"},{"location":"collections-RingBuffer/#push","text":"[Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val","title":"push"},{"location":"collections-RingBuffer/#parameters_2","text":"value: A","title":"Parameters"},{"location":"collections-RingBuffer/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-RingBuffer/#clear","text":"[Source] Clear the queue. fun ref clear() : None val","title":"clear"},{"location":"collections-RingBuffer/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Set/","text":"Set[A: ( Hashable #read Equatable [A] #read)] [Source] type Set[A: (Hashable #read Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref Type Alias For HashSet [A, HashEq [A] val] ref","title":"type Set"},{"location":"collections-Set/#set91a-hashable-read-equatable91a93-read93","text":"[Source] type Set[A: (Hashable #read Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-Set/#type-alias-for","text":"HashSet [A, HashEq [A] val] ref","title":"Type Alias For"},{"location":"collections-SetIs/","text":"SetIs[A: A] [Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref Type Alias For HashSet [A, HashIs [A!] val] ref","title":"type SetIs"},{"location":"collections-SetIs/#setis91a-a93","text":"[Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref","title":"SetIs[A: A]"},{"location":"collections-SetIs/#type-alias-for","text":"HashSet [A, HashIs [A!] val] ref","title":"Type Alias For"},{"location":"collections-SetValues/","text":"SetValues[A: A, H: HashFunction [A!] val, S: HashSet [A, H] #read] [Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S- A] ref Implements Iterator [S- A] ref Constructors create [Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^ Parameters set: S Returns SetValues [A, H, S] ref^ Public Functions has_next [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val Returns Bool val next [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S- A ? Returns S- A ?","title":"class SetValues"},{"location":"collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h93-read93","text":"[Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S- A] ref","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"},{"location":"collections-SetValues/#implements","text":"Iterator [S- A] ref","title":"Implements"},{"location":"collections-SetValues/#constructors","text":"","title":"Constructors"},{"location":"collections-SetValues/#create","text":"[Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^","title":"create"},{"location":"collections-SetValues/#parameters","text":"set: S","title":"Parameters"},{"location":"collections-SetValues/#returns","text":"SetValues [A, H, S] ref^","title":"Returns"},{"location":"collections-SetValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-SetValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-SetValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-SetValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S- A ?","title":"next"},{"location":"collections-SetValues/#returns_2","text":"S- A ?","title":"Returns"},{"location":"collections-Sort/","text":"Sort[A: Seq [B] ref, B: Comparable [B] #read] [Source] Implementation of dual-pivot quicksort. primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read] Constructors create [Source] new val create() : Sort[A, B] val^ Returns Sort [A, B] val^ Public Functions apply [Source] Sort the given seq. fun box apply( a: A) : A^ Parameters a: A Returns A^ eq [Source] fun box eq( that: Sort[A, B] val) : Bool val Parameters that: Sort [A, B] val Returns Bool val ne [Source] fun box ne( that: Sort[A, B] val) : Bool val Parameters that: Sort [A, B] val Returns Bool val Private Functions _sort [Source] fun box _sort( a: A, lo: ISize val, hi: ISize val) : None val ? Parameters a: A lo: ISize val hi: ISize val Returns None val ? _swap [Source] fun box _swap( a: A, i: ISize val, j: ISize val) : None val ? Parameters a: A i: ISize val j: ISize val Returns None val ?","title":"primitive Sort"},{"location":"collections-Sort/#sort91a-seq91b93-ref-b-comparable91b93-read93","text":"[Source] Implementation of dual-pivot quicksort. primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]"},{"location":"collections-Sort/#constructors","text":"","title":"Constructors"},{"location":"collections-Sort/#create","text":"[Source] new val create() : Sort[A, B] val^","title":"create"},{"location":"collections-Sort/#returns","text":"Sort [A, B] val^","title":"Returns"},{"location":"collections-Sort/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Sort/#apply","text":"[Source] Sort the given seq. fun box apply( a: A) : A^","title":"apply"},{"location":"collections-Sort/#parameters","text":"a: A","title":"Parameters"},{"location":"collections-Sort/#returns_1","text":"A^","title":"Returns"},{"location":"collections-Sort/#eq","text":"[Source] fun box eq( that: Sort[A, B] val) : Bool val","title":"eq"},{"location":"collections-Sort/#parameters_1","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#ne","text":"[Source] fun box ne( that: Sort[A, B] val) : Bool val","title":"ne"},{"location":"collections-Sort/#parameters_2","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#private-functions","text":"","title":"Private Functions"},{"location":"collections-Sort/#_sort","text":"[Source] fun box _sort( a: A, lo: ISize val, hi: ISize val) : None val ?","title":"_sort"},{"location":"collections-Sort/#parameters_3","text":"a: A lo: ISize val hi: ISize val","title":"Parameters"},{"location":"collections-Sort/#returns_4","text":"None val ?","title":"Returns"},{"location":"collections-Sort/#_swap","text":"[Source] fun box _swap( a: A, i: ISize val, j: ISize val) : None val ?","title":"_swap"},{"location":"collections-Sort/#parameters_4","text":"a: A i: ISize val j: ISize val","title":"Parameters"},{"location":"collections-Sort/#returns_5","text":"None val ?","title":"Returns"},{"location":"collections-_MapDeleted/","text":"_MapDeleted [Source] primitive val _MapDeleted Constructors create [Source] new val create() : _MapDeleted val^ Returns _MapDeleted val^ Public Functions eq [Source] fun box eq( that: _MapDeleted val) : Bool val Parameters that: _MapDeleted val Returns Bool val ne [Source] fun box ne( that: _MapDeleted val) : Bool val Parameters that: _MapDeleted val Returns Bool val","title":"primitive _MapDeleted"},{"location":"collections-_MapDeleted/#_mapdeleted","text":"[Source] primitive val _MapDeleted","title":"_MapDeleted"},{"location":"collections-_MapDeleted/#constructors","text":"","title":"Constructors"},{"location":"collections-_MapDeleted/#create","text":"[Source] new val create() : _MapDeleted val^","title":"create"},{"location":"collections-_MapDeleted/#returns","text":"_MapDeleted val^","title":"Returns"},{"location":"collections-_MapDeleted/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_MapDeleted/#eq","text":"[Source] fun box eq( that: _MapDeleted val) : Bool val","title":"eq"},{"location":"collections-_MapDeleted/#parameters","text":"that: _MapDeleted val","title":"Parameters"},{"location":"collections-_MapDeleted/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapDeleted/#ne","text":"[Source] fun box ne( that: _MapDeleted val) : Bool val","title":"ne"},{"location":"collections-_MapDeleted/#parameters_1","text":"that: _MapDeleted val","title":"Parameters"},{"location":"collections-_MapDeleted/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-_MapEmpty/","text":"_MapEmpty [Source] primitive val _MapEmpty Constructors create [Source] new val create() : _MapEmpty val^ Returns _MapEmpty val^ Public Functions eq [Source] fun box eq( that: _MapEmpty val) : Bool val Parameters that: _MapEmpty val Returns Bool val ne [Source] fun box ne( that: _MapEmpty val) : Bool val Parameters that: _MapEmpty val Returns Bool val","title":"primitive _MapEmpty"},{"location":"collections-_MapEmpty/#_mapempty","text":"[Source] primitive val _MapEmpty","title":"_MapEmpty"},{"location":"collections-_MapEmpty/#constructors","text":"","title":"Constructors"},{"location":"collections-_MapEmpty/#create","text":"[Source] new val create() : _MapEmpty val^","title":"create"},{"location":"collections-_MapEmpty/#returns","text":"_MapEmpty val^","title":"Returns"},{"location":"collections-_MapEmpty/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_MapEmpty/#eq","text":"[Source] fun box eq( that: _MapEmpty val) : Bool val","title":"eq"},{"location":"collections-_MapEmpty/#parameters","text":"that: _MapEmpty val","title":"Parameters"},{"location":"collections-_MapEmpty/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapEmpty/#ne","text":"[Source] fun box ne( that: _MapEmpty val) : Bool val","title":"ne"},{"location":"collections-_MapEmpty/#parameters_1","text":"that: _MapEmpty val","title":"Parameters"},{"location":"collections-_MapEmpty/#returns_2","text":"Bool val","title":"Returns"},{"location":"ponytest--index/","text":"PonyTest package The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. Example program To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use ponytest actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String = addition fun apply(h: TestHelper) = h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String = subtraction fun apply(h: TestHelper) = h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. Test names Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option. Aggregation Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use ponytest use foo = foo use bar = bar actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. Long tests Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. Exclusion groups By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. Labels Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use ponytest class iso _I8AddTest is UnitTest fun name(): String = _I8AddTest fun label(): String = simple fun apply(h: TestHelper) = h.assert_eq[I8](1, 1) Setting up and tearing down a test environment Set Up Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env . Tear Down Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down. Example The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use ponytest use files class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String = temp-dir fun ref set_up(h: TestHelper)? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, temp-dir )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? = let dir = tmp_dir as FilePath // do something inside the temporary directory Public Types trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest Private Types trait _Group actor _ExclusiveGroup actor _SimultaneousGroup primitive _Color","title":"Package"},{"location":"ponytest--index/#ponytest-package","text":"The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.","title":"PonyTest package"},{"location":"ponytest--index/#example-program","text":"To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use ponytest actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String = addition fun apply(h: TestHelper) = h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String = subtraction fun apply(h: TestHelper) = h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.","title":"Example program"},{"location":"ponytest--index/#test-names","text":"Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option.","title":"Test names"},{"location":"ponytest--index/#aggregation","text":"Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use ponytest use foo = foo use bar = bar actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.","title":"Aggregation"},{"location":"ponytest--index/#long-tests","text":"Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed.","title":"Long tests"},{"location":"ponytest--index/#exclusion-groups","text":"By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.","title":"Exclusion groups"},{"location":"ponytest--index/#labels","text":"Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use ponytest class iso _I8AddTest is UnitTest fun name(): String = _I8AddTest fun label(): String = simple fun apply(h: TestHelper) = h.assert_eq[I8](1, 1)","title":"Labels"},{"location":"ponytest--index/#setting-up-and-tearing-down-a-test-environment","text":"","title":"Setting up and tearing down a test environment"},{"location":"ponytest--index/#set-up","text":"Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env .","title":"Set Up"},{"location":"ponytest--index/#tear-down","text":"Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.","title":"Tear Down"},{"location":"ponytest--index/#example","text":"The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use ponytest use files class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String = temp-dir fun ref set_up(h: TestHelper)? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, temp-dir )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? = let dir = tmp_dir as FilePath // do something inside the temporary directory","title":"Example"},{"location":"ponytest--index/#public-types","text":"trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest","title":"Public Types"},{"location":"ponytest--index/#private-types","text":"trait _Group actor _ExclusiveGroup actor _SimultaneousGroup primitive _Color","title":"Private Types"},{"location":"ponytest-ITest/","text":"ITest [Source] interface ref ITest Public Functions apply [Source] fun box apply() : None val ? Returns None val ?","title":"interface ITest"},{"location":"ponytest-ITest/#itest","text":"[Source] interface ref ITest","title":"ITest"},{"location":"ponytest-ITest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-ITest/#apply","text":"[Source] fun box apply() : None val ?","title":"apply"},{"location":"ponytest-ITest/#returns","text":"None val ?","title":"Returns"},{"location":"ponytest-PonyTest/","text":"PonyTest [Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest Constructors create [Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^ Parameters env: Env val list: TestList tag Returns PonyTest tag^ Public Behaviours apply [Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso) Parameters test: UnitTest iso Private Behaviours _test_started [Source] A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. be _test_started( id: USize val) Parameters id: USize val _test_complete [Source] A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. be _test_complete( id: USize val, pass: Bool val, log: Array[String val] val) Parameters id: USize val pass: Bool val log: Array [ String val] val _all_tests_applied [Source] All our tests have been handed to apply(), setup for finishing be _all_tests_applied() Private Functions _find_group [Source] Find the group to use for the given group name, subject to the --sequential flag. fun ref _find_group( group_name: String val) : _Group tag Parameters group_name: String val Returns _Group tag _process_opts [Source] Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. fun ref _process_opts() : None val Returns None val _print_report [Source] The tests are all complete, print out the results. fun box _print_report() : None val Returns None val _plural [Source] Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". fun box _plural( n: USize val) : String val Parameters n: USize val Returns String val","title":"actor PonyTest"},{"location":"ponytest-PonyTest/#ponytest","text":"[Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest","title":"PonyTest"},{"location":"ponytest-PonyTest/#constructors","text":"","title":"Constructors"},{"location":"ponytest-PonyTest/#create","text":"[Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^","title":"create"},{"location":"ponytest-PonyTest/#parameters","text":"env: Env val list: TestList tag","title":"Parameters"},{"location":"ponytest-PonyTest/#returns","text":"PonyTest tag^","title":"Returns"},{"location":"ponytest-PonyTest/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-PonyTest/#apply","text":"[Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso)","title":"apply"},{"location":"ponytest-PonyTest/#parameters_1","text":"test: UnitTest iso","title":"Parameters"},{"location":"ponytest-PonyTest/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-PonyTest/#_test_started","text":"[Source] A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. be _test_started( id: USize val)","title":"_test_started"},{"location":"ponytest-PonyTest/#parameters_2","text":"id: USize val","title":"Parameters"},{"location":"ponytest-PonyTest/#_test_complete","text":"[Source] A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. be _test_complete( id: USize val, pass: Bool val, log: Array[String val] val)","title":"_test_complete"},{"location":"ponytest-PonyTest/#parameters_3","text":"id: USize val pass: Bool val log: Array [ String val] val","title":"Parameters"},{"location":"ponytest-PonyTest/#_all_tests_applied","text":"[Source] All our tests have been handed to apply(), setup for finishing be _all_tests_applied()","title":"_all_tests_applied"},{"location":"ponytest-PonyTest/#private-functions","text":"","title":"Private Functions"},{"location":"ponytest-PonyTest/#_find_group","text":"[Source] Find the group to use for the given group name, subject to the --sequential flag. fun ref _find_group( group_name: String val) : _Group tag","title":"_find_group"},{"location":"ponytest-PonyTest/#parameters_4","text":"group_name: String val","title":"Parameters"},{"location":"ponytest-PonyTest/#returns_1","text":"_Group tag","title":"Returns"},{"location":"ponytest-PonyTest/#_process_opts","text":"[Source] Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. fun ref _process_opts() : None val","title":"_process_opts"},{"location":"ponytest-PonyTest/#returns_2","text":"None val","title":"Returns"},{"location":"ponytest-PonyTest/#_print_report","text":"[Source] The tests are all complete, print out the results. fun box _print_report() : None val","title":"_print_report"},{"location":"ponytest-PonyTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-PonyTest/#_plural","text":"[Source] Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". fun box _plural( n: USize val) : String val","title":"_plural"},{"location":"ponytest-PonyTest/#parameters_5","text":"n: USize val","title":"Parameters"},{"location":"ponytest-PonyTest/#returns_4","text":"String val","title":"Returns"},{"location":"ponytest-TestHelper/","text":"TestHelper [Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper Constructors _create [Source] Create a new TestHelper. new val _create( runner: _TestRunner tag, env': Env val) : TestHelper val^ Parameters runner: _TestRunner tag env': Env val Returns TestHelper val^ Public fields let env: Env val [Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests. Public Functions log [Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = seq) : None val Parameters msg: String val verbose: Bool val = seq Returns None val fail [Source] Flag the test as having failed. fun box fail( msg: String val = seq) : None val Parameters msg: String val = seq Returns None val assert_true [Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters actual: Bool val msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_false [Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters actual: Bool val msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_error [Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters test: ITest box msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_no_error [Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters test: ITest box msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_is[A: A] [Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_eq[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read Stringable #read)]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_isnt[A: A] [Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_ne[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read Stringable #read)]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_array_eq[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the contents of the 2 given ReadSeqs are equal. fun box assert_array_eq[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq Returns Bool val assert_array_eq_unordered[A: ( Equatable [A] #read Stringable #read)] [Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. fun box assert_array_eq_unordered[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val Parameters expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq Returns Bool val long_test [Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val Parameters timeout: U64 val Returns None val complete [Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val Parameters success: Bool val Returns None val expect_action [Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val Parameters name: String val Returns None val complete_action [Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val Parameters name: String val Returns None val fail_action [Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val Parameters name: String val Returns None val dispose_when_done [Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val Parameters disposable: DisposableActor tag Returns None val Private Functions _check_is[A: A] [Source] Check that the 2 given expressions resolve to the same instance fun box _check_is[A: A]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _check_eq[A: ( Equatable [A] #read Stringable )] [Source] Check that the 2 given expressions are equal. fun box _check_eq[A: (Equatable[A] #read Stringable)]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _check_isnt[A: A] [Source] Check that the 2 given expressions resolve to different instances. fun box _check_isnt[A: A]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val not_expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _check_ne[A: ( Equatable [A] #read Stringable )] [Source] Check that the 2 given expressions are not equal. fun box _check_ne[A: (Equatable[A] #read Stringable)]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters check: String val not_expect: A actual: A msg: String val loc: SourceLoc val Returns Bool val _format_loc [Source] fun box _format_loc( loc: SourceLoc val) : String val Parameters loc: SourceLoc val Returns String val _print_array[A: Stringable #read] [Source] Generate a printable string of the contents of the given readseq to use in error messages. fun box _print_array[A: Stringable #read]( array: ReadSeq[A] box) : String val Parameters array: ReadSeq [A] box Returns String val","title":"class TestHelper"},{"location":"ponytest-TestHelper/#testhelper","text":"[Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper","title":"TestHelper"},{"location":"ponytest-TestHelper/#constructors","text":"","title":"Constructors"},{"location":"ponytest-TestHelper/#_create","text":"[Source] Create a new TestHelper. new val _create( runner: _TestRunner tag, env': Env val) : TestHelper val^","title":"_create"},{"location":"ponytest-TestHelper/#parameters","text":"runner: _TestRunner tag env': Env val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns","text":"TestHelper val^","title":"Returns"},{"location":"ponytest-TestHelper/#public-fields","text":"","title":"Public fields"},{"location":"ponytest-TestHelper/#let-env-env-val","text":"[Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests.","title":"let env: Env val"},{"location":"ponytest-TestHelper/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestHelper/#log","text":"[Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = seq) : None val","title":"log"},{"location":"ponytest-TestHelper/#parameters_1","text":"msg: String val verbose: Bool val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_1","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail","text":"[Source] Flag the test as having failed. fun box fail( msg: String val = seq) : None val","title":"fail"},{"location":"ponytest-TestHelper/#parameters_2","text":"msg: String val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_2","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_true","text":"[Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_true"},{"location":"ponytest-TestHelper/#parameters_3","text":"actual: Bool val msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_false","text":"[Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_false"},{"location":"ponytest-TestHelper/#parameters_4","text":"actual: Bool val msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_error","text":"[Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_error"},{"location":"ponytest-TestHelper/#parameters_5","text":"test: ITest box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_no_error","text":"[Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_no_error"},{"location":"ponytest-TestHelper/#parameters_6","text":"test: ITest box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_6","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_is91a-a93","text":"[Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_7","text":"expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_7","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_eq91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read Stringable #read)]( expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_8","text":"expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_8","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_isnt91a-a93","text":"[Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_9","text":"not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_9","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_ne91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read Stringable #read)]( not_expect: A, actual: A, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_10","text":"not_expect: A actual: A msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_10","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal. fun box assert_array_eq[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_11","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_11","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq_unordered91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. fun box assert_array_eq_unordered[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = seq, loc: SourceLoc val = seq) : Bool val","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_12","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = seq loc: SourceLoc val = seq","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_12","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#long_test","text":"[Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val","title":"long_test"},{"location":"ponytest-TestHelper/#parameters_13","text":"timeout: U64 val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_13","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete","text":"[Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val","title":"complete"},{"location":"ponytest-TestHelper/#parameters_14","text":"success: Bool val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_14","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#expect_action","text":"[Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val","title":"expect_action"},{"location":"ponytest-TestHelper/#parameters_15","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_15","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete_action","text":"[Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val","title":"complete_action"},{"location":"ponytest-TestHelper/#parameters_16","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_16","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail_action","text":"[Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val","title":"fail_action"},{"location":"ponytest-TestHelper/#parameters_17","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_17","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#dispose_when_done","text":"[Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val","title":"dispose_when_done"},{"location":"ponytest-TestHelper/#parameters_18","text":"disposable: DisposableActor tag","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_18","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#private-functions","text":"","title":"Private Functions"},{"location":"ponytest-TestHelper/#_check_is91a-a93","text":"[Source] Check that the 2 given expressions resolve to the same instance fun box _check_is[A: A]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_19","text":"check: String val expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_19","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_eq91a-equatable91a93-read-stringable93","text":"[Source] Check that the 2 given expressions are equal. fun box _check_eq[A: (Equatable[A] #read Stringable)]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_eq[A: (Equatable[A] #read &amp; Stringable)]"},{"location":"ponytest-TestHelper/#parameters_20","text":"check: String val expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_20","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_isnt91a-a93","text":"[Source] Check that the 2 given expressions resolve to different instances. fun box _check_isnt[A: A]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_21","text":"check: String val not_expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_21","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_ne91a-equatable91a93-read-stringable93","text":"[Source] Check that the 2 given expressions are not equal. fun box _check_ne[A: (Equatable[A] #read Stringable)]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_ne[A: (Equatable[A] #read &amp; Stringable)]"},{"location":"ponytest-TestHelper/#parameters_22","text":"check: String val not_expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_22","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_format_loc","text":"[Source] fun box _format_loc( loc: SourceLoc val) : String val","title":"_format_loc"},{"location":"ponytest-TestHelper/#parameters_23","text":"loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_23","text":"String val","title":"Returns"},{"location":"ponytest-TestHelper/#_print_array91a-stringable-read93","text":"[Source] Generate a printable string of the contents of the given readseq to use in error messages. fun box _print_array[A: Stringable #read]( array: ReadSeq[A] box) : String val","title":"_print_array[A: Stringable #read]"},{"location":"ponytest-TestHelper/#parameters_24","text":"array: ReadSeq [A] box","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_24","text":"String val","title":"Returns"},{"location":"ponytest-TestList/","text":"TestList [Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList Public Functions tests [Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) = test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val Parameters test: PonyTest tag Returns None val","title":"trait TestList"},{"location":"ponytest-TestList/#testlist","text":"[Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList","title":"TestList"},{"location":"ponytest-TestList/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestList/#tests","text":"[Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) = test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val","title":"tests"},{"location":"ponytest-TestList/#parameters","text":"test: PonyTest tag","title":"Parameters"},{"location":"ponytest-TestList/#returns","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/","text":"UnitTest [Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest Public Functions name [Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val Returns String val exclusion_group [Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val Returns String val apply [Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ? Parameters h: TestHelper val Returns None val ? timed_out [Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val Parameters h: TestHelper val Returns None val set_up [Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ? Parameters h: TestHelper val Returns None val ? tear_down [Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val Parameters h: TestHelper val Returns None val label [Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val Returns String val","title":"trait UnitTest"},{"location":"ponytest-UnitTest/#unittest","text":"[Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest","title":"UnitTest"},{"location":"ponytest-UnitTest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-UnitTest/#name","text":"[Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val","title":"name"},{"location":"ponytest-UnitTest/#returns","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#exclusion_group","text":"[Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val","title":"exclusion_group"},{"location":"ponytest-UnitTest/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#apply","text":"[Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ?","title":"apply"},{"location":"ponytest-UnitTest/#parameters","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_2","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#timed_out","text":"[Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val","title":"timed_out"},{"location":"ponytest-UnitTest/#parameters_1","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#set_up","text":"[Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ?","title":"set_up"},{"location":"ponytest-UnitTest/#parameters_2","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#tear_down","text":"[Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val","title":"tear_down"},{"location":"ponytest-UnitTest/#parameters_3","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_5","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#label","text":"[Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val","title":"label"},{"location":"ponytest-UnitTest/#returns_6","text":"String val","title":"Returns"},{"location":"ponytest-_Color/","text":"_Color [Source] Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. primitive val _Color Constructors create [Source] new val create() : _Color val^ Returns _Color val^ Public Functions reset [Source] Resets all colours and text styles to the default. fun box reset() : String val Returns String val red [Source] Bright red text. fun box red() : String val Returns String val green [Source] Bright green text. fun box green() : String val Returns String val eq [Source] fun box eq( that: _Color val) : Bool val Parameters that: _Color val Returns Bool val ne [Source] fun box ne( that: _Color val) : Bool val Parameters that: _Color val Returns Bool val","title":"primitive _Color"},{"location":"ponytest-_Color/#_color","text":"[Source] Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. primitive val _Color","title":"_Color"},{"location":"ponytest-_Color/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_Color/#create","text":"[Source] new val create() : _Color val^","title":"create"},{"location":"ponytest-_Color/#returns","text":"_Color val^","title":"Returns"},{"location":"ponytest-_Color/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-_Color/#reset","text":"[Source] Resets all colours and text styles to the default. fun box reset() : String val","title":"reset"},{"location":"ponytest-_Color/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#red","text":"[Source] Bright red text. fun box red() : String val","title":"red"},{"location":"ponytest-_Color/#returns_2","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#green","text":"[Source] Bright green text. fun box green() : String val","title":"green"},{"location":"ponytest-_Color/#returns_3","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#eq","text":"[Source] fun box eq( that: _Color val) : Bool val","title":"eq"},{"location":"ponytest-_Color/#parameters","text":"that: _Color val","title":"Parameters"},{"location":"ponytest-_Color/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-_Color/#ne","text":"[Source] fun box ne( that: _Color val) : Bool val","title":"ne"},{"location":"ponytest-_Color/#parameters_1","text":"that: _Color val","title":"Parameters"},{"location":"ponytest-_Color/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-_ExclusiveGroup/","text":"_ExclusiveGroup [Source] Test group in which we only ever have one test running at a time. actor tag _ExclusiveGroup is _Group tag Implements _Group tag Constructors create [Source] new tag create() : _ExclusiveGroup tag^ Returns _ExclusiveGroup tag^ Public Behaviours apply [Source] be apply( runner: _TestRunner tag) Parameters runner: _TestRunner tag Private Behaviours _test_complete [Source] be _test_complete( runner: _TestRunner tag) Parameters runner: _TestRunner tag","title":"actor _ExclusiveGroup"},{"location":"ponytest-_ExclusiveGroup/#_exclusivegroup","text":"[Source] Test group in which we only ever have one test running at a time. actor tag _ExclusiveGroup is _Group tag","title":"_ExclusiveGroup"},{"location":"ponytest-_ExclusiveGroup/#implements","text":"_Group tag","title":"Implements"},{"location":"ponytest-_ExclusiveGroup/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_ExclusiveGroup/#create","text":"[Source] new tag create() : _ExclusiveGroup tag^","title":"create"},{"location":"ponytest-_ExclusiveGroup/#returns","text":"_ExclusiveGroup tag^","title":"Returns"},{"location":"ponytest-_ExclusiveGroup/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_ExclusiveGroup/#apply","text":"[Source] be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_ExclusiveGroup/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_ExclusiveGroup/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_ExclusiveGroup/#_test_complete","text":"[Source] be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_ExclusiveGroup/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_Group/","text":"_Group [Source] Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. trait tag _Group Public Behaviours apply [Source] Run the given test, or queue it and run later, as appropriate. be apply( runner: _TestRunner tag) Parameters runner: _TestRunner tag Private Behaviours _test_complete [Source] The specified test has completed. be _test_complete( runner: _TestRunner tag) Parameters runner: _TestRunner tag","title":"trait _Group"},{"location":"ponytest-_Group/#_group","text":"[Source] Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. trait tag _Group","title":"_Group"},{"location":"ponytest-_Group/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_Group/#apply","text":"[Source] Run the given test, or queue it and run later, as appropriate. be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_Group/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_Group/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_Group/#_test_complete","text":"[Source] The specified test has completed. be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_Group/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_SimultaneousGroup/","text":"_SimultaneousGroup [Source] Test group in which all tests can run concurrently. actor tag _SimultaneousGroup is _Group tag Implements _Group tag Constructors create [Source] new tag create() : _SimultaneousGroup tag^ Returns _SimultaneousGroup tag^ Public Behaviours apply [Source] be apply( runner: _TestRunner tag) Parameters runner: _TestRunner tag Private Behaviours _test_complete [Source] be _test_complete( runner: _TestRunner tag) Parameters runner: _TestRunner tag","title":"actor _SimultaneousGroup"},{"location":"ponytest-_SimultaneousGroup/#_simultaneousgroup","text":"[Source] Test group in which all tests can run concurrently. actor tag _SimultaneousGroup is _Group tag","title":"_SimultaneousGroup"},{"location":"ponytest-_SimultaneousGroup/#implements","text":"_Group tag","title":"Implements"},{"location":"ponytest-_SimultaneousGroup/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_SimultaneousGroup/#create","text":"[Source] new tag create() : _SimultaneousGroup tag^","title":"create"},{"location":"ponytest-_SimultaneousGroup/#returns","text":"_SimultaneousGroup tag^","title":"Returns"},{"location":"ponytest-_SimultaneousGroup/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_SimultaneousGroup/#apply","text":"[Source] be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_SimultaneousGroup/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_SimultaneousGroup/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_SimultaneousGroup/#_test_complete","text":"[Source] be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_SimultaneousGroup/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"time--index/","text":"Time Package The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. Public Types actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos Private Types type _Clock primitive _ClockRealtime primitive _ClockMonotonic class _TimingWheel","title":"Package"},{"location":"time--index/#time-package","text":"The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.","title":"Time Package"},{"location":"time--index/#public-types","text":"actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos","title":"Public Types"},{"location":"time--index/#private-types","text":"type _Clock primitive _ClockRealtime primitive _ClockMonotonic class _TimingWheel","title":"Private Types"},{"location":"time-Nanos/","text":"Nanos [Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos Constructors create [Source] new val create() : Nanos val^ Returns Nanos val^ Public Functions from_seconds [Source] fun box from_seconds( t: U64 val) : U64 val Parameters t: U64 val Returns U64 val from_millis [Source] fun box from_millis( t: U64 val) : U64 val Parameters t: U64 val Returns U64 val from_micros [Source] fun box from_micros( t: U64 val) : U64 val Parameters t: U64 val Returns U64 val from_seconds_f [Source] fun box from_seconds_f( t: F64 val) : U64 val Parameters t: F64 val Returns U64 val from_millis_f [Source] fun box from_millis_f( t: F64 val) : U64 val Parameters t: F64 val Returns U64 val from_micros_f [Source] fun box from_micros_f( t: F64 val) : U64 val Parameters t: F64 val Returns U64 val from_wall_clock [Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val Parameters wall: ( I64 val , I64 val) Returns U64 val eq [Source] fun box eq( that: Nanos val) : Bool val Parameters that: Nanos val Returns Bool val ne [Source] fun box ne( that: Nanos val) : Bool val Parameters that: Nanos val Returns Bool val","title":"primitive Nanos"},{"location":"time-Nanos/#nanos","text":"[Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos","title":"Nanos"},{"location":"time-Nanos/#constructors","text":"","title":"Constructors"},{"location":"time-Nanos/#create","text":"[Source] new val create() : Nanos val^","title":"create"},{"location":"time-Nanos/#returns","text":"Nanos val^","title":"Returns"},{"location":"time-Nanos/#public-functions","text":"","title":"Public Functions"},{"location":"time-Nanos/#from_seconds","text":"[Source] fun box from_seconds( t: U64 val) : U64 val","title":"from_seconds"},{"location":"time-Nanos/#parameters","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_1","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis","text":"[Source] fun box from_millis( t: U64 val) : U64 val","title":"from_millis"},{"location":"time-Nanos/#parameters_1","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_2","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros","text":"[Source] fun box from_micros( t: U64 val) : U64 val","title":"from_micros"},{"location":"time-Nanos/#parameters_2","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_seconds_f","text":"[Source] fun box from_seconds_f( t: F64 val) : U64 val","title":"from_seconds_f"},{"location":"time-Nanos/#parameters_3","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis_f","text":"[Source] fun box from_millis_f( t: F64 val) : U64 val","title":"from_millis_f"},{"location":"time-Nanos/#parameters_4","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros_f","text":"[Source] fun box from_micros_f( t: F64 val) : U64 val","title":"from_micros_f"},{"location":"time-Nanos/#parameters_5","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_wall_clock","text":"[Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val","title":"from_wall_clock"},{"location":"time-Nanos/#parameters_6","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Nanos/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#eq","text":"[Source] fun box eq( that: Nanos val) : Bool val","title":"eq"},{"location":"time-Nanos/#parameters_7","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_8","text":"Bool val","title":"Returns"},{"location":"time-Nanos/#ne","text":"[Source] fun box ne( that: Nanos val) : Bool val","title":"ne"},{"location":"time-Nanos/#parameters_8","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-PosixDate/","text":"PosixDate [Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate Constructors create [Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = seq, nanoseconds: I64 val = seq) : PosixDate ref^ Parameters seconds: I64 val = seq nanoseconds: I64 val = seq Returns PosixDate ref^ Public fields var nsec: I32 val [Source] var sec: I32 val [Source] var min: I32 val [Source] var hour: I32 val [Source] var day_of_month: I32 val [Source] var month: I32 val [Source] var year: I32 val [Source] var day_of_week: I32 val [Source] var day_of_year: I32 val [Source] Public Functions time [Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val Returns I64 val normal [Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val Returns None val format [Source] Format the time as for strftime. fun box format( fmt: String val) : String val Parameters fmt: String val Returns String val Private Functions _negative_to_zero [Source] fun box _negative_to_zero( value: I64 val) : I64 val Parameters value: I64 val Returns I64 val","title":"class PosixDate"},{"location":"time-PosixDate/#posixdate","text":"[Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate","title":"PosixDate"},{"location":"time-PosixDate/#constructors","text":"","title":"Constructors"},{"location":"time-PosixDate/#create","text":"[Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = seq, nanoseconds: I64 val = seq) : PosixDate ref^","title":"create"},{"location":"time-PosixDate/#parameters","text":"seconds: I64 val = seq nanoseconds: I64 val = seq","title":"Parameters"},{"location":"time-PosixDate/#returns","text":"PosixDate ref^","title":"Returns"},{"location":"time-PosixDate/#public-fields","text":"","title":"Public fields"},{"location":"time-PosixDate/#var-nsec-i32-val","text":"[Source]","title":"var nsec: I32 val"},{"location":"time-PosixDate/#var-sec-i32-val","text":"[Source]","title":"var sec: I32 val"},{"location":"time-PosixDate/#var-min-i32-val","text":"[Source]","title":"var min: I32 val"},{"location":"time-PosixDate/#var-hour-i32-val","text":"[Source]","title":"var hour: I32 val"},{"location":"time-PosixDate/#var-day_of_month-i32-val","text":"[Source]","title":"var day_of_month: I32 val"},{"location":"time-PosixDate/#var-month-i32-val","text":"[Source]","title":"var month: I32 val"},{"location":"time-PosixDate/#var-year-i32-val","text":"[Source]","title":"var year: I32 val"},{"location":"time-PosixDate/#var-day_of_week-i32-val","text":"[Source]","title":"var day_of_week: I32 val"},{"location":"time-PosixDate/#var-day_of_year-i32-val","text":"[Source]","title":"var day_of_year: I32 val"},{"location":"time-PosixDate/#public-functions","text":"","title":"Public Functions"},{"location":"time-PosixDate/#time","text":"[Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val","title":"time"},{"location":"time-PosixDate/#returns_1","text":"I64 val","title":"Returns"},{"location":"time-PosixDate/#normal","text":"[Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val","title":"normal"},{"location":"time-PosixDate/#returns_2","text":"None val","title":"Returns"},{"location":"time-PosixDate/#format","text":"[Source] Format the time as for strftime. fun box format( fmt: String val) : String val","title":"format"},{"location":"time-PosixDate/#parameters_1","text":"fmt: String val","title":"Parameters"},{"location":"time-PosixDate/#returns_3","text":"String val","title":"Returns"},{"location":"time-PosixDate/#private-functions","text":"","title":"Private Functions"},{"location":"time-PosixDate/#_negative_to_zero","text":"[Source] fun box _negative_to_zero( value: I64 val) : I64 val","title":"_negative_to_zero"},{"location":"time-PosixDate/#parameters_2","text":"value: I64 val","title":"Parameters"},{"location":"time-PosixDate/#returns_4","text":"I64 val","title":"Returns"},{"location":"time-Time/","text":"Time [Source] A collection of ways to fetch the current time. primitive val Time Constructors create [Source] new val create() : Time val^ Returns Time val^ Public Functions now [Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val) Returns ( I64 val , I64 val) seconds [Source] The wall-clock adjusted system time. fun box seconds() : I64 val Returns I64 val millis [Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val Returns U64 val micros [Source] Monotonic unadjusted microseconds. fun box micros() : U64 val Returns U64 val nanos [Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val Returns U64 val cycles [Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val Returns U64 val perf_begin [Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val Returns U64 val perf_end [Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val Returns U64 val eq [Source] fun box eq( that: Time val) : Bool val Parameters that: Time val Returns Bool val ne [Source] fun box ne( that: Time val) : Bool val Parameters that: Time val Returns Bool val Private Functions _clock_gettime [Source] Return a clock time on linux and bsd. fun box _clock_gettime( clock: (_ClockRealtime val | _ClockMonotonic val)) : (I64 val , I64 val) Parameters clock: ( _ClockRealtime val | _ClockMonotonic val) Returns ( I64 val , I64 val) _query_performance_counter [Source] Return QPC and QPF. fun box _query_performance_counter() : (U64 val , U64 val) Returns ( U64 val , U64 val)","title":"primitive Time"},{"location":"time-Time/#time","text":"[Source] A collection of ways to fetch the current time. primitive val Time","title":"Time"},{"location":"time-Time/#constructors","text":"","title":"Constructors"},{"location":"time-Time/#create","text":"[Source] new val create() : Time val^","title":"create"},{"location":"time-Time/#returns","text":"Time val^","title":"Returns"},{"location":"time-Time/#public-functions","text":"","title":"Public Functions"},{"location":"time-Time/#now","text":"[Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val)","title":"now"},{"location":"time-Time/#returns_1","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#seconds","text":"[Source] The wall-clock adjusted system time. fun box seconds() : I64 val","title":"seconds"},{"location":"time-Time/#returns_2","text":"I64 val","title":"Returns"},{"location":"time-Time/#millis","text":"[Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val","title":"millis"},{"location":"time-Time/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Time/#micros","text":"[Source] Monotonic unadjusted microseconds. fun box micros() : U64 val","title":"micros"},{"location":"time-Time/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Time/#nanos","text":"[Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val","title":"nanos"},{"location":"time-Time/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Time/#cycles","text":"[Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val","title":"cycles"},{"location":"time-Time/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_begin","text":"[Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val","title":"perf_begin"},{"location":"time-Time/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_end","text":"[Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val","title":"perf_end"},{"location":"time-Time/#returns_8","text":"U64 val","title":"Returns"},{"location":"time-Time/#eq","text":"[Source] fun box eq( that: Time val) : Bool val","title":"eq"},{"location":"time-Time/#parameters","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-Time/#ne","text":"[Source] fun box ne( that: Time val) : Bool val","title":"ne"},{"location":"time-Time/#parameters_1","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_10","text":"Bool val","title":"Returns"},{"location":"time-Time/#private-functions","text":"","title":"Private Functions"},{"location":"time-Time/#_clock_gettime","text":"[Source] Return a clock time on linux and bsd. fun box _clock_gettime( clock: (_ClockRealtime val | _ClockMonotonic val)) : (I64 val , I64 val)","title":"_clock_gettime"},{"location":"time-Time/#parameters_2","text":"clock: ( _ClockRealtime val | _ClockMonotonic val)","title":"Parameters"},{"location":"time-Time/#returns_11","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#_query_performance_counter","text":"[Source] Return QPC and QPF. fun box _query_performance_counter() : (U64 val , U64 val)","title":"_query_performance_counter"},{"location":"time-Time/#returns_12","text":"( U64 val , U64 val)","title":"Returns"},{"location":"time-Timer/","text":"Timer [Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use time actor Main new create(env: Env) = let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) = _env = env fun ref apply(timer: Timer, count: U64): Bool = _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer Constructors create [Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = seq) : Timer iso^ Parameters notify: TimerNotify iso expiration: U64 val interval: U64 val = seq Returns Timer iso^ abs [Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = seq) : Timer ref^ Parameters notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = seq Returns Timer ref^ Private Functions _cancel [Source] Remove the timer from any list. fun ref _cancel() : None val Returns None val _get_node [Source] Returns the list node pointing to the timer. Used to schedule the timer in a queue. fun ref _get_node() : ListNode[Timer ref] ref Returns ListNode [ Timer ref] ref _slop [Source] Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. fun ref _slop( bits: USize val) : None val Parameters bits: USize val Returns None val _fire [Source] A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. fun ref _fire( current: U64 val) : Bool val Parameters current: U64 val Returns Bool val _next [Source] Returns the next expiration time. fun box _next() : U64 val Returns U64 val _abs_expiration_time [Source] Converts a wall-clock adjusted system time to absolute expiration time fun tag _abs_expiration_time( wall: (I64 val , I64 val)) : U64 val Parameters wall: ( I64 val , I64 val) Returns U64 val","title":"class Timer"},{"location":"time-Timer/#timer","text":"[Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use time actor Main new create(env: Env) = let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) = _env = env fun ref apply(timer: Timer, count: U64): Bool = _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer","title":"Timer"},{"location":"time-Timer/#constructors","text":"","title":"Constructors"},{"location":"time-Timer/#create","text":"[Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = seq) : Timer iso^","title":"create"},{"location":"time-Timer/#parameters","text":"notify: TimerNotify iso expiration: U64 val interval: U64 val = seq","title":"Parameters"},{"location":"time-Timer/#returns","text":"Timer iso^","title":"Returns"},{"location":"time-Timer/#abs","text":"[Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = seq) : Timer ref^","title":"abs"},{"location":"time-Timer/#parameters_1","text":"notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = seq","title":"Parameters"},{"location":"time-Timer/#returns_1","text":"Timer ref^","title":"Returns"},{"location":"time-Timer/#private-functions","text":"","title":"Private Functions"},{"location":"time-Timer/#_cancel","text":"[Source] Remove the timer from any list. fun ref _cancel() : None val","title":"_cancel"},{"location":"time-Timer/#returns_2","text":"None val","title":"Returns"},{"location":"time-Timer/#_get_node","text":"[Source] Returns the list node pointing to the timer. Used to schedule the timer in a queue. fun ref _get_node() : ListNode[Timer ref] ref","title":"_get_node"},{"location":"time-Timer/#returns_3","text":"ListNode [ Timer ref] ref","title":"Returns"},{"location":"time-Timer/#_slop","text":"[Source] Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. fun ref _slop( bits: USize val) : None val","title":"_slop"},{"location":"time-Timer/#parameters_2","text":"bits: USize val","title":"Parameters"},{"location":"time-Timer/#returns_4","text":"None val","title":"Returns"},{"location":"time-Timer/#_fire","text":"[Source] A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. fun ref _fire( current: U64 val) : Bool val","title":"_fire"},{"location":"time-Timer/#parameters_3","text":"current: U64 val","title":"Parameters"},{"location":"time-Timer/#returns_5","text":"Bool val","title":"Returns"},{"location":"time-Timer/#_next","text":"[Source] Returns the next expiration time. fun box _next() : U64 val","title":"_next"},{"location":"time-Timer/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Timer/#_abs_expiration_time","text":"[Source] Converts a wall-clock adjusted system time to absolute expiration time fun tag _abs_expiration_time( wall: (I64 val , I64 val)) : U64 val","title":"_abs_expiration_time"},{"location":"time-Timer/#parameters_4","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Timer/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-TimerNotify/","text":"TimerNotify [Source] Notifications for timer. interface ref TimerNotify Public Functions apply [Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters timer: Timer ref count: U64 val Returns Bool val cancel [Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val Parameters timer: Timer ref Returns None val","title":"interface TimerNotify"},{"location":"time-TimerNotify/#timernotify","text":"[Source] Notifications for timer. interface ref TimerNotify","title":"TimerNotify"},{"location":"time-TimerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"time-TimerNotify/#apply","text":"[Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"time-TimerNotify/#parameters","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"time-TimerNotify/#returns","text":"Bool val","title":"Returns"},{"location":"time-TimerNotify/#cancel","text":"[Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"time-TimerNotify/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-TimerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/","text":"Timers [Source] A hierarchical set of timing wheels. actor tag Timers Constructors create [Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = seq) : Timers tag^ Parameters slop: USize val = seq Returns Timers tag^ Public Behaviours apply [Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso) Parameters timer: Timer iso cancel [Source] Cancels a timer. be cancel( timer: Timer tag) Parameters timer: Timer tag dispose [Source] Dispose of this set of timing wheels. be dispose() Private Behaviours _event_notify [Source] When the event fires, advance the timing wheels. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val Private Functions _advance [Source] Update the current time, process all the timing wheels, and set the event for the next time we need to advance. fun ref _advance() : None val Returns None val _fire [Source] Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. fun ref _fire( timer: Timer ref) : None val Parameters timer: Timer ref Returns None val _next [Source] Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. fun box _next() : U64 val Returns U64 val _set_time [Source] Set the current time with precision reduced by the slop bits. Return the elapsed time. fun ref _set_time() : U64 val Returns U64 val _get_wheel [Source] Get the hierarchical timing wheel for the given time until expiration. fun ref _get_wheel( rem: U64 val) : _TimingWheel ref ? Parameters rem: U64 val Returns _TimingWheel ref ? _expiration_max [Source] Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. fun tag _expiration_max() : U64 val Returns U64 val _wheels [Source] fun tag _wheels() : USize val Returns USize val _bits [Source] fun tag _bits() : USize val Returns USize val","title":"actor Timers"},{"location":"time-Timers/#timers","text":"[Source] A hierarchical set of timing wheels. actor tag Timers","title":"Timers"},{"location":"time-Timers/#constructors","text":"","title":"Constructors"},{"location":"time-Timers/#create","text":"[Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = seq) : Timers tag^","title":"create"},{"location":"time-Timers/#parameters","text":"slop: USize val = seq","title":"Parameters"},{"location":"time-Timers/#returns","text":"Timers tag^","title":"Returns"},{"location":"time-Timers/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"time-Timers/#apply","text":"[Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso)","title":"apply"},{"location":"time-Timers/#parameters_1","text":"timer: Timer iso","title":"Parameters"},{"location":"time-Timers/#cancel","text":"[Source] Cancels a timer. be cancel( timer: Timer tag)","title":"cancel"},{"location":"time-Timers/#parameters_2","text":"timer: Timer tag","title":"Parameters"},{"location":"time-Timers/#dispose","text":"[Source] Dispose of this set of timing wheels. be dispose()","title":"dispose"},{"location":"time-Timers/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"time-Timers/#_event_notify","text":"[Source] When the event fires, advance the timing wheels. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"time-Timers/#parameters_3","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"time-Timers/#private-functions","text":"","title":"Private Functions"},{"location":"time-Timers/#_advance","text":"[Source] Update the current time, process all the timing wheels, and set the event for the next time we need to advance. fun ref _advance() : None val","title":"_advance"},{"location":"time-Timers/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/#_fire","text":"[Source] Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. fun ref _fire( timer: Timer ref) : None val","title":"_fire"},{"location":"time-Timers/#parameters_4","text":"timer: Timer ref","title":"Parameters"},{"location":"time-Timers/#returns_2","text":"None val","title":"Returns"},{"location":"time-Timers/#_next","text":"[Source] Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. fun box _next() : U64 val","title":"_next"},{"location":"time-Timers/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_set_time","text":"[Source] Set the current time with precision reduced by the slop bits. Return the elapsed time. fun ref _set_time() : U64 val","title":"_set_time"},{"location":"time-Timers/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_get_wheel","text":"[Source] Get the hierarchical timing wheel for the given time until expiration. fun ref _get_wheel( rem: U64 val) : _TimingWheel ref ?","title":"_get_wheel"},{"location":"time-Timers/#parameters_5","text":"rem: U64 val","title":"Parameters"},{"location":"time-Timers/#returns_5","text":"_TimingWheel ref ?","title":"Returns"},{"location":"time-Timers/#_expiration_max","text":"[Source] Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. fun tag _expiration_max() : U64 val","title":"_expiration_max"},{"location":"time-Timers/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_wheels","text":"[Source] fun tag _wheels() : USize val","title":"_wheels"},{"location":"time-Timers/#returns_7","text":"USize val","title":"Returns"},{"location":"time-Timers/#_bits","text":"[Source] fun tag _bits() : USize val","title":"_bits"},{"location":"time-Timers/#returns_8","text":"USize val","title":"Returns"},{"location":"time-_Clock/","text":"_Clock [Source] type _Clock is (_ClockRealtime val | _ClockMonotonic val) Type Alias For ( _ClockRealtime val | _ClockMonotonic val)","title":"type _Clock"},{"location":"time-_Clock/#_clock","text":"[Source] type _Clock is (_ClockRealtime val | _ClockMonotonic val)","title":"_Clock"},{"location":"time-_Clock/#type-alias-for","text":"( _ClockRealtime val | _ClockMonotonic val)","title":"Type Alias For"},{"location":"time-_ClockMonotonic/","text":"_ClockMonotonic [Source] primitive val _ClockMonotonic Constructors create [Source] new val create() : _ClockMonotonic val^ Returns _ClockMonotonic val^ Public Functions apply [Source] fun box apply() : U32 val Returns U32 val eq [Source] fun box eq( that: _ClockMonotonic val) : Bool val Parameters that: _ClockMonotonic val Returns Bool val ne [Source] fun box ne( that: _ClockMonotonic val) : Bool val Parameters that: _ClockMonotonic val Returns Bool val","title":"primitive _ClockMonotonic"},{"location":"time-_ClockMonotonic/#_clockmonotonic","text":"[Source] primitive val _ClockMonotonic","title":"_ClockMonotonic"},{"location":"time-_ClockMonotonic/#constructors","text":"","title":"Constructors"},{"location":"time-_ClockMonotonic/#create","text":"[Source] new val create() : _ClockMonotonic val^","title":"create"},{"location":"time-_ClockMonotonic/#returns","text":"_ClockMonotonic val^","title":"Returns"},{"location":"time-_ClockMonotonic/#public-functions","text":"","title":"Public Functions"},{"location":"time-_ClockMonotonic/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"time-_ClockMonotonic/#returns_1","text":"U32 val","title":"Returns"},{"location":"time-_ClockMonotonic/#eq","text":"[Source] fun box eq( that: _ClockMonotonic val) : Bool val","title":"eq"},{"location":"time-_ClockMonotonic/#parameters","text":"that: _ClockMonotonic val","title":"Parameters"},{"location":"time-_ClockMonotonic/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_ClockMonotonic/#ne","text":"[Source] fun box ne( that: _ClockMonotonic val) : Bool val","title":"ne"},{"location":"time-_ClockMonotonic/#parameters_1","text":"that: _ClockMonotonic val","title":"Parameters"},{"location":"time-_ClockMonotonic/#returns_3","text":"Bool val","title":"Returns"},{"location":"time-_ClockRealtime/","text":"_ClockRealtime [Source] primitive val _ClockRealtime Constructors create [Source] new val create() : _ClockRealtime val^ Returns _ClockRealtime val^ Public Functions apply [Source] fun box apply() : U32 val Returns U32 val eq [Source] fun box eq( that: _ClockRealtime val) : Bool val Parameters that: _ClockRealtime val Returns Bool val ne [Source] fun box ne( that: _ClockRealtime val) : Bool val Parameters that: _ClockRealtime val Returns Bool val","title":"primitive _ClockRealtime"},{"location":"time-_ClockRealtime/#_clockrealtime","text":"[Source] primitive val _ClockRealtime","title":"_ClockRealtime"},{"location":"time-_ClockRealtime/#constructors","text":"","title":"Constructors"},{"location":"time-_ClockRealtime/#create","text":"[Source] new val create() : _ClockRealtime val^","title":"create"},{"location":"time-_ClockRealtime/#returns","text":"_ClockRealtime val^","title":"Returns"},{"location":"time-_ClockRealtime/#public-functions","text":"","title":"Public Functions"},{"location":"time-_ClockRealtime/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"time-_ClockRealtime/#returns_1","text":"U32 val","title":"Returns"},{"location":"time-_ClockRealtime/#eq","text":"[Source] fun box eq( that: _ClockRealtime val) : Bool val","title":"eq"},{"location":"time-_ClockRealtime/#parameters","text":"that: _ClockRealtime val","title":"Parameters"},{"location":"time-_ClockRealtime/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_ClockRealtime/#ne","text":"[Source] fun box ne( that: _ClockRealtime val) : Bool val","title":"ne"},{"location":"time-_ClockRealtime/#parameters_1","text":"that: _ClockRealtime val","title":"Parameters"},{"location":"time-_ClockRealtime/#returns_3","text":"Bool val","title":"Returns"},{"location":"time-_TimingWheel/","text":"_TimingWheel [Source] A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. class ref _TimingWheel Constructors create [Source] Create a timing wheel at the given hierarchical level. new ref create( index: USize val) : _TimingWheel ref^ Parameters index: USize val Returns _TimingWheel ref^ Public Functions schedule [Source] Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. fun ref schedule( timer: Timer ref) : None val Parameters timer: Timer ref Returns None val advance [Source] Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. fun ref advance( list: List[Timer ref] ref, current: U64 val, elapsed: U64 val) : Bool val Parameters list: List [ Timer ref] ref current: U64 val elapsed: U64 val Returns Bool val next [Source] Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. fun box next( current: U64 val) : U64 val Parameters current: U64 val Returns U64 val clear [Source] Cancels all pending timers. fun ref clear() : None val Returns None val Private Functions _slot [Source] Return the slot for a given time. fun box _slot( time: U64 val) : U64 val Parameters time: U64 val Returns U64 val _bits [Source] fun tag _bits() : USize val Returns USize val _max [Source] fun tag _max() : USize val Returns USize val _mask [Source] fun tag _mask() : U64 val Returns U64 val","title":"class _TimingWheel"},{"location":"time-_TimingWheel/#_timingwheel","text":"[Source] A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. class ref _TimingWheel","title":"_TimingWheel"},{"location":"time-_TimingWheel/#constructors","text":"","title":"Constructors"},{"location":"time-_TimingWheel/#create","text":"[Source] Create a timing wheel at the given hierarchical level. new ref create( index: USize val) : _TimingWheel ref^","title":"create"},{"location":"time-_TimingWheel/#parameters","text":"index: USize val","title":"Parameters"},{"location":"time-_TimingWheel/#returns","text":"_TimingWheel ref^","title":"Returns"},{"location":"time-_TimingWheel/#public-functions","text":"","title":"Public Functions"},{"location":"time-_TimingWheel/#schedule","text":"[Source] Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. fun ref schedule( timer: Timer ref) : None val","title":"schedule"},{"location":"time-_TimingWheel/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-_TimingWheel/#returns_1","text":"None val","title":"Returns"},{"location":"time-_TimingWheel/#advance","text":"[Source] Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. fun ref advance( list: List[Timer ref] ref, current: U64 val, elapsed: U64 val) : Bool val","title":"advance"},{"location":"time-_TimingWheel/#parameters_2","text":"list: List [ Timer ref] ref current: U64 val elapsed: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_TimingWheel/#next","text":"[Source] Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. fun box next( current: U64 val) : U64 val","title":"next"},{"location":"time-_TimingWheel/#parameters_3","text":"current: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-_TimingWheel/#clear","text":"[Source] Cancels all pending timers. fun ref clear() : None val","title":"clear"},{"location":"time-_TimingWheel/#returns_4","text":"None val","title":"Returns"},{"location":"time-_TimingWheel/#private-functions","text":"","title":"Private Functions"},{"location":"time-_TimingWheel/#_slot","text":"[Source] Return the slot for a given time. fun box _slot( time: U64 val) : U64 val","title":"_slot"},{"location":"time-_TimingWheel/#parameters_4","text":"time: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-_TimingWheel/#_bits","text":"[Source] fun tag _bits() : USize val","title":"_bits"},{"location":"time-_TimingWheel/#returns_6","text":"USize val","title":"Returns"},{"location":"time-_TimingWheel/#_max","text":"[Source] fun tag _max() : USize val","title":"_max"},{"location":"time-_TimingWheel/#returns_7","text":"USize val","title":"Returns"},{"location":"time-_TimingWheel/#_mask","text":"[Source] fun tag _mask() : U64 val","title":"_mask"},{"location":"time-_TimingWheel/#returns_8","text":"U64 val","title":"Returns"},{"location":"src/-tmp-tmp_A5vVG1JKko-msgpack-0_1-msgpack/_format_name/","text":"/* Copyright 2017 The Pony MessagePack Developers Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */ primitive _FormatName fun positive_fixint(): U8 = 0x00 fun fixmap(): U8 = 0x80 fun fixarray(): U8 = 0x90 fun fixstr(): U8 = 0xA0 fun nil(): U8 = 0xc0 fun falsey(): U8 = 0xc2 fun truthy(): U8 = 0xc3 fun bin_8(): U8 = 0xc4 fun bin_16(): U8 = 0xc5 fun bin_32(): U8 = 0xc6 fun ext_8(): U8 = 0xc7 fun ext_16(): U8 = 0xc8 fun ext_32(): U8 = 0xc9 fun float_32(): U8 = 0xca fun float_64(): U8 = 0xcb fun uint_8(): U8 = 0xcc fun uint_16(): U8 = 0xcd fun uint_32(): U8 = 0xce fun uint_64(): U8 = 0xcf fun int_8(): U8 = 0xd0 fun int_16(): U8 = 0xd1 fun int_32(): U8 = 0xd2 fun int_64(): U8 = 0xd3 fun fixext_1(): U8 = 0xd4 fun fixext_2(): U8 = 0xd5 fun fixext_4(): U8 = 0xd6 fun fixext_8(): U8 = 0xd7 fun fixext_16(): U8 = 0xd8 fun str_8(): U8 = 0xd9 fun str_16(): U8 = 0xda fun str_32(): U8 = 0xdb fun array_16(): U8 = 0xdc fun array_32(): U8 = 0xdd fun map_16(): U8 = 0xde fun map_32(): U8 = 0xdf fun negative_fixint(): U8 = 0xe0","title":"_format_name.pony"},{"location":"src/-tmp-tmp_A5vVG1JKko-msgpack-0_1-msgpack/_limit/","text":"/* Copyright 2017 The Pony MessagePack Developers Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */ primitive _Limit fun fixarray(): U8 = 15 fun fixmap(): U8 = 15 fun fixstr(): USize = 31 fun positive_fixint(): U8 = 127 fun negative_fixint_low(): I8 = -32 fun negative_fixint_high(): I8 = -1","title":"_limit.pony"},{"location":"src/-tmp-tmp_A5vVG1JKko-msgpack-0_1-msgpack/_size/","text":"/* Copyright 2017 The Pony MessagePack Developers Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */ primitive _Size fun fixext_1(): USize = 1 fun fixext_2(): USize = 2 fun fixext_4(): USize = 4 fun fixext_8(): USize = 8 fun fixext_16(): USize = 16","title":"_size.pony"},{"location":"src/-tmp-tmp_A5vVG1JKko-msgpack-0_1-msgpack/message_pack_encoder/","text":"/* Copyright 2017 The Pony MessagePack Developers Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */ use buffered primitive MessagePackEncoder Implements low-level encoding into the [MessagePack serialization format](https://github.com/msgpack/msgpack/blob/master/spec.md). You should be familiar with how MessagePack encodes messages if you use this API directly. There are very few guardrails preventing you from creating invalid documents. This is particularly true when using the `array` and `map` format family encoding methods. // // nil format family // fun nil(b: Writer) = nil format stores nil in 1 byte. _write_type(b, _FormatName.nil()) // // bool format family // fun bool(b: Writer, t_or_f: Bool) = bool format family stores false or true in 1 byte. if t_or_f then _write_type(b, _FormatName.truthy()) else _write_type(b, _FormatName.falsey()) end // // int format family // fun positive_fixint(b: Writer, v: U8) ? = positive fixnum stores 7-bit positive integer. - Max value that can be encoded is `127`. Attemping to encode an out of range value will result in an `error`. if v = _Limit.positive_fixint() then _write_fixed_value(b, v) else error end fun negative_fixint(b: Writer, v: I8) ? = negative fixnum stores 5-bit negative integer. - Max value that can be encoded is `-1`. - Min value that can be encoded is `-32`. Attemping to encode an out of range value will result in an `error`. if (v = _Limit.negative_fixint_low()) and (v = _Limit.negative_fixint_high()) then _write_fixed_value(b, v.u8()) else error end fun uint_8(b: Writer, v: U8) = uint 8 stores a 8-bit unsigned integer. _write_type(b, _FormatName.uint_8()) b.u8(v) fun uint_16(b: Writer, v: U16) = uint 16 stores a 16-bit big-endian unsigned integer. _write_type(b, _FormatName.uint_16()) b.u16_be(v) fun uint_32(b: Writer, v: U32) = uint 32 stores a 32-bit big-endian unsigned integer. _write_type(b, _FormatName.uint_32()) b.u32_be(v) fun uint_64(b: Writer, v: U64) = uint 64 stores a 64-bit big-endian unsigned integer. _write_type(b, _FormatName.uint_64()) b.u64_be(v) fun int_8(b: Writer, v: I8) = int 8 stores a 8-bit signed integer. _write_type(b, _FormatName.int_8()) b.u8(v.u8()) fun int_16(b: Writer, v: I16) = int 16 stores a 16-bit big-endian signed integer. _write_type(b, _FormatName.int_16()) b.i16_be(v) fun int_32(b: Writer, v: I32) = int 32 stores a 32-bit big-endian signed integer. _write_type(b, _FormatName.int_32()) b.i32_be(v) fun int_64(b: Writer, v: I64) = int 64 stores a 64-bit big-endian signed integer. _write_type(b, _FormatName.int_64()) b.i64_be(v) // // float format family // fun float_32(b: Writer, v: F32) = float 32 stores a floating point number in IEEE 754 single precision floating point number format. _write_type(b, _FormatName.float_32()) b.f32_be(v) fun float_64(b: Writer, v: F64) = float 64 stores a floating point number in IEEE 754 double precision floating point number format. _write_type(b, _FormatName.float_64()) b.f64_be(v) // // str format family // fun fixstr(b: Writer, v: ByteSeq) ? = fixstr stores a byte array whose length is upto 31 bytes. Attempting to encode a `ByteSeq` larger than 31 bytes will result in an `error`. if v.size() = _Limit.fixstr() then _write_type(b, (_FormatName.fixstr() or v.size().u8())) b.write(v) else error end fun str_8(b: Writer, v: ByteSeq) ? = str 8 stores a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a `ByteSeq` larger than (2^8)-1 bytes will result in an `error`. _write_btye_array_8(b, v, _FormatName.str_8())? fun str_16(b: Writer, v: ByteSeq) ? = str 16 stores a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a `ByteSeq` larger than (2^16)-1 bytes will result in an `error`. _write_btye_array_16(b, v, _FormatName.str_16())? fun str_32(b: Writer, v: ByteSeq) ? = str 32 stores a byte array whose length is upto (2^32)-1. Attempting to encode a `ByteSeq` larger than (2^32)-1 bytes will result in an `error`. _write_btye_array_32(b, v, _FormatName.str_32())? // // bin format family // fun bin_8(b: Writer, v: ByteSeq) ? = bin 8 stores a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a `ByteSeq` larger than (2^8)-1 bytes will result in an `error`. _write_btye_array_8(b, v, _FormatName.bin_8())? fun bin_16(b: Writer, v: ByteSeq) ? = bin 16 stores a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a `ByteSeq` larger than (2^16)-1 bytes will result in an `error`. _write_btye_array_16(b, v, _FormatName.bin_16())? fun bin_32(b: Writer, v: ByteSeq) ? = bin 32 stores a byte array whose length is upto (2^32)-1 bytes. Attempting to encode a `ByteSeq` larger than (2^32)-1 bytes will result in an `error`. _write_btye_array_32(b, v, _FormatName.bin_32())? // // array format family // fun fixarray(b: Writer, s: U8) ? = Creates a header for a MessagePack fixarray . This only creates the header. `s` number of array items should be written via other methods after this is called. fixarray stores an array whose length is upto 15 elements. Attempting to encode a value larger than 15 will result in an `error`. if s = _Limit.fixarray() then _write_type(b, (_FormatName.fixarray() or s)) else error end fun array_16(b: Writer, s: U16) = Creates a header for a MessagePack array_16 . This only creates the header. `s` number of array items should be written via other methods after this is called. array 16 stores an array whose length is upto (2^16)-1 elements. Attempting to encode a value larger than (2^16)-1 bytes will result in an `error`. _write_type(b, _FormatName.array_16()) b.u16_be(s) fun array_32(b: Writer, s: U32) = Creates a header for a MessagePack array_32 . This only creates the header. `s` number of array items should be written via other methods after this is called. array 32 stores an array whose length is upto (2^32)-1 elements. Attempting to encode a value larger than (2^32)-1 bytes will result in an `error`. _write_type(b, _FormatName.array_32()) b.u32_be(s) // // map format family // fun fixmap(b: Writer, s: U8) ? = Creates a header for a MessagePack fixmap . This only creates the header. `s` number of map items should be written via other methods after this is called. fixmap stores a map whose length is upto 15 elements. Attempting to encode a value larger than 15 will result in an `error`. if s = _Limit.fixmap() then _write_type(b, (_FormatName.fixmap() or s)) else error end fun map_16(b: Writer, s: U16) = Creates a header for a MessagePack map_16 . This only creates the header. `s` number of map items should be written via other methods after this is called. map 16 stores an array whose length is upto (2^16)-1 elements. Attempting to encode a value larger than (2^16)-1 bytes will result in an `error`. _write_type(b, _FormatName.map_16()) b.u16_be(s) fun map_32(b: Writer, s: U32) = Creates a header for a MessagePack map_32 . This only creates the header. `s` number of map items should be written via other methods after this is called. map 32 stores an array whose length is upto (2^32)-1 elements. Attempting to encode a value larger than (2^32)-1 bytes will result in an `error`. _write_type(b, _FormatName.map_32()) b.u32_be(s) // // ext format family // fun fixext_1(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 1 stores an integer and a byte array whose length is 1 byte. Attempting to encode a `ByteSeq` that is not 1 element in size will result in an `error`. if v.size() == _Size.fixext_1() then _write_type(b, _FormatName.fixext_1()) b.u8(t) b.write(v) else error end fun fixext_2(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 2 stores an integer and a byte array whose length is 2 byte. Attempting to encode a `ByteSeq` that is not 2 element in size will result in an `error`. if v.size() == _Size.fixext_2() then _write_type(b, _FormatName.fixext_2()) b.u8(t) b.write(v) else error end fun fixext_4(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 4 stores an integer and a byte array whose length is 4 byte. Attempting to encode a `ByteSeq` that is not 4 element in size will result in an `error`. if v.size() == _Size.fixext_4() then _write_type(b, _FormatName.fixext_4()) b.u8(t) b.write(v) else error end fun fixext_8(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 8 stores an integer and a byte array whose length is 8 byte. Attempting to encode a `ByteSeq` that is not 8 element in size will result in an `error`. if v.size() == _Size.fixext_8() then _write_type(b, _FormatName.fixext_8()) b.u8(t) b.write(v) else error end fun fixext_16(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. fixext 16 stores an integer and a byte array whose length is 16 byte. Attempting to encode a `ByteSeq` that is not 16 element in size will result in an `error`. if v.size() == _Size.fixext_16() then _write_type(b, _FormatName.fixext_16()) b.u8(t) b.write(v) else error end fun ext_8(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 8 stores an integer and a byte array whose length is upto (2^8)-1 bytes. Attempting to encode a `ByteSeq` that is larger than (2^8)-1 bytes in size will result in an `error`. if v.size() = U8.max_value().usize() then _write_type(b, _FormatName.ext_8()) b.u8(v.size().u8()) b.u8(t) b.write(v) else error end fun ext_16(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 16 stores an integer and a byte array whose length is upto (2^16)-1 bytes. Attempting to encode a `ByteSeq` that is larger than (2^16)-1 bytes in size will result in an `error`. if v.size() = U16.max_value().usize() then _write_type(b, _FormatName.ext_16()) b.u16_be(v.size().u16()) b.u8(t) b.write(v) else error end fun ext_32(b: Writer, t: U8, v: ByteSeq) ? = Allows for the creation of user supplied extensions to the MessagePack format. User should provide not just the value `v` to be encoded, but a unique type identifier `t` as well. Type identifiers `0` to `127` are valid for user supplied types. MessagePack reserves -1 to -128 for future extension to add predefined types. ext 32 stores an integer and a byte array whose length is upto (2^32)-1 bytes. Attempting to encode a `ByteSeq` that is larger than (2^32)-1 bytes in size will result in an `error`. if v.size() = U32.max_value().usize() then _write_type(b, _FormatName.ext_32()) b.u32_be(v.size().u32()) b.u8(t) b.write(v) else error end // // support methods // fun _write_type(b: Writer, t: U8) = b.u8(t) fun _write_fixed_value(b: Writer, v: U8) = b.u8(v) fun _write_btye_array_8(b: Writer, v: ByteSeq, t: U8) ? = if v.size() = U8.max_value().usize() then _write_type(b, t) b.u8(v.size().u8()) b.write(v) else error end fun _write_btye_array_16(b: Writer, v: ByteSeq, t: U8) ? = if v.size() = U16.max_value().usize() then _write_type(b, t) b.u16_be(v.size().u16()) b.write(v) else error end fun _write_btye_array_32(b: Writer, v: ByteSeq, t: U8) ? = if v.size() = U32.max_value().usize() then _write_type(b, t) b.u32_be(v.size().u32()) b.write(v) else error end","title":"message_pack_encoder.pony"},{"location":"src/buffered/reader/","text":"use collections class Reader Store network data and provide a parsing interface. `Reader` provides a way to extract typed data from a sequence of bytes. The `Reader` manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the `Reader` using the `append` method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: * `list_size` - the number of items in the following list of items as a big-endian 32-bit integer * zero or more items of the following data: * a big-endian 64-bit floating point number * a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: ``` [message_length][list_size][float1][string1][float2][string2]... ``` The following program uses a `Reader` to decode a message of this type and print them: ```pony use buffered use collections class Notify is InputNotify let _env: Env new create(env: Env) = _env = env fun ref apply(data: Array[U8] iso) = let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print( [( + f.string() + ), ( + str + )] ) end end end actor Main new create(env: Env) = env.input(recover Notify(env) end, 1024) ``` embed _chunks: List[(Array[U8] val, USize)] = _chunks.create() var _available: USize = 0 fun size(): USize = Return the number of available bytes. _available fun ref clear() = Discard all pending data. _chunks.clear() _available = 0 fun ref append(data: ByteSeq) = Add a chunk of data. let data_array = match data | let data': Array[U8] val = data' | let data': String = data'.array() end _available = _available + data_array.size() _chunks.push((data_array, 0)) fun ref skip(n: USize) ? = Skip n bytes. if _available = n then _available = _available - n var rem = n while rem 0 do let node = _chunks.head()? (var data, var offset) = node()? let avail = data.size() - offset if avail rem then node()? = (data, offset + rem) break end rem = rem - avail _chunks.shift()? end else error end fun ref block(len: USize): Array[U8] iso^ ? = Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the `Reader`. if _available len then error end _available = _available - len var out = recover Array[U8] . undefined(len) end var i = USize(0) while i len do let node = _chunks.head()? (let data, let offset) = node()? let avail = data.size() - offset let need = len - i let copy_len = need.min(avail) out = recover let r = consume ref out data.copy_to(r, offset, i, copy_len) consume r end if avail need then node()? = (data, offset + need) break end i = i + copy_len _chunks.shift()? end out fun ref read_until(separator: U8): Array[U8] iso^ ? = Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. let b = block(_distance_of(separator)? - 1)? u8()? b fun ref line(keep_line_breaks: Bool = false): String iso^ ? = Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set `keep_line_breaks` to `true` to keep the line breaks in the returned line. let len = _search_length()? _available = _available - len var out = recover String(len) end var i = USize(0) while i len do let node = _chunks.head()? (let data, let offset) = node()? let avail = data.size() - offset let need = len - i let copy_len = need.min(avail) out.append(data, offset, copy_len) if avail need then node()? = (data, offset + need) break end i = i + copy_len _chunks.shift()? end let trunc_len: USize = if keep_line_breaks then 0 elseif (len = 2) and (out.at_offset(-2)? == '\\r') then 2 else 1 end out.truncate(len - trunc_len) consume out fun ref u8(): U8 ? = Get a U8. Raise an error if there isn't enough data. if _available = 1 then _byte()? else error end fun ref i8(): I8 ? = Get an I8. u8()?.i8() fun ref u16_be(): U16 ? = Get a big-endian U16. let num_bytes = U16(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u16(offset)? else data.read_u16(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u16() 8) or u8()?.u16() end else error end fun ref u16_le(): U16 ? = Get a little-endian U16. let num_bytes = U16(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u16(offset)? else data.read_u16(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u16() or (u8()?.u16() 8) end else error end fun ref i16_be(): I16 ? = Get a big-endian I16. u16_be()?.i16() fun ref i16_le(): I16 ? = Get a little-endian I16. u16_le()?.i16() fun ref u32_be(): U32 ? = Get a big-endian U32. let num_bytes = U32(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u32(offset)? else data.read_u32(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u32() 24) or (u8()?.u32() 16) or (u8()?.u32() 8) or u8()?.u32() end else error end fun ref u32_le(): U32 ? = Get a little-endian U32. let num_bytes = U32(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u32(offset)? else data.read_u32(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u32() or (u8()?.u32() 8) or (u8()?.u32() 16) or (u8()?.u32() 24) end else error end fun ref i32_be(): I32 ? = Get a big-endian I32. u32_be()?.i32() fun ref i32_le(): I32 ? = Get a little-endian I32. u32_le()?.i32() fun ref u64_be(): U64 ? = Get a big-endian U64. let num_bytes = U64(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u64(offset)? else data.read_u64(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u64() 56) or (u8()?.u64() 48) or (u8()?.u64() 40) or (u8()?.u64() 32) or (u8()?.u64() 24) or (u8()?.u64() 16) or (u8()?.u64() 8) or u8()?.u64() end else error end fun ref u64_le(): U64 ? = Get a little-endian U64. let num_bytes = U64(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u64(offset)? else data.read_u64(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u64() or (u8()?.u64() 8) or (u8()?.u64() 16) or (u8()?.u64() 24) or (u8()?.u64() 32) or (u8()?.u64() 40) or (u8()?.u64() 48) or (u8()?.u64() 56) end else error end fun ref i64_be(): I64 ? = Get a big-endian I64. u64_be()?.i64() fun ref i64_le(): I64 ? = Get a little-endian I64. u64_le()?.i64() fun ref u128_be(): U128 ? = Get a big-endian U128. let num_bytes = U128(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef bigendian then data.read_u128(offset)? else data.read_u128(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u128() 120) or (u8()?.u128() 112) or (u8()?.u128() 104) or (u8()?.u128() 96) or (u8()?.u128() 88) or (u8()?.u128() 80) or (u8()?.u128() 72) or (u8()?.u128() 64) or (u8()?.u128() 56) or (u8()?.u128() 48) or (u8()?.u128() 40) or (u8()?.u128() 32) or (u8()?.u128() 24) or (u8()?.u128() 16) or (u8()?.u128() 8) or u8()?.u128() end else error end fun ref u128_le(): U128 ? = Get a little-endian U128. let num_bytes = U128(0).bytewidth() if _available = num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) = num_bytes then let r = ifdef littleendian then data.read_u128(offset)? else data.read_u128(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u128() or (u8()?.u128() 8) or (u8()?.u128() 16) or (u8()?.u128() 24) or (u8()?.u128() 32) or (u8()?.u128() 40) or (u8()?.u128() 48) or (u8()?.u128() 56) or (u8()?.u128() 64) or (u8()?.u128() 72) or (u8()?.u128() 80) or (u8()?.u128() 88) or (u8()?.u128() 96) or (u8()?.u128() 104) or (u8()?.u128() 112) or (u8()?.u128() 120) end else error end fun ref i128_be(): I128 ? = Get a big-endian I129. u128_be()?.i128() fun ref i128_le(): I128 ? = Get a little-endian I128. u128_le()?.i128() fun ref f32_be(): F32 ? = Get a big-endian F32. F32.from_bits(u32_be()?) fun ref f32_le(): F32 ? = Get a little-endian F32. F32.from_bits(u32_le()?) fun ref f64_be(): F64 ? = Get a big-endian F64. F64.from_bits(u64_be()?) fun ref f64_le(): F64 ? = Get a little-endian F64. F64.from_bits(u64_le()?) fun ref _byte(): U8 ? = Get a single byte. let node = _chunks.head()? (var data, var offset) = node()? let r = data(offset)? offset = offset + 1 _available = _available - 1 if offset data.size() then node()? = (data, offset) else _chunks.shift()? end r fun box peek_u8(offset: USize = 0): U8 ? = Peek at a U8 at the given offset. Raise an error if there isn't enough data. _peek_byte(offset)? fun box peek_i8(offset: USize = 0): I8 ? = Peek at an I8. peek_u8(offset)?.i8() fun box peek_u16_be(offset: USize = 0): U16 ? = Peek at a big-endian U16. (peek_u8(offset)?.u16() 8) or peek_u8(offset + 1)?.u16() fun box peek_u16_le(offset: USize = 0): U16 ? = Peek at a little-endian U16. peek_u8(offset)?.u16() or (peek_u8(offset + 1)?.u16() 8) fun box peek_i16_be(offset: USize = 0): I16 ? = Peek at a big-endian I16. peek_u16_be(offset)?.i16() fun box peek_i16_le(offset: USize = 0): I16 ? = Peek at a little-endian I16. peek_u16_le(offset)?.i16() fun box peek_u32_be(offset: USize = 0): U32 ? = Peek at a big-endian U32. (peek_u16_be(offset)?.u32() 16) or peek_u16_be(offset + 2)?.u32() fun box peek_u32_le(offset: USize = 0): U32 ? = Peek at a little-endian U32. peek_u16_le(offset)?.u32() or (peek_u16_le(offset + 2)?.u32() 16) fun box peek_i32_be(offset: USize = 0): I32 ? = Peek at a big-endian I32. peek_u32_be(offset)?.i32() fun box peek_i32_le(offset: USize = 0): I32 ? = Peek at a little-endian I32. peek_u32_le(offset)?.i32() fun box peek_u64_be(offset: USize = 0): U64 ? = Peek at a big-endian U64. (peek_u32_be(offset)?.u64() 32) or peek_u32_be(offset + 4)?.u64() fun box peek_u64_le(offset: USize = 0): U64 ? = Peek at a little-endian U64. peek_u32_le(offset)?.u64() or (peek_u32_le(offset + 4)?.u64() 32) fun box peek_i64_be(offset: USize = 0): I64 ? = Peek at a big-endian I64. peek_u64_be(offset)?.i64() fun box peek_i64_le(offset: USize = 0): I64 ? = Peek at a little-endian I64. peek_u64_le(offset)?.i64() fun box peek_u128_be(offset: USize = 0): U128 ? = Peek at a big-endian U128. (peek_u64_be(offset)?.u128() 64) or peek_u64_be(offset + 8)?.u128() fun box peek_u128_le(offset: USize = 0): U128 ? = Peek at a little-endian U128. peek_u64_le(offset)?.u128() or (peek_u64_le(offset + 8)?.u128() 64) fun box peek_i128_be(offset: USize = 0): I128 ? = Peek at a big-endian I129. peek_u128_be(offset)?.i128() fun box peek_i128_le(offset: USize = 0): I128 ? = Peek at a little-endian I128. peek_u128_le(offset)?.i128() fun box peek_f32_be(offset: USize = 0): F32 ? = Peek at a big-endian F32. F32.from_bits(peek_u32_be(offset)?) fun box peek_f32_le(offset: USize = 0): F32 ? = Peek at a little-endian F32. F32.from_bits(peek_u32_le(offset)?) fun box peek_f64_be(offset: USize = 0): F64 ? = Peek at a big-endian F64. F64.from_bits(peek_u64_be(offset)?) fun box peek_f64_le(offset: USize = 0): F64 ? = Peek at a little-endian F64. F64.from_bits(peek_u64_le(offset)?) fun box _peek_byte(offset: USize = 0): U8 ? = Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. var offset' = offset var iter = _chunks.nodes() while true do let node = iter.next()? (var data, var node_offset) = node()? offset' = offset' + node_offset let data_size = data.size() if offset' = data_size then offset' = offset' - data_size else return data(offset')? end end error fun ref _distance_of(byte: U8): USize ? = Get the distance to the first occurrence of the given byte if _chunks.size() == 0 then error end var node = _chunks.head()? var search_len: USize = 0 while true do (var data, var offset) = node()? try let len = (search_len + data.find(byte, offset)? + 1) - offset search_len = 0 return len end search_len = search_len + (data.size() - offset) if not node.has_next() then break end node = node.next() as ListNode[(Array[U8] val, USize)] end error fun ref _search_length(): USize ? = Get the length of a pending line. Raise an error if there is no pending line. _distance_of('\\n')?","title":"reader.pony"},{"location":"src/buffered/writer/","text":"class Writer A buffer for building messages. `Writer` provides an way to create byte sequences using common data encodings. The `Writer` manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call `done()` to get the message's `ByteSeq`s, and you can then reuse the `Writer` for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: * `message_length` - the number of bytes in the message as a big-endian 32-bit integer * `list_size` - the number of items in the following list of items as a big-endian 32-bit integer * zero or more items of the following data: * a big-endian 64-bit floating point number * a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: ``` [message_length][list_size][float1][string1][float2][string2]... ``` The following program uses a write buffer to encode an array of tuples as a message of this type: ```pony use buffered actor Main new create(env: Env) = let wb = Writer let messages = [[(F32(3597.82), Anderson ); (F32(-7979.3), Graham )] [(F32(3.14159), Hopper ); (F32(-83.83), Jones )]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end ``` var _chunks: Array[ByteSeq] iso = recover Array[ByteSeq] end var _current: Array[U8] iso = recover Array[U8] end var _size: USize = 0 fun ref reserve_chunks(size': USize) = Reserve space for size' chunks. This needs to be recalled after every call to `done` as `done` resets the chunks. _chunks.reserve(size') fun ref reserve_current(size': USize) = Reserve space for size bytes in `_current`. _current.reserve(_current.size() + size') fun size(): USize = _size fun ref u8(data: U8) = Write a byte to the buffer. let num_bytes = U8(0).bytewidth() _current.push_u8(data) _size = _size + num_bytes fun ref u16_le(data: U16) = Write a U16 to the buffer in little-endian byte order. let num_bytes = U16(0).bytewidth() ifdef littleendian then _current.push_u16(data) else _current.push_u16(data.bswap()) end _size = _size + num_bytes fun ref u16_be(data: U16) = Write a U16 to the buffer in big-endian byte order. let num_bytes = U16(0).bytewidth() ifdef bigendian then _current.push_u16(data) else _current.push_u16(data.bswap()) end _size = _size + num_bytes fun ref i16_le(data: I16) = Write an I16 to the buffer in little-endian byte order. u16_le(data.u16()) fun ref i16_be(data: I16) = Write an I16 to the buffer in big-endian byte order. u16_be(data.u16()) fun ref u32_le(data: U32) = Write a U32 to the buffer in little-endian byte order. let num_bytes = U32(0).bytewidth() ifdef littleendian then _current.push_u32(data) else _current.push_u32(data.bswap()) end _size = _size + num_bytes fun ref u32_be(data: U32) = Write a U32 to the buffer in big-endian byte order. let num_bytes = U32(0).bytewidth() ifdef bigendian then _current.push_u32(data) else _current.push_u32(data.bswap()) end _size = _size + num_bytes fun ref i32_le(data: I32) = Write an I32 to the buffer in little-endian byte order. u32_le(data.u32()) fun ref i32_be(data: I32) = Write an I32 to the buffer in big-endian byte order. u32_be(data.u32()) fun ref f32_le(data: F32) = Write an F32 to the buffer in little-endian byte order. u32_le(data.bits()) fun ref f32_be(data: F32) = Write an F32 to the buffer in big-endian byte order. u32_be(data.bits()) fun ref u64_le(data: U64) = Write a U64 to the buffer in little-endian byte order. let num_bytes = U64(0).bytewidth() ifdef littleendian then _current.push_u64(data) else _current.push_u64(data.bswap()) end _size = _size + num_bytes fun ref u64_be(data: U64) = Write a U64 to the buffer in big-endian byte order. let num_bytes = U64(0).bytewidth() ifdef bigendian then _current.push_u64(data) else _current.push_u64(data.bswap()) end _size = _size + num_bytes fun ref i64_le(data: I64) = Write an I64 to the buffer in little-endian byte order. u64_le(data.u64()) fun ref i64_be(data: I64) = Write an I64 to the buffer in big-endian byte order. u64_be(data.u64()) fun ref f64_le(data: F64) = Write an F64 to the buffer in little-endian byte order. u64_le(data.bits()) fun ref f64_be(data: F64) = Write an F64 to the buffer in big-endian byte order. u64_be(data.bits()) fun ref u128_le(data: U128) = Write a U128 to the buffer in little-endian byte order. let num_bytes = U128(0).bytewidth() ifdef littleendian then _current.push_u128(data) else _current.push_u128(data.bswap()) end _size = _size + num_bytes fun ref u128_be(data: U128) = Write a U128 to the buffer in big-endian byte order. let num_bytes = U128(0).bytewidth() ifdef bigendian then _current.push_u128(data) else _current.push_u128(data.bswap()) end _size = _size + num_bytes fun ref i128_le(data: I128) = Write an I128 to the buffer in little-endian byte order. u128_le(data.u128()) fun ref i128_be(data: I128) = Write an I128 to the buffer in big-endian byte order. u128_be(data.u128()) fun ref write(data: ByteSeq) = Write a ByteSeq to the buffer. // if `data` is 1 cacheline or less in size // copy it into the existing `_current` array // to coalesce multiple tiny arrays // into a single bigger array if data.size() = 64 then match data | let d: String = let a = d.array() _current.copy_from(a, 0, _current.size(), a.size()) | let d: Array[U8] val = _current.copy_from(d, 0, _current.size(), d.size()) end _size = _size + data.size() else _append_current() _chunks.push(data) _size = _size + data.size() end fun ref writev(data: ByteSeqIter) = Write ByteSeqs to the buffer. for chunk in data.values() do write(chunk) end fun ref done(): Array[ByteSeq] iso^ = Return an array of buffered ByteSeqs and reset the Writer's buffer. _append_current() _size = 0 _chunks = recover Array[ByteSeq] end fun ref _append_current() = if _current.size() 0 then _chunks.push(_current = recover Array[U8] end) end","title":"writer.pony"},{"location":"src/builtin/_partial_arithmetic/","text":"trait _PartialArithmetic fun add_partial[T: (Integer[T] val Int)](x: T, y: T): T? = (let r: T, let overflow: Bool) = x.addc(y) if overflow then error else r end fun sub_partial[T: (Integer[T] val Int)](x: T, y: T): T? = (let r: T, let overflow: Bool) = x.subc(y) if overflow then error else r end fun mul_partial[T: (Integer[T] val Int)](x: T, y: T): T? = (let r: T, let overflow: Bool) = x.mulc(y) if overflow then error else r end primitive _UnsignedPartialArithmetic is _PartialArithmetic fun div_checked[T: _UnsignedInteger[T] val](x: T, y: T): (T, Bool) = (x / y, (y == T.from[U8](0))) fun rem_checked[T: _UnsignedInteger[T] val](x: T, y: T): (T, Bool) = (x % y, y == T.from[U8](0)) fun div_partial[T: _UnsignedInteger[T] val](x: T, y: T): T? = if (y == T.from[U8](0)) then error else x /~ y end fun rem_partial[T: _UnsignedInteger[T] val](x: T, y: T): T? = if (y == T.from[U8](0)) then error else x %~ y end fun divrem_partial[T: _UnsignedInteger[T] val](x: T, y: T): (T, T)? = if (y == T.from[U8](0)) then error else (x /~ y, x %~ y) end primitive _SignedPartialArithmetic is _PartialArithmetic fun div_checked[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): (T, Bool) = (x / y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun rem_checked[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): (T, Bool) = (x % y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun div_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): T? = if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x /~ y end fun rem_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): T? = if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x %~ y end fun divrem_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T, y: T): (T, T)? = if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else (x/~y, x %~ y) end fun neg_partial[T: (_SignedInteger[T, U] val Signed), U: _UnsignedInteger[U] val](x: T): T? = if x == T.min_value() then error else -~x end","title":"_partial_arithmetic.pony"},{"location":"src/builtin/_to_string/","text":"primitive _ToString Worker type providing simple to string conversions for numbers. fun _u64(x: U64, neg: Bool): String iso^ = let table = 0123456789 let base: U64 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end if neg then s.push('-') end s . reverse_in_place() end fun _u128(x: U128, neg: Bool): String iso^ = let table = 0123456789 let base: U128 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = (value = value / base) - (value * base) s.push(table(index.usize())?) end end end if neg then s.push('-') end s . reverse_in_place() end fun _f64(x: F64): String iso^ = recover var s = String(31) var f = String(31) . append( %g ) ifdef windows then @_snprintf[I32](s.cstring(), s.space(), f.cstring(), x) else @snprintf[I32](s.cstring(), s.space(), f.cstring(), x) end s . recalc() end","title":"_to_string.pony"},{"location":"src/builtin/ambient_auth/","text":"primitive AmbientAuth This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. new _create() = None","title":"ambient_auth.pony"},{"location":"src/builtin/any/","text":"interface tag Any","title":"any.pony"},{"location":"src/builtin/array/","text":"class Array[A] is Seq[A] Contiguous, resizable memory to store elements of type A. ## Usage Creating an Array of String. ```pony let array: Array[String] = [ dog ; cat ; wombat ] // array.size() == 3 // array.space() = 3 ``` Creating an empty Array of String, which may hold at least 10 elements before requesting more space. ```pony let array = Array(10) // array.size() == 0 // array.space() = 10 ``` Accessing elements can be done via the `apply(i: USize): this- A ?` method. The provided index might be out of bounds so `apply` is partial and has to be called within a try-catch block or inside another partial method. ```pony let array: Array[String] = [ dog ; cat ; wombat ] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == wombat else false end ``` Adding and removing elements to and from the end of the Array can be done via `push` and `pop` methods. You could treat the array as a FIFO queue using those methods. ```pony while (array.size() 0) do let elem = array.pop()? // do something with element end ``` Modifying the Array can be done via `update`, `insert` and `delete` methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the `values` method. ```pony for element in array.values() do // do something with element end ``` ## Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The `space()` method returns the number of elements an Array can hold. The `size()` method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: | size | space | |------|-------| | 0 | 0 | | 1 | 8 | | 8 | 8 | | 9 | 16 | | 16 | 16 | | 17 | 32 | Call the `compact()` method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. var _size: USize var _alloc: USize var _ptr: Pointer[A] new create(len: USize = 0) = Create an array with zero elements, but space for len elements. _size = 0 if len 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) else _alloc = 0 _ptr = Pointer[A] end new init(from: A^, len: USize) = Create an array of len elements, all initialised to the given value. _size = len if len 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) var i: USize = 0 while i len do _ptr._update(i, from) i = i + 1 end else _alloc = 0 _ptr = Pointer[A] end new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) = Create an array from a C-style pointer and length. The contents are not copied. _size = len if alloc len then _alloc = alloc else _alloc = len end _ptr = ptr fun _copy_to( ptr: Pointer[this- A!], copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) = Copy copy_len elements from this to that at specified offsets. _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[A] tag = Return the underlying C-style pointer. _ptr._offset(offset) fun size(): USize = The number of elements in the array. _size fun space(): USize = The available space in the array. _alloc fun ref reserve(len: USize) = Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. if _alloc len then _alloc = len.next_pow2().max(len).max(8) _ptr = _ptr._realloc(_alloc) end fun box _element_size(): USize = Element size in bytes for an element. _ptr._element_size() fun ref compact() = Try to remove unused space, making it available for garbage collection. The request may be ignored. if _size = (512 / _ptr._element_size()) then if _size.next_pow2() != _alloc.next_pow2() then _alloc = _size.next_pow2() let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end elseif _size _alloc then _alloc = _size let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end fun ref undefined[B: (A Real[B] val Number) = A](len: USize) = Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. reserve(len) _size = len fun box read_u8[B: (A Real[B] val U8) = A](offset: USize): U8 ? = Reads a U8 from offset. This is only allowed for an array of U8s. if offset _size then _ptr._offset(offset)._convert[U8]()._apply(0) else error end fun box read_u16[B: (A Real[B] val U8) = A](offset: USize): U16 ? = Reads a U16 from offset. This is only allowed for an array of U8s. let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) = _size then _ptr._offset(offset)._convert[U16]()._apply(0) else error end fun box read_u32[B: (A Real[B] val U8) = A](offset: USize): U32 ? = Reads a U32 from offset. This is only allowed for an array of U8s. let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) = _size then _ptr._offset(offset)._convert[U32]()._apply(0) else error end fun box read_u64[B: (A Real[B] val U8) = A](offset: USize): U64 ? = Reads a U64 from offset. This is only allowed for an array of U8s. let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) = _size then _ptr._offset(offset)._convert[U64]()._apply(0) else error end fun box read_u128[B: (A Real[B] val U8) = A](offset: USize): U128 ? = Reads a U128 from offset. This is only allowed for an array of U8s. let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) = _size then _ptr._offset(offset)._convert[U128]()._apply(0) else error end fun apply(i: USize): this- A ? = Get the i-th element, raising an error if the index is out of bounds. if i _size then _ptr._apply(i) else error end fun ref update_u8[B: (A Real[B] val U8) = A](offset: USize, value: U8): U8 ? = Write a U8 at offset. This is only allowed for an array of U8s. if offset _size then _ptr._offset(offset)._convert[U8]()._update(0, value) else error end fun ref update_u16[B: (A Real[B] val U8) = A](offset: USize, value: U16): U16 ? = Write a U16 at offset. This is only allowed for an array of U8s. let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) = _size then _ptr._offset(offset)._convert[U16]()._update(0, value) else error end fun ref update_u32[B: (A Real[B] val U8) = A](offset: USize, value: U32): U32 ? = Write a U32 at offset. This is only allowed for an array of U8s. let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) = _size then _ptr._offset(offset)._convert[U32]()._update(0, value) else error end fun ref update_u64[B: (A Real[B] val U8) = A](offset: USize, value: U64): U64 ? = Write a U64 at offset. This is only allowed for an array of U8s. let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) = _size then _ptr._offset(offset)._convert[U64]()._update(0, value) else error end fun ref update_u128[B: (A Real[B] val U8) = A](offset: USize, value: U128): U128 ? = Write a U128 at offset. This is only allowed for an array of U8s. let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) = _size then _ptr._offset(offset)._convert[U128]()._update(0, value) else error end fun ref update(i: USize, value: A): A^ ? = Change the i-th element, raising an error if the index is out of bounds. if i _size then _ptr._update(i, consume value) else error end fun ref insert(i: USize, value: A) ? = Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. if i = _size then reserve(_size + 1) _ptr._offset(i)._insert(1, _size - i) _ptr._update(i, consume value) _size = _size + 1 else error end fun ref delete(i: USize): A^ ? = Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. if i _size then _size = _size - 1 _ptr._offset(i)._delete(1, _size - i) else error end fun ref truncate(len: USize) = Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. _size = _size.min(len) fun ref trim_in_place(from: USize = 0, to: USize = -1) = Trim the array to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new array nor copy elements. let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this array and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[A] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): Array[A] val = Return a shared portion of this array, covering `from` until `to`. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (Array[A] iso^, Array[A] iso^) = Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the right portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. let start_ptr = _ptr let size' = _size.min(split_point) let alloc = if size' == _size then _alloc else split_point end trim_in_place(split_point) let left = recover if size' 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume left, consume this) fun ref copy_from[B: (A Real[B] val U8) = A]( src: Array[U8] box, src_idx: USize, dst_idx: USize, len: USize) = Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. reserve(dst_idx + len) src._ptr._offset(src_idx)._copy_to(_ptr._convert[U8]()._offset(dst_idx), len) if _size (dst_idx + len) then _size = dst_idx + len end fun copy_to( dst: Array[this- A!], src_idx: USize, dst_idx: USize, len: USize) = Copy len elements from this(src_idx) to dst(dst_idx). dst.reserve(dst_idx + len) _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len) if dst._size (dst_idx + len) then dst._size = dst_idx + len end fun ref remove(i: USize, n: USize) = Remove n elements from the array, beginning at index i. if i _size then let count = n.min(_size - i) _size = _size - count _ptr._offset(i)._delete(count, _size - i) end fun ref clear() = Remove all elements from the array. _size = 0 fun ref push_u8[B: (A Real[B] val U8) = A](value: U8) = Add a U8 to the end of the array. This is only allowed for an array of U8s. let u8_bytes = U8(0).bytewidth() reserve(_size + u8_bytes) _ptr._offset(_size)._convert[U8]()._update(0, value) _size = _size + u8_bytes fun ref push_u16[B: (A Real[B] val U8) = A](value: U16) = Add a U16 to the end of the array. This is only allowed for an array of U8s. let u16_bytes = U16(0).bytewidth() reserve(_size + u16_bytes) _ptr._offset(_size)._convert[U16]()._update(0, value) _size = _size + u16_bytes fun ref push_u32[B: (A Real[B] val U8) = A](value: U32) = Add a U32 to the end of the array. This is only allowed for an array of U8s. let u32_bytes = U32(0).bytewidth() reserve(_size + u32_bytes) _ptr._offset(_size)._convert[U32]()._update(0, value) _size = _size + u32_bytes fun ref push_u64[B: (A Real[B] val U8) = A](value: U64) = Add a U64 to the end of the array. This is only allowed for an array of U8s. let u64_bytes = U64(0).bytewidth() reserve(_size + u64_bytes) _ptr._offset(_size)._convert[U64]()._update(0, value) _size = _size + u64_bytes fun ref push_u128[B: (A Real[B] val U8) = A](value: U128) = Add a U128 to the end of the array. This is only allowed for an array of U8s. let u128_bytes = U128(0).bytewidth() reserve(_size + u128_bytes) _ptr._offset(_size)._convert[U128]()._update(0, value) _size = _size + u128_bytes fun ref push(value: A) = Add an element to the end of the array. reserve(_size + 1) _ptr._update(_size, consume value) _size = _size + 1 fun ref pop(): A^ ? = Remove an element from the end of the array. The removed element is returned. delete(_size - 1)? fun ref unshift(value: A) = Add an element to the beginning of the array. try insert(0, consume value)? end fun ref shift(): A^ ? = Remove an element from the beginning of the array. The removed element is returned. delete(0)? fun ref append( seq: (ReadSeq[A] ReadElement[A^]), offset: USize = 0, len: USize = -1) = Append the elements from a sequence, starting from the given offset. if offset = seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) var n = USize(0) try while n copy_len do _ptr._update(_size + n, seq(offset + n)?) n = n + 1 end end _size = _size + n fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) = Add len iterated elements to the end of the array, starting from the given offset. var n = USize(0) try while n offset do if iter.has_next() then iter.next()? else return end n = n + 1 end end n = 0 // If a concrete len is specified, we take the caller at their word // and reserve that much space, even though we can't verify that the // iterator actually has that many elements available. Reserving ahead // of time lets us take a fast path of direct pointer access. if len != -1 then reserve(_size + len) try while n len do if iter.has_next() then _ptr._update(_size + n, iter.next()?) else break end n = n + 1 end end _size = _size + n else try while n len do if iter.has_next() then push(iter.next()?) else break end n = n + 1 end end end fun find( value: A!, offset: USize = 0, nth: USize = 0, predicate: {(box- A!, box- A!): Bool} val = {(l, r) = l is r }) : USize ? = Find the `nth` appearance of `value` from the beginning of the array, starting at `offset` and examining higher indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of `value` found, and uses object identity for comparison. var i = offset var n = USize(0) while i _size do if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end i = i + 1 end error fun contains( value: A!, predicate: {(box- A!, box- A!): Bool} val = {(l: box- A!, r: box- A!): Bool = l is r }) : Bool = Returns true if the array contains `value`, false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as `{(l, r) = l == r}`. var i = USize(0) while i _size do if predicate(_ptr._apply(i), value) then return true end i = i + 1 end false fun rfind( value: A!, offset: USize = -1, nth: USize = 0, predicate: {(box- A!, box- A!): Bool} val = {(l: box- A!, r: box- A!): Bool = l is r }) : USize ? = Find the `nth` appearance of `value` from the end of the array, starting at `offset` and examining lower indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of `value` found, and uses object identity for comparison. if _size 0 then var i = if offset = _size then _size - 1 else offset end var n = USize(0) repeat if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end until (i = i - 1) == 0 end end error fun clone(): Array[this- A!]^ = Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. let out = Array[this- A!](_size) _ptr._copy_to(out._ptr, _size) out._size = _size out fun slice( from: USize = 0, to: USize = -1, step: USize = 1) : Array[this- A!]^ = Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. let out = Array[this- A!] let last = _size.min(to) let len = last - from if (last from) and (step 0) then out.reserve((len + (step - 1)) / step) if step == 1 then copy_to(out, from, 0, len) else try var i = from while i last do out.push(this(i)?) i = i + step end end end end out fun permute(indices: Iterator[USize]): Array[this- A!]^ ? = Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. let out = Array[this- A!] for i in indices do out.push(this(i)?) end out fun reverse(): Array[this- A!]^ = Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. clone() . reverse_in_place() fun ref reverse_in_place() = Reverse the array in place. if _size 1 then var i: USize = 0 var j = _size - 1 while i j do let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, x) i = i + 1 j = j - 1 end end fun ref swap_elements(i: USize, j: USize) ? = Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. if (i = _size) or (j = _size) then error end let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, consume x) fun keys(): ArrayKeys[A, this- Array[A]]^ = Return an iterator over the indices in the array. ArrayKeys[A, this- Array[A]](this) fun values(): ArrayValues[A, this- Array[A]]^ = Return an iterator over the values in the array. ArrayValues[A, this- Array[A]](this) fun pairs(): ArrayPairs[A, this- Array[A]]^ = Return an iterator over the (index, value) pairs in the array. ArrayPairs[A, this- Array[A]](this) class ArrayKeys[A, B: Array[A] #read] is Iterator[USize] let _array: B var _i: USize new create(array: B) = _array = array _i = 0 fun has_next(): Bool = _i _array.size() fun ref next(): USize = if _i _array.size() then _i = _i + 1 else _i end class ArrayValues[A, B: Array[A] #read] is Iterator[B- A] let _array: B var _i: USize new create(array: B) = _array = array _i = 0 fun has_next(): Bool = _i _array.size() fun ref next(): B- A ? = _array(_i = _i + 1)? fun ref rewind(): ArrayValues[A, B] = _i = 0 this class ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B- A)] let _array: B var _i: USize new create(array: B) = _array = array _i = 0 fun has_next(): Bool = _i _array.size() fun ref next(): (USize, B- A) ? = (_i, _array(_i = _i + 1)?)","title":"array.pony"},{"location":"src/builtin/asio_event/","text":"type AsioEventID is Pointer[AsioEvent] tag interface tag AsioEventNotify be _event_notify(event: AsioEventID, flags: U32, arg: U32) primitive AsioEvent Functions for asynchronous event notification. fun none(): AsioEventID = An empty event. AsioEventID fun readable(flags: U32): Bool = Returns true if the flags contain the readable flag. (flags and (1 0)) != 0 fun writeable(flags: U32): Bool = Returns true if the flags contain the writeable flag. (flags and (1 1)) != 0 fun disposable(flags: U32): Bool = Returns true if the event should be disposed of. flags == 0 fun dispose(): U32 = 0 fun read(): U32 = 1 0 fun write(): U32 = 1 1 fun timer(): U32 = 1 2 fun signal(): U32 = 1 3 fun read_write(): U32 = read() or write() fun oneshot(): U32 = 1 8 fun read_write_oneshot(): U32 = read() or write() or oneshot()","title":"asio_event.pony"},{"location":"src/builtin/bool/","text":"primitive Bool is Stringable new create(from: Bool) = from fun eq(y: Bool): Bool = this == y fun ne(y: Bool): Bool = this != y fun op_and(y: Bool): Bool = this and y fun op_or(y: Bool): Bool = this or y fun op_xor(y: Bool): Bool = this xor y fun op_not(): Bool = not this fun string(): String iso^ = (if this then true else false end).string()","title":"bool.pony"},{"location":"src/builtin/compare/","text":"primitive Less is Equatable[Compare] fun string(): String iso^ = Less .string() primitive Equal is Equatable[Compare] fun string(): String iso^ = Equal .string() primitive Greater is Equatable[Compare] fun string(): String iso^ = Greater .string() type Compare is (Less | Equal | Greater) interface HasEq[A] fun eq(that: box- A): Bool interface Equatable[A: Equatable[A] #read] fun eq(that: box- A): Bool = this is that fun ne(that: box- A): Bool = not eq(that) interface Comparable[A: Comparable[A] #read] is Equatable[A] fun lt(that: box- A): Bool fun le(that: box- A): Bool = lt(that) or eq(that) fun ge(that: box- A): Bool = not lt(that) fun gt(that: box- A): Bool = not le(that) fun compare(that: box- A): Compare = if eq(that) then Equal elseif lt(that) then Less else Greater end","title":"compare.pony"},{"location":"src/builtin/do_not_optimise/","text":"primitive DoNotOptimise Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. fun apply[A](obj: A) = Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. compile_intrinsic fun observe() = Prevent the compiler from optimising out writes to an object marked by the apply function. compile_intrinsic","title":"do_not_optimise.pony"},{"location":"src/builtin/env/","text":"class val Env An environment holds the command line and other values injected into the program by default by the runtime. let root: (AmbientAuth | None) The root capability. Can be `None` for artificially constructed `Env` instances. let input: InputStream Stdin represented as an actor. let out: OutStream Stdout let err: OutStream Stderr let args: Array[String] val The command line used to start the program. let vars: Array[String] val The program's environment variables. let exitcode: {(I32)} val Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. new _create( argc: U32, argv: Pointer[Pointer[U8]] val, envp: Pointer[Pointer[U8]] val) = Builds an environment from the command line. This is done before the Main actor is created. root = AmbientAuth._create() @pony_os_stdout_setup[None]() input = Stdin._create(@pony_os_stdin_setup[Bool]()) out = StdStream._out() err = StdStream._err() args = _strings_from_pointers(argv, argc.usize()) vars = _strings_from_pointers(envp, _count_strings(envp)) exitcode = {(code: I32) = @pony_exitcode[None](code) } new val create( root': (AmbientAuth | None), input': InputStream, out': OutStream, err': OutStream, args': Array[String] val, vars': Array[String] val, exitcode': {(I32)} val) = Build an artificial environment. A root capability may be supplied. root = root' input = input' out = out' err = err' args = args' vars = vars' exitcode = exitcode' fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize = if data.is_null() then return 0 end var i: USize = 0 while let entry = data._apply(i) not entry.is_null() do i = i + 1 end i fun tag _strings_from_pointers( data: Pointer[Pointer[U8]] val, len: USize) : Array[String] iso^ = let array = recover Array[String](len) end var i: USize = 0 while i len do let entry = data._apply(i = i + 1) array.push(recover String.copy_cstring(entry) end) end array","title":"env.pony"},{"location":"src/builtin/float/","text":"primitive F32 is FloatingPoint[F32] new create(value: F32 = 0) = value new pi() = 3.14159265358979323846 new e() = 2.71828182845904523536 new _nan() = compile_intrinsic new _inf(negative: Bool) = compile_intrinsic new from_bits(i: U32) = compile_intrinsic fun bits(): U32 = compile_intrinsic new from[B: (Number Real[B] val)](a: B) = a.f32() new min_value() = Minimum negative value representable. from_bits(0xFF7FFFFF) new max_value() = Maximum positive value representable. from_bits(0x7F7FFFFF) new min_normalised() = Minimum positive value representable at full precision (ie a normalised number). from_bits(0x00800000) new epsilon() = Minimum positive value such that (1 + epsilon) != 1. from_bits(0x34000000) fun tag radix(): U8 = Exponent radix. 2 fun tag precision2(): U8 = Mantissa precision in bits. 24 fun tag precision10(): U8 = Mantissa precision in decimal digits. 6 fun tag min_exp2(): I16 = Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). -125 fun tag min_exp10(): I16 = Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). -37 fun tag max_exp2(): I16 = Maximum exponent value such that (2^exponent) - 1 is representable. 128 fun tag max_exp10(): I16 = Maximum exponent value such that (10^exponent) - 1 is representable. 38 fun abs(): F32 = @ llvm.fabs.f32 [F32](this) fun ceil(): F32 = @ llvm.ceil.f32 [F32](this) fun floor(): F32 = @ llvm.floor.f32 [F32](this) fun round(): F32 = @ llvm.round.f32 [F32](this) fun trunc(): F32 = @ llvm.trunc.f32 [F32](this) fun min(y: F32): F32 = if this y then this else y end fun max(y: F32): F32 = if this y then this else y end fun finite(): Bool = Check whether this number is finite, ie not +/-infinity and not NaN. // True if exponent is not all 1s (bits() and 0x7F800000) != 0x7F800000 fun infinite(): Bool = Check whether this number is +/-infinity // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) == 0) // mantissa fun nan(): Bool = Check whether this number is NaN. // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) != 0) // mantissa fun ldexp(x: F32, exponent: I32): F32 = @ldexpf[F32](x, exponent) fun frexp(): (F32, U32) = var exponent: U32 = 0 var mantissa = @frexp[F64](f64(), addressof exponent) (mantissa.f32(), exponent) fun log(): F32 = @ llvm.log.f32 [F32](this) fun log2(): F32 = @ llvm.log2.f32 [F32](this) fun log10(): F32 = @ llvm.log10.f32 [F32](this) fun logb(): F32 = @logbf[F32](this) fun pow(y: F32): F32 = @ llvm.pow.f32 [F32](this, y) fun powi(y: I32): F32 = ifdef windows then pow(y.f32()) else @ llvm.powi.f32 [F32](this, y) end fun sqrt(): F32 = if this 0.0 then _nan() else @ llvm.sqrt.f32 [F32](this) end fun sqrt_unsafe(): F32 = Unsafe operation. If this is negative, the result is undefined. @ llvm.sqrt.f32 [F32](this) fun cbrt(): F32 = @cbrtf[F32](this) fun exp(): F32 = @ llvm.exp.f32 [F32](this) fun exp2(): F32 = @ llvm.exp2.f32 [F32](this) fun cos(): F32 = @ llvm.cos.f32 [F32](this) fun sin(): F32 = @ llvm.sin.f32 [F32](this) fun tan(): F32 = @tanf[F32](this) fun cosh(): F32 = @coshf[F32](this) fun sinh(): F32 = @sinhf[F32](this) fun tanh(): F32 = @tanhf[F32](this) fun acos(): F32 = @acosf[F32](this) fun asin(): F32 = @asinf[F32](this) fun atan(): F32 = @atanf[F32](this) fun atan2(y: F32): F32 = @atan2f[F32](this, y) fun acosh(): F32 = @acoshf[F32](this) fun asinh(): F32 = @asinhf[F32](this) fun atanh(): F32 = @atanhf[F32](this) fun copysign(sign: F32): F32 = @ llvm.copysign.f32 [F32](this, sign) fun hash(): USize = bits().hash() fun hash64(): U64 = bits().hash64() fun i128(): I128 = f64().i128() fun u128(): U128 = f64().u128() fun i128_unsafe(): I128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().i128_unsafe() fun u128_unsafe(): U128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().u128_unsafe() primitive F64 is FloatingPoint[F64] new create(value: F64 = 0) = value new pi() = 3.14159265358979323846 new e() = 2.71828182845904523536 new _nan() = compile_intrinsic new _inf(negative: Bool) = compile_intrinsic new from_bits(i: U64) = compile_intrinsic fun bits(): U64 = compile_intrinsic new from[B: (Number Real[B] val)](a: B) = a.f64() new min_value() = Minimum negative value representable. from_bits(0xFFEF_FFFF_FFFF_FFFF) new max_value() = Maximum positive value representable. from_bits(0x7FEF_FFFF_FFFF_FFFF) new min_normalised() = Minimum positive value representable at full precision (ie a normalised number). from_bits(0x0010_0000_0000_0000) new epsilon() = Minimum positive value such that (1 + epsilon) != 1. from_bits(0x3CB0_0000_0000_0000) fun tag radix(): U8 = Exponent radix. 2 fun tag precision2(): U8 = Mantissa precision in bits. 53 fun tag precision10(): U8 = Mantissa precision in decimal digits. 15 fun tag min_exp2(): I16 = Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). -1021 fun tag min_exp10(): I16 = Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). -307 fun tag max_exp2(): I16 = Maximum exponent value such that (2^exponent) - 1 is representable. 1024 fun tag max_exp10(): I16 = Maximum exponent value such that (10^exponent) - 1 is representable. 308 fun abs(): F64 = @ llvm.fabs.f64 [F64](this) fun ceil(): F64 = @ llvm.ceil.f64 [F64](this) fun floor(): F64 = @ llvm.floor.f64 [F64](this) fun round(): F64 = @ llvm.round.f64 [F64](this) fun trunc(): F64 = @ llvm.trunc.f64 [F64](this) fun min(y: F64): F64 = if this y then this else y end fun max(y: F64): F64 = if this y then this else y end fun finite(): Bool = Check whether this number is finite, ie not +/-infinity and not NaN. // True if exponent is not all 1s (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 fun infinite(): Bool = Check whether this number is +/-infinity // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0) // mantissa fun nan(): Bool = Check whether this number is NaN. // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0) // mantissa fun ldexp(x: F64, exponent: I32): F64 = @ldexp[F64](x, exponent) fun frexp(): (F64, U32) = var exponent: U32 = 0 var mantissa = @frexp[F64](this, addressof exponent) (mantissa, exponent) fun log(): F64 = @ llvm.log.f64 [F64](this) fun log2(): F64 = @ llvm.log2.f64 [F64](this) fun log10(): F64 = @ llvm.log10.f64 [F64](this) fun logb(): F64 = @logb[F64](this) fun pow(y: F64): F64 = @ llvm.pow.f64 [F64](this, y) fun powi(y: I32): F64 = ifdef windows then pow(y.f64()) else @ llvm.powi.f64 [F64](this, y) end fun sqrt(): F64 = if this 0.0 then _nan() else @ llvm.sqrt.f64 [F64](this) end fun sqrt_unsafe(): F64 = Unsafe operation. If this is negative, the result is undefined. @ llvm.sqrt.f64 [F64](this) fun cbrt(): F64 = @cbrt[F64](this) fun exp(): F64 = @ llvm.exp.f64 [F64](this) fun exp2(): F64 = @ llvm.exp2.f64 [F64](this) fun cos(): F64 = @ llvm.cos.f64 [F64](this) fun sin(): F64 = @ llvm.sin.f64 [F64](this) fun tan(): F64 = @tan[F64](this) fun cosh(): F64 = @cosh[F64](this) fun sinh(): F64 = @sinh[F64](this) fun tanh(): F64 = @tanh[F64](this) fun acos(): F64 = @acos[F64](this) fun asin(): F64 = @asin[F64](this) fun atan(): F64 = @atan[F64](this) fun atan2(y: F64): F64 = @atan2[F64](this, y) fun acosh(): F64 = @acosh[F64](this) fun asinh(): F64 = @asinh[F64](this) fun atanh(): F64 = @atanh[F64](this) fun copysign(sign: F64): F64 = @ llvm.copysign.f64 [F64](this, sign) fun hash(): USize = bits().hash() fun hash64(): U64 = bits().hash64() fun i128(): I128 = if this I128.max_value().f64() then return I128.max_value() elseif this I128.min_value().f64() then return I128.min_value() end let bit = bits() let high = (bit 32).u32() let ex = ((high and 0x7FF00000) 20) - 1023 if ex 0 then return 0 end let s = ((high and 0x80000000) 31).i128() var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128() let ex' = ex.u128() if ex' 52 then r = r (ex' - 52) else r = r (52 - ex') end (r xor s) - s fun u128(): U128 = if this U128.max_value().f64() then return U128.max_value() elseif this U128.min_value().f64() then return U128.min_value() end let bit = bits() let high = (bit 32).u32() let ex = ((high and 0x7FF00000) 20) - 1023 if (ex 0) or ((high and 0x80000000) != 0) then return 0 end var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128() let ex' = ex.u128() if ex' 52 then r = r (ex' - 52) else r = r (52 - ex') end r.u128() fun i128_unsafe(): I128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. i128() fun u128_unsafe(): U128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. u128() type Float is (F32 | F64)","title":"float.pony"},{"location":"src/builtin/iterator/","text":"interface Iterator[A] Iterators generate a series of values, one value at a time on each call to `next()`. An Iterator is considered exhausted, once its `has_next()` method returns `false`. Thus every call to `next()` should be preceeded with a call to `has_next()` to check for exhaustiveness. ## Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: ```pony while iterator.has_next() do let elem = iterator.next()? // do something with elem end ``` The `For`-loop provides a more concise way of iteration: ```pony for elem in iterator do // do something with elem end ``` Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors. The `For`-loop does not allow this. ## Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: * If the Iterator is exhausted, `has_next()` needs to return `false`. * Once `has_next()` returned `false` it is not allowed to switch back to `true` (Unless the Iterator supports rewinding) * `has_next()` does not change its returned value if `next()` has not been called. That means, that between two calls to `next()` any number of calls to `has_next()` need to return the same value. (Unless the Iterator supports rewinding) * A call to `next()` erroring does not necessarily denote exhaustiveness. ### Example ```pony // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) = _cur = from fun ref has_next(): Bool = _has_next fun ref next(): USize = let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem ``` fun ref has_next(): Bool Returns `true` if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to `next()` is a valid part of this iterator. Returns `false` if this Iterator is exhausted. The behavior of `next()` after this function returned `false` is undefined, it might throw an error or return values which are not part of this Iterator. fun ref next(): A ? Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted.","title":"iterator.pony"},{"location":"src/builtin/maybe_pointer/","text":"struct MaybePointer[A] A MaybePointer[A] is used to encode a possibly-null type. It should _only_ be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). new create(that: A) = This re-encodes the type of `that` from A to MaybePointer[A], allowing `that` to be assigned to a field or variable of type MaybePointer[A]. It doesn't allocate a wrapper object: there is no containing object for `that`. compile_intrinsic new none() = This returns a null pointer typed as a MaybePointer[A]. compile_intrinsic fun apply(): this- A ? = This re-encodes the type of `this` from MaybePointer[A] to A, allowing `this` to be assigned to a field of variable of type A. If `this` is a null pointer, an error is raised. compile_intrinsic fun is_none(): Bool = Returns true if `this` is null (ie apply would raise an error). compile_intrinsic","title":"maybe_pointer.pony"},{"location":"src/builtin/none/","text":"primitive None is Stringable fun string(): String iso^ = None .string()","title":"none.pony"},{"location":"src/builtin/platform/","text":"primitive Platform fun bsd(): Bool = freebsd() or dragonfly() or openbsd() fun freebsd(): Bool = compile_intrinsic fun dragonfly(): Bool = compile_intrinsic fun openbsd(): Bool = compile_intrinsic fun linux(): Bool = compile_intrinsic fun osx(): Bool = compile_intrinsic fun posix(): Bool = bsd() or linux() or osx() fun windows(): Bool = compile_intrinsic fun x86(): Bool = compile_intrinsic fun arm(): Bool = compile_intrinsic fun lp64(): Bool = compile_intrinsic fun llp64(): Bool = compile_intrinsic fun ilp32(): Bool = compile_intrinsic fun bigendian(): Bool = compile_intrinsic fun littleendian(): Bool = compile_intrinsic fun native128(): Bool = compile_intrinsic fun debug(): Bool = compile_intrinsic","title":"platform.pony"},{"location":"src/builtin/pointer/","text":"struct Pointer[A] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. new create() = A null pointer. compile_intrinsic new _alloc(len: USize) = Space for len instances of A. compile_intrinsic fun ref _realloc(len: USize): Pointer[A] = Keep the contents, but reserve space for len instances of A. compile_intrinsic fun tag _unsafe(): Pointer[A] ref = Unsafe change in reference capability. compile_intrinsic fun _convert[B](): this- Pointer[B] = Convert from Pointer[A] to Pointer[B]. compile_intrinsic fun _apply(i: USize): this- A = Retrieve index i. compile_intrinsic fun ref _update(i: USize, value: A!): A^ = Set index i and return the previous value. compile_intrinsic fun _offset(n: USize): this- Pointer[A] = Return a pointer to the n-th element. compile_intrinsic fun tag _element_size(): USize = Return the size of a single element in an array of type A. compile_intrinsic fun ref _insert(n: USize, len: USize): Pointer[A] = Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. compile_intrinsic fun ref _delete(n: USize, len: USize): A^ = Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. compile_intrinsic fun _copy_to(that: Pointer[this- A!], n: USize): this- Pointer[A] = Copy n elements from this to that. compile_intrinsic fun tag usize(): USize = Convert the pointer into an integer. compile_intrinsic fun tag is_null(): Bool = Return true for a null pointer, false for anything else. compile_intrinsic fun tag eq(that: Pointer[A] tag): Bool = Return true if this address is that address. compile_intrinsic fun tag lt(that: Pointer[A] tag): Bool = Return true if this address is less than that address. compile_intrinsic fun tag ne(that: Pointer[A] tag): Bool = not eq(that) fun tag le(that: Pointer[A] tag): Bool = lt(that) or eq(that) fun tag ge(that: Pointer[A] tag): Bool = not lt(that) fun tag gt(that: Pointer[A] tag): Bool = not le(that) fun tag hash(): USize = Returns a hash of the address. usize().hash() fun tag hash64(): U64 = Returns a 64-bit hash of the address. usize().hash64()","title":"pointer.pony"},{"location":"src/builtin/read_seq/","text":"interface box ReadSeq[A] The readable interface of a sequence. fun size(): USize Returns the number of elements in the sequence. fun apply(i: USize): this- A ? Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this- A, not A. fun values(): Iterator[this- A]^ Returns an iterator over the elements of the sequence. Note that this iterates over this- A, not A. interface box ReadElement[A] Used to show that a ReadSeq can return an element of a specific unmodified type. fun apply(i: USize): A ?","title":"read_seq.pony"},{"location":"src/builtin/real/","text":"trait val _ArithmeticConvertible fun i8(): I8 = compile_intrinsic fun i16(): I16 = compile_intrinsic fun i32(): I32 = compile_intrinsic fun i64(): I64 = compile_intrinsic fun i128(): I128 = compile_intrinsic fun ilong(): ILong = compile_intrinsic fun isize(): ISize = compile_intrinsic fun u8(): U8 = compile_intrinsic fun u16(): U16 = compile_intrinsic fun u32(): U32 = compile_intrinsic fun u64(): U64 = compile_intrinsic fun u128(): U128 = compile_intrinsic fun ulong(): ULong = compile_intrinsic fun usize(): USize = compile_intrinsic fun f32(): F32 = compile_intrinsic fun f64(): F64 = compile_intrinsic fun i8_unsafe(): I8 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i16_unsafe(): I16 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i32_unsafe(): I32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i64_unsafe(): I64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun i128_unsafe(): I128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun ilong_unsafe(): ILong = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun isize_unsafe(): ISize = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u8_unsafe(): U8 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u16_unsafe(): U16 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u32_unsafe(): U32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u64_unsafe(): U64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun u128_unsafe(): U128 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun ulong_unsafe(): ULong = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun usize_unsafe(): USize = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun f32_unsafe(): F32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic fun f64_unsafe(): F64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. compile_intrinsic trait val Real[A: Real[A] val] is (Stringable _ArithmeticConvertible Comparable[A]) new val create(value: A) new val from[B: (Number Real[B] val)](a: B) new val min_value() new val max_value() fun add(y: A): A = this + y fun sub(y: A): A = this - y fun mul(y: A): A = this * y fun div(y: A): A = this / y fun divrem(y: A): (A, A) = (this / y, this % y) fun rem(y: A): A = this % y fun neg(): A = -this fun eq(y: box- A): Bool = this == y fun ne(y: box- A): Bool = this != y fun lt(y: box- A): Bool = this y fun le(y: box- A): Bool = this = y fun ge(y: box- A): Bool = this = y fun gt(y: box- A): Bool = this y fun min(y: A): A fun max(y: A): A fun hash(): USize = var x = usize() ifdef ilp32 then x = (not x) + (x 15) x = x xor (x 12) x = x + (x 2) x = x xor (x 4) x = (x + (x 3)) + (x 11) x = x xor (x 16) x else hash64().usize() end fun hash64(): U64 = var x = u64() x = (not x) + (x 21) x = x xor (x 24) x = (x + (x 3)) + (x 8) x = x xor (x 14) x = (x + (x 2)) + (x 4) x = x xor (x 28) x = x + (x 31) x fun _value(): A = compile_intrinsic trait val Integer[A: Integer[A] val] is Real[A] fun add_unsafe(y: A): A = Unsafe operation. If the operation overflows, the result is undefined. this +~ y fun sub_unsafe(y: A): A = Unsafe operation. If the operation overflows, the result is undefined. this -~ y fun mul_unsafe(y: A): A = Unsafe operation. If the operation overflows, the result is undefined. this *~ y fun div_unsafe(y: A): A = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. this /~ y fun divrem_unsafe(y: A): (A, A) = Calculates the quotient of this number and `y` and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. (this /~ y, this %~ y) fun rem_unsafe(y: A): A = Calculates the remainder of this number divided by `y`. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. this %~ y fun add_partial(y: A): A ? Add y to this number. If the operation overflows this function errors. fun sub_partial(y: A): A ? Subtract y from this number. If the operation overflows/underflows this function errors. fun mul_partial(y: A): A ? Multiply y with this number. If the operation overflows this function errors. fun div_partial(y: A): A ? Divides this number by y. If y is `0` this function errors. fun rem_partial(y: A): A ? Calculates the remainder of this number divided by y. If y is `0` this function errors. fun divrem_partial(y: A): (A, A) ? Divides this number by y and calculates the remainder of the operation. If y is `0` this function errors. fun neg_unsafe(): A = Unsafe operation. If the operation overflows, the result is undefined. -~this fun addc(y: A): (A, Bool) Add `y` to this integer and return the result and a flag indicating overflow. fun subc(y: A): (A, Bool) Subtract `y` from this integer and return the result and a flag indicating overflow. fun mulc(y: A): (A, Bool) Multiply `y` with this integer and return the result and a flag indicating overflow. fun divc(y: A): (A, Bool) Divide this integer by `y` and return the result and a flag indicating overflow or division by zero. fun remc(y: A): (A, Bool) Calculated the ramainder of this number dividec by y and return the result and a flag indicating division by zero or overflow. fun op_and(y: A): A = this and y fun op_or(y: A): A = this or y fun op_xor(y: A): A = this xor y fun op_not(): A = not this fun bit_reverse(): A Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun bswap(): A trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is Integer[A] fun abs(): B fun shl(y: B): A = this y fun shr(y: B): A = this y fun shl_unsafe(y: B): A = Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. this ~ y fun shr_unsafe(y: B): A = Unsafe operation. If non-zero bits are shifted-out, the result is undefined. this ~ y fun popcount(): B fun clz(): B fun ctz(): B fun clz_unsafe(): B Unsafe operation. If this is 0, the result is undefined. fun ctz_unsafe(): B Unsafe operation. If this is 0, the result is undefined. fun bitwidth(): B fun bytewidth(): USize fun string(): String iso^ = _ToString._u64(abs().u64(), i64() 0) trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A] fun abs(): A fun shl(y: A): A = this y fun shr(y: A): A = this y fun shl_unsafe(y: A): A = Unsafe operation. If non-zero bits are shifted-out, the result is undefined. this ~ y fun shr_unsafe(y: A): A = Unsafe operation. If non-zero bits are shifted-out, the result is undefined. this ~ y fun rotl(y: A): A = let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this y') or (this (bitwidth() - y')) end fun rotr(y: A): A = let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this y') or (this (bitwidth() - y')) end fun popcount(): A fun clz(): A fun ctz(): A fun clz_unsafe(): A Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun ctz_unsafe(): A Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun bitwidth(): A fun bytewidth(): USize fun string(): String iso^ = _ToString._u64(u64(), false) trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] new val min_normalised() new val epsilon() fun tag radix(): U8 fun tag precision2(): U8 fun tag precision10(): U8 fun tag min_exp2(): I16 fun tag min_exp10(): I16 fun tag max_exp2(): I16 fun tag max_exp10(): I16 fun add_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this +~ y fun sub_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this -~ y fun mul_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this *~ y fun div_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this /~ y fun divrem_unsafe(y: A): (A, A) = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. (this /~ y, this %~ y) fun rem_unsafe(y: A): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this %~ y fun neg_unsafe(): A = Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. -~this fun eq_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this ==~ y fun ne_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this !=~ y fun lt_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this ~ y fun le_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this =~ y fun ge_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this =~ y fun gt_unsafe(y: box- A): Bool = Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. this ~ y fun abs(): A fun ceil(): A fun floor(): A fun round(): A fun trunc(): A fun finite(): Bool fun infinite(): Bool fun nan(): Bool fun ldexp(x: A, exponent: I32): A fun frexp(): (A, U32) fun log(): A fun log2(): A fun log10(): A fun logb(): A fun pow(y: A): A fun powi(y: I32): A fun sqrt(): A fun sqrt_unsafe(): A Unsafe operation. If this is negative, the result is undefined. fun cbrt(): A fun exp(): A fun exp2(): A fun cos(): A fun sin(): A fun tan(): A fun cosh(): A fun sinh(): A fun tanh(): A fun acos(): A fun asin(): A fun atan(): A fun atan2(y: A): A fun acosh(): A fun asinh(): A fun atanh(): A fun copysign(sign: A): A fun string(): String iso^ = _ToString._f64(f64()) type Number is (Int | Float) type Int is (Signed | Unsigned)","title":"real.pony"},{"location":"src/builtin/seq/","text":"interface Seq[A] A sequence of elements. new create(len: USize = 0) Create a sequence, reserving space for len elements. fun ref reserve(len: USize) Reserve space for len elements. fun size(): USize Returns the number of elements in the sequence. fun apply(i: USize): this- A ? Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun ref update(i: USize, value: A): A^ ? Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref clear() Removes all elements from the sequence. fun ref push(value: A) Adds an element to the end of the sequence. fun ref pop(): A^ ? Removes an element from the end of the sequence. fun ref unshift(value: A) Adds an element to the beginning of the sequence. fun ref shift(): A^ ? Removes an element from the beginning of the sequence. fun ref append( seq: (ReadSeq[A] ReadElement[A^]), offset: USize = 0, len: USize = -1) Add len elements to the end of the list, starting from the given offset. fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) Add len iterated elements to the end of the list, starting from the given offset. fun ref truncate(len: USize) Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun values(): Iterator[this- A]^ Returns an iterator over the elements of the sequence.","title":"seq.pony"},{"location":"src/builtin/signed/","text":"primitive I8 is _SignedInteger[I8, U8] new create(value: I8) = value new from[A: (Number Real[A] val)](a: A) = a.i8() new min_value() = -0x80 new max_value() = 0x7F fun abs(): U8 = if this 0 then (-this).u8() else this.u8() end fun bit_reverse(): I8 = @ llvm.bitreverse.i8 [I8](this) fun bswap(): I8 = this fun popcount(): U8 = @ llvm.ctpop.i8 [U8](this) fun clz(): U8 = @ llvm.ctlz.i8 [U8](this, false) fun ctz(): U8 = @ llvm.cttz.i8 [U8](this, false) fun clz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i8 [U8](this, true) fun ctz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i8 [U8](this, true) fun bitwidth(): U8 = 8 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I8): I8 = if this y then this else y end fun max(y: I8): I8 = if this y then this else y end fun addc(y: I8): (I8, Bool) = @ llvm.sadd.with.overflow.i8 [(I8, Bool)](this, y) fun subc(y: I8): (I8, Bool) = @ llvm.ssub.with.overflow.i8 [(I8, Bool)](this, y) fun mulc(y: I8): (I8, Bool) = @ llvm.smul.with.overflow.i8 [(I8, Bool)](this, y) fun divc(y: I8): (I8, Bool) = _SignedPartialArithmetic.div_checked[I8, U8](this, y) fun remc(y: I8): (I8, Bool) = _SignedPartialArithmetic.rem_checked[I8, U8](this, y) fun add_partial(y: I8): I8 ? = _SignedPartialArithmetic.add_partial[I8](this, y)? fun sub_partial(y: I8): I8 ? = _SignedPartialArithmetic.sub_partial[I8](this, y)? fun mul_partial(y: I8): I8 ? = _SignedPartialArithmetic.mul_partial[I8](this, y)? fun div_partial(y: I8): I8 ? = _SignedPartialArithmetic.div_partial[I8, U8](this, y)? fun rem_partial(y: I8): I8 ? = _SignedPartialArithmetic.rem_partial[I8, U8](this, y)? fun divrem_partial(y: I8): (I8, I8) ? = _SignedPartialArithmetic.divrem_partial[I8, U8](this, y)? primitive I16 is _SignedInteger[I16, U16] new create(value: I16) = value new from[A: (Number Real[A] val)](a: A) = a.i16() new min_value() = -0x8000 new max_value() = 0x7FFF fun abs(): U16 = if this 0 then (-this).u16() else this.u16() end fun bit_reverse(): I16 = @ llvm.bitreverse.i16 [I16](this) fun bswap(): I16 = @ llvm.bswap.i16 [I16](this) fun popcount(): U16 = @ llvm.ctpop.i16 [U16](this) fun clz(): U16 = @ llvm.ctlz.i16 [U16](this, false) fun ctz(): U16 = @ llvm.cttz.i16 [U16](this, false) fun clz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i16 [U16](this, true) fun ctz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i16 [U16](this, true) fun bitwidth(): U16 = 16 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I16): I16 = if this y then this else y end fun max(y: I16): I16 = if this y then this else y end fun addc(y: I16): (I16, Bool) = @ llvm.sadd.with.overflow.i16 [(I16, Bool)](this, y) fun subc(y: I16): (I16, Bool) = @ llvm.ssub.with.overflow.i16 [(I16, Bool)](this, y) fun mulc(y: I16): (I16, Bool) = @ llvm.smul.with.overflow.i16 [(I16, Bool)](this, y) fun divc(y: I16): (I16, Bool) = _SignedPartialArithmetic.div_checked[I16, U16](this, y) fun remc(y: I16): (I16, Bool) = _SignedPartialArithmetic.rem_checked[I16, U16](this, y) fun add_partial(y: I16): I16 ? = _SignedPartialArithmetic.add_partial[I16](this, y)? fun sub_partial(y: I16): I16 ? = _SignedPartialArithmetic.sub_partial[I16](this, y)? fun mul_partial(y: I16): I16 ? = _SignedPartialArithmetic.mul_partial[I16](this, y)? fun div_partial(y: I16): I16 ? = _SignedPartialArithmetic.div_partial[I16, U16](this, y)? fun rem_partial(y: I16): I16 ? = _SignedPartialArithmetic.rem_partial[I16, U16](this, y)? fun divrem_partial(y: I16): (I16, I16) ? = _SignedPartialArithmetic.divrem_partial[I16, U16](this, y)? primitive I32 is _SignedInteger[I32, U32] new create(value: I32) = value new from[A: (Number Real[A] val)](a: A) = a.i32() new min_value() = -0x8000_0000 new max_value() = 0x7FFF_FFFF fun abs(): U32 = if this 0 then (-this).u32() else this.u32() end fun bit_reverse(): I32 = @ llvm.bitreverse.i32 [I32](this) fun bswap(): I32 = @ llvm.bswap.i32 [I32](this) fun popcount(): U32 = @ llvm.ctpop.i32 [U32](this) fun clz(): U32 = @ llvm.ctlz.i32 [U32](this, false) fun ctz(): U32 = @ llvm.cttz.i32 [U32](this, false) fun clz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i32 [U32](this, true) fun ctz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i32 [U32](this, true) fun bitwidth(): U32 = 32 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I32): I32 = if this y then this else y end fun max(y: I32): I32 = if this y then this else y end fun addc(y: I32): (I32, Bool) = @ llvm.sadd.with.overflow.i32 [(I32, Bool)](this, y) fun subc(y: I32): (I32, Bool) = @ llvm.ssub.with.overflow.i32 [(I32, Bool)](this, y) fun mulc(y: I32): (I32, Bool) = @ llvm.smul.with.overflow.i32 [(I32, Bool)](this, y) fun divc(y: I32): (I32, Bool) = _SignedPartialArithmetic.div_checked[I32, U32](this, y) fun remc(y: I32): (I32, Bool) = _SignedPartialArithmetic.rem_checked[I32, U32](this, y) fun add_partial(y: I32): I32 ? = _SignedPartialArithmetic.add_partial[I32](this, y)? fun sub_partial(y: I32): I32 ? = _SignedPartialArithmetic.sub_partial[I32](this, y)? fun mul_partial(y: I32): I32 ? = _SignedPartialArithmetic.mul_partial[I32](this, y)? fun div_partial(y: I32): I32 ? = _SignedPartialArithmetic.div_partial[I32, U32](this, y)? fun rem_partial(y: I32): I32 ? = _SignedPartialArithmetic.rem_partial[I32, U32](this, y)? fun divrem_partial(y: I32): (I32, I32) ? = _SignedPartialArithmetic.divrem_partial[I32, U32](this, y)? primitive I64 is _SignedInteger[I64, U64] new create(value: I64) = value new from[A: (Number Real[A] val)](a: A) = a.i64() new min_value() = -0x8000_0000_0000_0000 new max_value() = 0x7FFF_FFFF_FFFF_FFFF fun abs(): U64 = if this 0 then (-this).u64() else this.u64() end fun bit_reverse(): I64 = @ llvm.bitreverse.i64 [I64](this) fun bswap(): I64 = @ llvm.bswap.i64 [I64](this) fun popcount(): U64 = @ llvm.ctpop.i64 [U64](this) fun clz(): U64 = @ llvm.ctlz.i64 [U64](this, false) fun ctz(): U64 = @ llvm.cttz.i64 [U64](this, false) fun clz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i64 [U64](this, true) fun ctz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i64 [U64](this, true) fun bitwidth(): U64 = 64 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I64): I64 = if this y then this else y end fun max(y: I64): I64 = if this y then this else y end fun hash(): USize = u64().hash() fun addc(y: I64): (I64, Bool) = @ llvm.sadd.with.overflow.i64 [(I64, Bool)](this, y) fun subc(y: I64): (I64, Bool) = @ llvm.ssub.with.overflow.i64 [(I64, Bool)](this, y) fun mulc(y: I64): (I64, Bool) = _SignedCheckedArithmetic._mulc[U64, I64](this, y) fun divc(y: I64): (I64, Bool) = _SignedPartialArithmetic.div_checked[I64, U64](this, y) fun remc(y: I64): (I64, Bool) = _SignedPartialArithmetic.rem_checked[I64, U64](this, y) fun add_partial(y: I64): I64 ? = _SignedPartialArithmetic.add_partial[I64](this, y)? fun sub_partial(y: I64): I64 ? = _SignedPartialArithmetic.sub_partial[I64](this, y)? fun mul_partial(y: I64): I64 ? = _SignedPartialArithmetic.mul_partial[I64](this, y)? fun div_partial(y: I64): I64 ? = _SignedPartialArithmetic.div_partial[I64, U64](this, y)? fun rem_partial(y: I64): I64 ? = _SignedPartialArithmetic.rem_partial[I64, U64](this, y)? fun divrem_partial(y: I64): (I64, I64) ? = _SignedPartialArithmetic.divrem_partial[I64, U64](this, y)? primitive ILong is _SignedInteger[ILong, ULong] new create(value: ILong) = value new from[A: (Number Real[A] val)](a: A) = a.ilong() new min_value() = ifdef ilp32 or llp64 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() = ifdef ilp32 or llp64 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): ULong = if this 0 then (-this).ulong() else this.ulong() end fun bit_reverse(): ILong = ifdef ilp32 or llp64 then @ llvm.bitreverse.i32 [ILong](this) else @ llvm.bitreverse.i64 [ILong](this) end fun bswap(): ILong = ifdef ilp32 or llp64 then @ llvm.bswap.i32 [ILong](this) else @ llvm.bswap.i64 [ILong](this) end fun popcount(): ULong = ifdef ilp32 or llp64 then @ llvm.ctpop.i32 [ULong](this) else @ llvm.ctpop.i64 [ULong](this) end fun clz(): ULong = ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, false) else @ llvm.ctlz.i64 [ULong](this, false) end fun ctz(): ULong = ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, false) end fun clz_unsafe(): ULong = ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, true) else @ llvm.ctlz.i64 [ULong](this, true) end fun ctz_unsafe(): ULong = ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, true) end fun bitwidth(): ULong = ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: ILong): ILong = if this y then this else y end fun max(y: ILong): ILong = if this y then this else y end fun hash(): USize = ulong().hash() fun addc(y: ILong): (ILong, Bool) = ifdef ilp32 or llp64 then @ llvm.sadd.with.overflow.i32 [(ILong, Bool)](this, y) else @ llvm.sadd.with.overflow.i64 [(ILong, Bool)](this, y) end fun subc(y: ILong): (ILong, Bool) = ifdef ilp32 or llp64 then @ llvm.ssub.with.overflow.i32 [(ILong, Bool)](this, y) else @ llvm.ssub.with.overflow.i64 [(ILong, Bool)](this, y) end fun mulc(y: ILong): (ILong, Bool) = ifdef ilp32 or llp64 then @ llvm.smul.with.overflow.i32 [(ILong, Bool)](this, y) else _SignedCheckedArithmetic._mulc[ULong, ILong](this, y) end fun divc(y: ILong): (ILong, Bool) = _SignedPartialArithmetic.div_checked[ILong, ULong](this, y) fun remc(y: ILong): (ILong, Bool) = _SignedPartialArithmetic.rem_checked[ILong, ULong](this, y) fun add_partial(y: ILong): ILong ? = _SignedPartialArithmetic.add_partial[ILong](this, y)? fun sub_partial(y: ILong): ILong ? = _SignedPartialArithmetic.sub_partial[ILong](this, y)? fun mul_partial(y: ILong): ILong ? = _SignedPartialArithmetic.mul_partial[ILong](this, y)? fun div_partial(y: ILong): ILong ? = _SignedPartialArithmetic.div_partial[ILong, ULong](this, y)? fun rem_partial(y: ILong): ILong ? = _SignedPartialArithmetic.rem_partial[ILong, ULong](this, y)? fun divrem_partial(y: ILong): (ILong, ILong) ? = _SignedPartialArithmetic.divrem_partial[ILong, ULong](this, y)? primitive ISize is _SignedInteger[ISize, USize] new create(value: ISize) = value new from[A: (Number Real[A] val)](a: A) = a.isize() new min_value() = ifdef ilp32 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() = ifdef ilp32 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): USize = if this 0 then (-this).usize() else this.usize() end fun bit_reverse(): ISize = ifdef ilp32 then @ llvm.bitreverse.i32 [ISize](this) else @ llvm.bitreverse.i64 [ISize](this) end fun bswap(): ISize = ifdef ilp32 then @ llvm.bswap.i32 [ISize](this) else @ llvm.bswap.i64 [ISize](this) end fun popcount(): USize = ifdef ilp32 then @ llvm.ctpop.i32 [USize](this) else @ llvm.ctpop.i64 [USize](this) end fun clz(): USize = ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, false) else @ llvm.ctlz.i64 [USize](this, false) end fun ctz(): USize = ifdef ilp32 then @ llvm.cttz.i32 [USize](this, false) else @ llvm.cttz.i64 [USize](this, false) end fun clz_unsafe(): USize = ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, true) else @ llvm.ctlz.i64 [USize](this, true) end fun ctz_unsafe(): USize = ifdef ilp32 then @ llvm.cttz.i32 [USize](this, true) else @ llvm.cttz.i64 [USize](this, true) end fun bitwidth(): USize = ifdef ilp32 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: ISize): ISize = if this y then this else y end fun max(y: ISize): ISize = if this y then this else y end fun addc(y: ISize): (ISize, Bool) = ifdef ilp32 then @ llvm.sadd.with.overflow.i32 [(ISize, Bool)](this, y) else @ llvm.sadd.with.overflow.i64 [(ISize, Bool)](this, y) end fun subc(y: ISize): (ISize, Bool) = ifdef ilp32 then @ llvm.ssub.with.overflow.i32 [(ISize, Bool)](this, y) else @ llvm.ssub.with.overflow.i64 [(ISize, Bool)](this, y) end fun mulc(y: ISize): (ISize, Bool) = ifdef ilp32 then @ llvm.smul.with.overflow.i32 [(ISize, Bool)](this, y) else _SignedCheckedArithmetic._mulc[USize, ISize](this, y) end fun divc(y: ISize): (ISize, Bool) = _SignedPartialArithmetic.div_checked[ISize, USize](this, y) fun remc(y: ISize): (ISize, Bool) = _SignedPartialArithmetic.rem_checked[ISize, USize](this, y) fun add_partial(y: ISize): ISize ? = _SignedPartialArithmetic.add_partial[ISize](this, y)? fun sub_partial(y: ISize): ISize ? = _SignedPartialArithmetic.sub_partial[ISize](this, y)? fun mul_partial(y: ISize): ISize ? = _SignedPartialArithmetic.mul_partial[ISize](this, y)? fun div_partial(y: ISize): ISize ? = _SignedPartialArithmetic.div_partial[ISize, USize](this, y)? fun rem_partial(y: ISize): ISize ? = _SignedPartialArithmetic.rem_partial[ISize, USize](this, y)? fun divrem_partial(y: ISize): (ISize, ISize) ? = _SignedPartialArithmetic.divrem_partial[ISize, USize](this, y)? primitive I128 is _SignedInteger[I128, U128] new create(value: I128) = value new from[A: (Number Real[A] val)](a: A) = a.i128() new min_value() = -0x8000_0000_0000_0000_0000_0000_0000_0000 new max_value() = 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun abs(): U128 = if this 0 then (-this).u128() else this.u128() end fun bit_reverse(): I128 = @ llvm.bitreverse.i128 [I128](this) fun bswap(): I128 = @ llvm.bswap.i128 [I128](this) fun popcount(): U128 = @ llvm.ctpop.i128 [U128](this) fun clz(): U128 = @ llvm.ctlz.i128 [U128](this, false) fun ctz(): U128 = @ llvm.cttz.i128 [U128](this, false) fun clz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i128 [U128](this, true) fun ctz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i128 [U128](this, true) fun bitwidth(): U128 = 128 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: I128): I128 = if this y then this else y end fun max(y: I128): I128 = if this y then this else y end fun hash(): USize = u128().hash() fun hash64(): U64 = u128().hash64() fun string(): String iso^ = _ToString._u128(abs().u128(), this 0) fun mul(y: I128): I128 = (u128() * y.u128()).i128() fun divrem(y: I128): (I128, I128) = ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var num: I128 = if this = 0 then this else -this end var den: I128 = if y = 0 then y else -y end (let q, let r) = num.u128().divrem(den.u128()) (var q', var r') = (q.i128(), r.i128()) if this 0 then r' = -r' if y 0 then q' = -q' end elseif y 0 then q' = -q' end (q', r') end fun div(y: I128): I128 = ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: I128): I128 = ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: I128): I128 = Unsafe operation. If the operation overflows, the result is undefined. ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: I128): (I128, I128) = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: I128): I128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: I128): I128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this %~ y else this % y end fun f32(): F32 = f64().f32() fun f64(): F64 = if this 0 then -(-u128()).f64() else u128().f64() end fun f32_unsafe(): F32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64() fun addc(y: I128): (I128, Bool) = ifdef native128 then @ llvm.sadd.with.overflow.i128 [(I128, Bool)](this, y) else let overflow = if y 0 then (this (max_value() - y)) else (this (min_value() - y)) end (this + y, overflow) end fun subc(y: I128): (I128, Bool) = ifdef native128 then @ llvm.ssub.with.overflow.i128 [(I128, Bool)](this, y) else let overflow = if y 0 then (this (min_value() + y)) else (this (max_value() + y)) end (this - y, overflow) end fun mulc(y: I128): (I128, Bool) = // using llvm.smul.with.overflow.i128 would require to link // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c // See this bug for reference: // the following implementation is more or less exactly was __muloti4 is // doing _SignedCheckedArithmetic._mulc[U128, I128](this, y) fun divc(y: I128): (I128, Bool) = _SignedPartialArithmetic.div_checked[I128, U128](this, y) fun remc(y: I128): (I128, Bool) = _SignedPartialArithmetic.rem_checked[I128, U128](this, y) fun add_partial(y: I128): I128 ? = _SignedPartialArithmetic.add_partial[I128](this, y)? fun sub_partial(y: I128): I128 ? = _SignedPartialArithmetic.sub_partial[I128](this, y)? fun mul_partial(y: I128): I128 ? = _SignedPartialArithmetic.mul_partial[I128](this, y)? fun div_partial(y: I128): I128 ? = _SignedPartialArithmetic.div_partial[I128, U128](this, y)? fun rem_partial(y: I128): I128 ? = _SignedPartialArithmetic.rem_partial[I128, U128](this, y)? fun divrem_partial(y: I128): (I128, I128) ? = _SignedPartialArithmetic.divrem_partial[I128, U128](this, y)? type Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize) primitive _SignedCheckedArithmetic fun _mulc[U: _UnsignedInteger[U] val, T: (Signed _SignedInteger[T, U] val)](x: T, y: T): (T, Bool) = basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: `@ llvm.smul.with.overflow.i64 [(I64, Bool)](this, y)` Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. let result = x * y if x == T.min_value() then return (result, (y != T.from[I8](0)) and (y != T.from[I8](1))) end if y == T.min_value() then return (result, (x != T.from[I8](0)) and (x != T.from[I8](1))) end let x_neg = x (x.bitwidth() - U.from[U8](1)) let x_abs = (x xor x_neg) - x_neg let y_neg = y (x.bitwidth() - U.from[U8](1)) let y_abs = (y xor y_neg) - y_neg if ((x_abs T.from[I8](2)) or (y_abs T.from[I8](2))) then return (result, false) end if (x_neg == y_neg) then (result, (x_abs (T.max_value() / y_abs))) else (result, (x_abs (T.min_value() / -y_abs))) end","title":"signed.pony"},{"location":"src/builtin/source_loc/","text":"interface val SourceLoc Represents a location in a Pony source file, as reported by `__loc`. fun file(): String Name and path of source file. fun type_name(): String Name of nearest class, actor, primitive, struct, interface, or trait. fun method_name(): String Name of containing method. fun line(): USize Line number within file. Line numbers start at 1. fun pos(): USize Character position on line. Character positions start at 1.","title":"source_loc.pony"},{"location":"src/builtin/std_stream/","text":"type ByteSeq is (String | Array[U8] val) interface val ByteSeqIter Accept an iterable collection of String or Array[U8] val. fun values(): Iterator[this- ByteSeq box] interface tag OutStream Asnychronous access to some output stream. be print(data: ByteSeq) Print some bytes and insert a newline afterwards. be write(data: ByteSeq) Print some bytes without inserting a newline afterwards. be printv(data: ByteSeqIter) Print an iterable collection of ByteSeqs. be writev(data: ByteSeqIter) Write an iterable collection of ByteSeqs. actor StdStream Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. var _stream: Pointer[None] new _out() = Create an async stream for stdout. _stream = @pony_os_stdout[Pointer[None]]() new _err() = Create an async stream for stderr. _stream = @pony_os_stderr[Pointer[None]]() be print(data: ByteSeq) = Print some bytes and insert a newline afterwards. _print(data) be write(data: ByteSeq) = Print some bytes without inserting a newline afterwards. _write(data) be printv(data: ByteSeqIter) = Print an iterable collection of ByteSeqs. for bytes in data.values() do _print(bytes) end be writev(data: ByteSeqIter) = Write an iterable collection of ByteSeqs. for bytes in data.values() do _write(bytes) end fun ref _write(data: ByteSeq) = Write the bytes without explicitly flushing. @pony_os_std_write[None](_stream, data.cpointer(), data.size()) fun ref _print(data: ByteSeq) = Write the bytes and a newline without explicitly flushing. @pony_os_std_print[None](_stream, data.cpointer(), data.size())","title":"std_stream.pony"},{"location":"src/builtin/stdin/","text":"use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) interface InputNotify Notification for data arriving via an input stream. fun ref apply(data: Array[U8] iso) = Called when data is available on the stream. None fun ref dispose() = Called when no more data will arrive on the stream. None interface tag DisposableActor An interface used to asynchronously dispose of an actor. be dispose() interface tag InputStream Asynchronous access to some input stream. be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be dispose() = Clear the notifier in order to shut down input. None actor Stdin Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an `InputNotify`: ```pony actor Main new create(env: Env) = // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) = env.out.write(String.from_iso_array(consume data)) fun ref dispose() = env.out.print( Done. ) end, 512) ``` **Note:** For reading user input from a terminal, use the [term](term--index) package. var _notify: (InputNotify | None) = None var _chunk_size: USize = 32 var _event: AsioEventID = AsioEvent.none() let _use_event: Bool new _create(use_event: Bool) = Create an asynchronous stdin provider. _use_event = use_event be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) = Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. _set_notify(consume notify) _chunk_size = chunk_size be dispose() = Clear the notifier in order to shut down input. _set_notify(None) fun ref _set_notify(notify: (InputNotify iso | None)) = Set the notifier. if notify is None then if _use_event and not _event.is_null() then // Unsubscribe the event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end elseif _notify is None then if _use_event then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true) else // Start the read loop. _loop_read() end end try (_notify as InputNotify).dispose() end _notify = consume notify be _loop_read() = If we are able to read from stdin, schedule another read. if _read() then _loop_read() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) = When the event fires, read from stdin. if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif (_event is event) and AsioEvent.readable(flags) then _read() end be _read_again() = Resume reading. _read() fun ref _read(): Bool = Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. try let notify = _notify as InputNotify var sum: USize = 0 while true do let chunk_size = _chunk_size var data = recover Array[U8] . undefined(chunk_size) end var again: Bool = false let len = @pony_os_stdin_read[USize](data.cpointer(), data.size(), addressof again) match len | -1 = // Error, possibly would block. Try again. return true | 0 = // EOF. Close everything, stop reading. _close_event() notify.dispose() _notify = None return false end data.truncate(len) notify(consume data) if not again then // Not allowed to call pony_os_stdin_read again yet, exit loop. return true end sum = sum + len if sum (1 12) then if _use_event then _read_again() end break end end true else // No notifier. Stop reading. _close_event() false end fun ref _close_event() = Close the event. if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end","title":"stdin.pony"},{"location":"src/builtin/string/","text":"use @memcmp[I32](dst: Pointer[U8] box, src: Pointer[U8] box, len: USize) use @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize) use @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize) use @strtof[F32](nptr: Pointer[U8] box, endptr: USize) use @strtod[F64](nptr: Pointer[U8] box, endptr: USize) class val String is (Seq[U8] Comparable[String box] Stringable) A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: ```pony actor Main new create(env: Env) = try // construct a new string let str = Hello // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add world to the end of our original string let str_new = str.add( world ) // count occurrences of letter l let count = str_new.count( l ) // find first occurrence of letter w let first_w = str_new.find( w ) // find first occurrence of letter d let first_d = str_new.find( d ) // get substring capturing world let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end ``` var _size: USize var _alloc: USize var _ptr: Pointer[U8] new create(len: USize = 0) = An empty string. Enough space for len bytes is reserved. _size = 0 _alloc = len.min(len.max_value() - 1) + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) new val from_array(data: Array[U8] val) = Create a string from an array, reusing the underlying data pointer. _size = data.size() _alloc = data.space() _ptr = data.cpointer()._unsafe() new iso from_iso_array(data: Array[U8] iso) = Create a string from an array, reusing the underlying data pointer _size = data.size() _alloc = data.space() _ptr = (consume data).cpointer()._unsafe() if _alloc _size then _set(_size, 0) end new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) = Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = alloc.max(_size.min(len.max_value() - 1)) _ptr = str end new from_cstring(str: Pointer[U8]) = Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = str end new copy_cpointer(str: Pointer[U8] box, len: USize) = Create a string by copying a fixed number of bytes from a pointer. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new copy_cstring(str: Pointer[U8] box) = Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new from_utf32(value: U32) = Create a UTF-8 string from a single UTF-32 code point. let encoded = _UTF32Encoder.encode(value) _size = encoded._1 _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, encoded._2) if encoded._1 1 then _set(1, encoded._3) if encoded._1 2 then _set(2, encoded._4) if encoded._1 3 then _set(3, encoded._5) end end end _set(_size, 0) fun ref push_utf32(value: U32) = Push a UTF-32 code point. let encoded = _UTF32Encoder.encode(value) let i = _size _size = _size + encoded._1 reserve(_size) _set(i, encoded._2) if encoded._1 1 then _set(i + 1, encoded._3) if encoded._1 2 then _set(i + 2, encoded._4) if encoded._1 3 then _set(i + 3, encoded._5) end end end _set(_size, 0) fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) = Copy copy_len characters from this to that at specified offsets. _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[U8] tag = Returns a C compatible pointer to the underlying string allocation. _ptr._offset(offset) fun cstring(): Pointer[U8] tag = Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. if is_null_terminated() then return _ptr end let ptr = Pointer[U8]._alloc(_size + 1) _ptr._copy_to(ptr._unsafe(), _size) ptr._update(_size, 0) ptr fun val array(): Array[U8] val = Returns an Array[U8] that reuses the underlying data pointer. recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun iso iso_array(): Array[U8] iso^ = Returns an Array[U8] iso that reuses the underlying data pointer. recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun size(): USize = Returns the length of the string data in bytes. _size fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize = Returns the number of unicode code points in the string between the two offsets. Index range [`from` .. `to`) is half-open. if _size == 0 then return 0 end var i = offset_to_index(from) let j = offset_to_index(to).min(_size) var n = USize(0) while i j do if (_ptr._apply(i) and 0xC0) != 0x80 then n = n + 1 end i = i + 1 end n fun space(): USize = Returns the space available for data, not including the null terminator. if is_null_terminated() then _alloc - 1 else _alloc end fun ref reserve(len: USize) = Reserve space for len bytes. An additional byte will be reserved for the null terminator. if _alloc = len then let max = len.max_value() - 1 let min_alloc = len.min(max) + 1 if min_alloc = (max / 2) then _alloc = min_alloc.next_pow2() else _alloc = min_alloc.min(max) end _ptr = _ptr._realloc(_alloc) end fun ref compact() = Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. if (_size + 1) = 512 then if (_size + 1).next_pow2() != _alloc.next_pow2() then _alloc = (_size + 1).next_pow2() let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end elseif (_size + 1) _alloc then _alloc = (_size + 1) let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end fun ref recalc() = Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. var s: USize = 0 while (s _alloc) and (_ptr._apply(s) 0) do s = s + 1 end if s != _alloc then _size = s end fun ref truncate(len: USize) = Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. if len = _alloc then _size = len.min(_alloc) reserve(_alloc + 1) else _size = len.min(_alloc - 1) end _set(_size, 0) fun ref trim_in_place(from: USize = 0, to: USize = -1) = Trim the string to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new string nor copy elements. let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this string and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[U8] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): String val = Return a shared portion of this string, covering `from` until `to`. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (String iso^, String iso^) = Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the right portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. let start_ptr = _ptr let size' = _size.min(split_point) let alloc = if size' == _size then _alloc else split_point end trim_in_place(split_point) let left = recover if size' 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume left, consume this) fun is_null_terminated(): Bool = Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. (_alloc 0) and (_alloc != _size) and (_ptr._apply(_size) == 0) fun utf32(offset: ISize): (U32, U8) ? = Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. let i = offset_to_index(offset) let err: (U32, U8) = (0xFFFD, 1) if i = _size then error end let c = _ptr._apply(i) if c 0x80 then // 1-byte (c.u32(), 1) elseif c 0xC2 then // Stray continuation. err elseif c 0xE0 then // 2-byte if (i + 1) = _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) if (c2 and 0xC0) != 0x80 then // Not a continuation byte. err else (((c.u32() 6) + c2.u32()) - 0x3080, 2) end end elseif c 0xF0 then // 3-byte. if (i + 2) = _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xE0) and (c2 0xA0)) then err else (((c.u32() 12) + (c2.u32() 6) + c3.u32()) - 0xE2080, 3) end end elseif c 0xF5 then // 4-byte. if (i + 3) = _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) let c4 = _ptr._apply(i + 3) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or ((c4 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xF0) and (c2 0x90)) or // UTF32 would be 0x10FFFF. ((c == 0xF4) and (c2 = 0x90)) then err else (((c.u32() 18) + (c2.u32() 12) + (c3.u32() 6) + c4.u32()) - 0x3C82080, 4) end end else // UTF32 would be 0x10FFFF. err end fun apply(i: USize): U8 ? = Returns the i-th byte. Raise an error if the index is out of bounds. if i _size then _ptr._apply(i) else error end fun ref update(i: USize, value: U8): U8 ? = Change the i-th byte. Raise an error if the index is out of bounds. if i _size then _set(i, value) else error end fun at_offset(offset: ISize): U8 ? = Returns the byte at the given offset. Raise an error if the offset is out of bounds. this(offset_to_index(offset))? fun ref update_offset(offset: ISize, value: U8): U8 ? = Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. this(offset_to_index(offset))? = value fun clone(): String iso^ = Returns a copy of the string. The resulting string is null-terminated even if the original is not. let len = _size let str = recover String(len) end _ptr._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? = Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. var i = offset_to_index(offset) var steps = nth + 1 while i _size do var j: USize = 0 let same = while j s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i + 1 end error fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? = Return the index of n-th instance of `s` in the string starting from the end. The `offset` represents the highest index to included in the search. Raise an error if there is no n-th occurrence of `s` or `s` is empty. var i = (offset_to_index(offset) + 1) - s._size var steps = nth + 1 while i _size do var j: USize = 0 let same = while j s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i - 1 end error fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool = Returns true if contains s as a substring, false otherwise. var i = offset_to_index(offset) var steps = nth + 1 while i _size do var j: USize = 0 let same = while j s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return true end i = i + 1 end false fun count(s: String box, offset: ISize = 0): USize = Counts the non-overlapping occurrences of s in the string. let j: ISize = (_size - s.size()).isize() var i: USize = 0 var k = offset if j 0 then return 0 elseif (j == 0) and (this == s) then return 1 end try while k = j do k = find(s, k)? + s.size().isize() i = i + 1 end end i fun at(s: String box, offset: ISize = 0): Bool = Returns true if the substring s is present at the given offset. let i = offset_to_index(offset) if (i + s.size()) = _size then @memcmp(_ptr._offset(i), s._ptr, s._size) == 0 else false end fun ref delete(offset: ISize, len: USize = 1) = Delete len bytes at the supplied offset, compacting the string in place. let i = offset_to_index(offset) if i _size then let n = len.min(_size - i) _size = _size - n _ptr._offset(i)._delete(n, _size - i) _set(_size, 0) end fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ = Returns a substring. Index range [`from` .. `to`) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see `trim` and `trim_in_place`. let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start _size) and (start finish) then let len = finish - start let str = recover String(len) end _ptr._offset(start)._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str else recover String end end fun lower(): String iso^ = Returns a lower case version of the string. let s = clone() s.lower_in_place() s fun ref lower_in_place() = Transforms the string to lower case. Currently only knows ASCII case. var i: USize = 0 while i _size do let c = _ptr._apply(i) if (c = 0x41) and (c = 0x5A) then _set(i, c + 0x20) end i = i + 1 end fun upper(): String iso^ = Returns an upper case version of the string. Currently only knows ASCII case. let s = clone() s.upper_in_place() s fun ref upper_in_place() = Transforms the string to upper case. var i: USize = 0 while i _size do let c = _ptr._apply(i) if (c = 0x61) and (c = 0x7A) then _set(i, c - 0x20) end i = i + 1 end fun reverse(): String iso^ = Returns a reversed version of the string. let s = clone() s.reverse_in_place() s fun ref reverse_in_place() = Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. if _size 1 then var i: USize = 0 var j = _size - 1 while i j do let x = _ptr._apply(i) _set(i, _ptr._apply(j)) _set(j, x) i = i + 1 j = j - 1 end end fun ref push(value: U8) = Add a byte to the end of the string. reserve(_size + 1) _set(_size, value) _size = _size + 1 _set(_size, 0) fun ref pop(): U8 ? = Remove a byte from the end of the string. if _size 0 then _size = _size - 1 _ptr._offset(_size)._delete(1, 0) else error end fun ref unshift(value: U8) = Adds a byte to the beginning of the string. if value != 0 then reserve(_size + 1) @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1) _set(0, value) _size = _size + 1 else _set(0, 0) _size = 0 end fun ref shift(): U8 ? = Removes a byte from the beginning of the string. if _size 0 then let value = _ptr._apply(0) @memmove(_ptr.usize(), _ptr.usize() + 1, _size) _size = _size - 1 value else error end fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) = Append the elements from a sequence, starting from the given offset. if offset = seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) match seq | let s: (String box | Array[U8] box) = s._copy_to(_ptr, copy_len, offset, _size) _size = _size + copy_len _set(_size, 0) else let cap = copy_len + offset var i = offset try while i cap do push(seq(i)?) i = i + 1 end end end fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) = Add len iterated bytes to the end of the string, starting from the given offset. try var n = USize(0) while n offset do if iter.has_next() then iter.next()? else return end n = n + 1 end n = 0 while n len do if iter.has_next() then push(iter.next()?) else return end n = n + 1 end end fun ref clear() = Truncate the string to zero length. _set(0, 0) _size = 0 fun insert(offset: ISize, that: String): String iso^ = Returns a version of the string with the given string inserted at the given offset. let s = clone() s.insert_in_place(offset, that) s fun ref insert_in_place(offset: ISize, that: String box) = Inserts the given string at the given offset. Appends the string if the offset is out of bounds. reserve(_size + that._size) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + that._size, _ptr.usize() + index, _size - index) that._ptr._copy_to(_ptr._offset(index), that._size) _size = _size + that._size _set(_size, 0) fun ref insert_byte(offset: ISize, value: U8) = Inserts a byte at the given offset. Appends if the offset is out of bounds. reserve(_size + 1) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + 1, _ptr.usize() + index, _size - index) _set(index, value) _size = _size + 1 _set(_size, 0) fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ = Returns a version of the string with the given range deleted. Index range [`from` .. `to`) is half-open. let s = clone() s.cut_in_place(from, to) s fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) = Cuts the given range out of the string. Index range [`from` .. `to`) is half-open. let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start _size) and (start finish) and (finish = _size) then let fragment_len = finish - start let new_size = _size - fragment_len var i = start while i new_size do _set(i, _ptr._apply(i + fragment_len)) i = i + 1 end _size = _size - fragment_len _set(_size, 0) end fun ref remove(s: String box): USize = Remove all instances of s from the string. Returns the count of removed instances. var i: ISize = 0 var n: USize = 0 try while true do i = find(s, i)? cut_in_place(i, i + s.size().isize()) n = n + 1 end end n fun ref replace(from: String box, to: String box, n: USize = 0): USize = Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. let from_len = from.size().isize() let to_len = to.size().isize() var offset = ISize(0) var occur = USize(0) try while true do offset = find(from, offset)? cut_in_place(offset, offset + from_len) insert_in_place(offset, to) offset = offset + to_len occur = occur + 1 if (n 0) and (occur = n) then break end end end occur fun split_by( delim: String, n: USize = USize.max_value()) : Array[String] iso^ = Split the string into an array of strings that are delimited by `delim` in the original string. If `n 0`, then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, ` 1,,2 .split( , ) = [ 1 , , 2 ]`. An empty delimiter results in an array that contains a single element equal to the whole string. let delim_size = ISize.from[USize](delim.size()) let total_size = ISize.from[USize](size()) let result = recover Array[String] end var current = ISize(0) while ((result.size() + 1) n) and (current total_size) do try let delim_start = find(delim where offset = current)? result.push(substring(current, delim_start)) current = delim_start + delim_size else break end end result.push(substring(current)) consume result fun split(delim: String = \\t\\v\\f\\r\\n , n: USize = 0): Array[String] iso^ = Split the string into an array of strings. Any character in the delimiter string is accepted as a delimiter. If `n 0`, then the split count is limited to n. Adjacent delimiters result in a zero length entry in the array. For example, ` 1,,2 .split( , ) = [ 1 , , 2 ]`. let result = recover Array[String] end if _size 0 then let chars = Array[U32](delim.size()) for rune in delim.runes() do chars.push(rune) end var cur = recover String end var i = USize(0) var occur = USize(0) try while i _size do (let c, let len) = utf32(i.isize())? if chars.contains(c) then // If we find a delimiter, add the current string to the array. occur = occur + 1 if (n 0) and (occur = n) then break end result.push(cur = recover String end) else // Add bytes to the current string. var j = U8(0) while j len do cur.push(_ptr._apply(i + j.usize())) j = j + 1 end end i = i + len.usize() end end // Add all remaining bytes to the current string. while i _size do cur.push(_ptr._apply(i)) i = i + 1 end result.push(consume cur) end consume result fun ref strip(s: String box = \\t\\v\\f\\r\\n ) = Remove all leading and trailing characters from the string that are in s. this . lstrip(s) . rstrip(s) fun ref rstrip(s: String box = \\t\\v\\f\\r\\n ) = Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. if _size 0 then let chars = Array[U32](s.size()) var i = _size - 1 var truncate_at = _size for rune in s.runes() do chars.push(rune) end repeat try match utf32(i.isize())? | (0xFFFD, 1) = None | (let c: U32, _) = if not chars.contains(c) then break end truncate_at = i end else break end until (i = i - 1) == 0 end truncate(truncate_at) end fun ref lstrip(s: String box = \\t\\v\\f\\r\\n ) = Remove all leading characters within the string that are in s. By default, leading whitespace is removed. if _size 0 then let chars = Array[U32](s.size()) var i = USize(0) for rune in s.runes() do chars.push(rune) end while i _size do try (let c, let len) = utf32(i.isize())? if not chars.contains(c) then break end i = i + len.usize() else break end end if i 0 then delete(0, i) end end fun iso _append(s: String box): String iso^ = let len = _size + s._size reserve(len) if s.is_null_terminated() then s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size) else s._copy_to(_ptr._unsafe(), s._size, 0, _size) end _size = len consume this fun add(that: String box): String = Return a string that is a concatenation of this and that. let len = _size + that._size let s = recover String(len) end (consume s)._append(this)._append(that) fun join(data: Iterator[Stringable]): String iso^ = Return a string that is a concatenation of the strings in data, using this as a separator. var buf = recover String end var first = true for v in data do if first then first = false else buf = (consume buf)._append(this) end buf.append(v.string()) end buf fun compare(that: String box): Compare = Lexically compare two strings. compare_sub(that, _size.max(that._size)) fun compare_sub( that: String box, n: USize, offset: ISize = 0, that_offset: ISize = 0, ignore_case: Bool = false) : Compare = Lexically compare at most `n` bytes of the substring of `this` starting at `offset` with the substring of `that` starting at `that_offset`. The comparison is case sensitive unless `ignore_case` is `true`. If the substring of `this` is a proper prefix of the substring of `that`, then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of `this`, then `this` is `Greater` than `that`. Both `offset` and `that_offset` can be negative, in which case the offsets are computed from the end of the string. If `n + offset` is greater than the length of `this`, or `n + that_offset` is greater than the length of `that`, then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. var j: USize = offset_to_index(offset) var k: USize = that.offset_to_index(that_offset) var i = n.min((_size - j).max(that._size - k)) while i 0 do // this and that are equal up to this point if j = _size then // this is shorter return Less elseif k = that._size then // that is shorter return Greater end let c1 = _ptr._apply(j) let c2 = that._ptr._apply(k) if not ((c1 == c2) or (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and ((c1 or 0x20) = 'a') and ((c1 or 0x20) = 'z'))) then // this and that differ here return if c1.i32() c2.i32() then Greater else Less end end j = j + 1 k = k + 1 i = i - 1 end Equal fun eq(that: String box): Bool = Returns true if the two strings have the same contents. if _size == that._size then @memcmp(_ptr, that._ptr, _size) == 0 else false end fun lt(that: String box): Bool = Returns true if this is lexically less than that. Needs to be made UTF-8 safe. let len = _size.min(that._size) var i: USize = 0 while i len do if _ptr._apply(i) that._ptr._apply(i) then return true elseif _ptr._apply(i) that._ptr._apply(i) then return false end i = i + 1 end _size that._size fun le(that: String box): Bool = Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. let len = _size.min(that._size) var i: USize = 0 while i len do if _ptr._apply(i) that._ptr._apply(i) then return true elseif _ptr._apply(i) that._ptr._apply(i) then return false end i = i + 1 end _size = that._size fun offset_to_index(i: ISize): USize = if i 0 then i.usize() + _size else i.usize() end fun bool(): Bool ? = match lower() | true = true | false = false else error end fun i8(base: U8 = 0): I8 ? = _to_int[I8](base)? fun i16(base: U8 = 0): I16 ? = _to_int[I16](base)? fun i32(base: U8 = 0): I32 ? = _to_int[I32](base)? fun i64(base: U8 = 0): I64 ? = _to_int[I64](base)? fun i128(base: U8 = 0): I128 ? = _to_int[I128](base)? fun ilong(base: U8 = 0): ILong ? = _to_int[ILong](base)? fun isize(base: U8 = 0): ISize ? = _to_int[ISize](base)? fun u8(base: U8 = 0): U8 ? = _to_int[U8](base)? fun u16(base: U8 = 0): U16 ? = _to_int[U16](base)? fun u32(base: U8 = 0): U32 ? = _to_int[U32](base)? fun u64(base: U8 = 0): U64 ? = _to_int[U64](base)? fun u128(base: U8 = 0): U128 ? = _to_int[U128](base)? fun ulong(base: U8 = 0): ULong ? = _to_int[ULong](base)? fun usize(base: U8 = 0): USize ? = _to_int[USize](base)? fun _to_int[A: ((Signed | Unsigned) Integer[A] val)](base: U8): A ? = Convert the *whole* string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. (let v, let d) = read_int[A](0, base)? // Check the whole string is used if (d == 0) or (d.usize() != _size) then error end v fun read_int[A: ((Signed | Unsigned) Integer[A] val)]( offset: ISize = 0, base: U8 = 0) : (A, USize /* chars used */) ? = Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. let start_index = offset_to_index(offset) var index = start_index var value: A = 0 var had_digit = false // Check for leading minus let minus = (index _size) and (_ptr._apply(index) == '-') if minus then if A(-1) A(0) then // We're reading an unsigned type, negative not allowed, int not found return (0, 0) end index = index + 1 end (let base', let base_chars) = _read_int_base[A](base, index) index = index + base_chars // Process characters while index _size do let char: A = A(0).from[U8](_ptr._apply(index)) if char == '_' then index = index + 1 continue end let digit = if (char = '0') and (char = '9') then char - '0' elseif (char = 'A') and (char = 'Z') then (char - 'A') + 10 elseif (char = 'a') and (char = 'z') then (char - 'a') + 10 else break end if digit = base' then break end let new_value: A = if minus then (value * base') - digit else (value * base') + digit end if (new_value / base') != value then // Overflow error end value = new_value had_digit = true index = index + 1 end // Check result if not had_digit then // No integer found return (0, 0) end // Success (value, index - start_index) fun _read_int_base[A: ((Signed | Unsigned) Integer[A] val)]( base: U8, index: USize) : (A, USize /* chars used */) = Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. if base 0 then return (A(0).from[U8](base), 0) end // Determine base from prefix if (index + 2) = _size then // Not enough characters, must be decimal return (10, 0) end let lead_char = _ptr._apply(index) let base_char = _ptr._apply(index + 1) and not 0x20 if (lead_char == '0') and (base_char == 'B') then return (2, 2) end if (lead_char == '0') and (base_char == 'X') then return (16, 2) end // No base specified, default to decimal (10, 0) fun f32(offset: ISize = 0): F32 = let index = offset_to_index(offset) if index _size then @strtof(_ptr._offset(index), 0) else F32(0) end fun f64(offset: ISize = 0): F64 = let index = offset_to_index(offset) if index _size then @strtod(_ptr._offset(index), 0) else F64(0) end fun hash(): USize = @ponyint_hash_block[USize](_ptr, _size) fun hash64(): U64 = @ponyint_hash_block64[U64](_ptr, _size) fun string(): String iso^ = clone() fun values(): StringBytes^ = Return an iterator over the bytes in the string. StringBytes(this) fun runes(): StringRunes^ = Return an iterator over the codepoints in the string. StringRunes(this) fun ref _set(i: USize, value: U8): U8 = Unsafe update, used internally. _ptr._update(i, value) class StringBytes is Iterator[U8] let _string: String box var _i: USize new create(string: String box) = _string = string _i = 0 fun has_next(): Bool = _i _string.size() fun ref next(): U8 ? = _string(_i = _i + 1)? class StringRunes is Iterator[U32] let _string: String box var _i: USize new create(string: String box) = _string = string _i = 0 fun has_next(): Bool = _i _string.size() fun ref next(): U32 ? = (let rune, let len) = _string.utf32(_i.isize())? _i = _i + len.usize() rune primitive _UTF32Encoder fun encode(value: U32): (USize, U8, U8, U8, U8) = Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. if value 0x80 then (1, value.u8(), 0, 0, 0) elseif value 0x800 then ( 2, ((value 6) or 0xC0).u8(), ((value and 0x3F) or 0x80).u8(), 0, 0 ) elseif value 0xD800 then ( 3, ((value 12) or 0xE0).u8(), (((value 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value 0xE000 then // UTF-16 surrogate pairs are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) elseif value 0x10000 then ( 3, ((value 12) or 0xE0).u8(), (((value 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value 0x110000 then ( 4, ((value 18) or 0xF0).u8(), (((value 12) and 0x3F) or 0x80).u8(), (((value 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8() ) else // Code points beyond 0x10FFFF are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) end","title":"string.pony"},{"location":"src/builtin/stringable/","text":"interface box Stringable Things that can be turned into a String. fun string(): String iso^ Generate a string representation of this object.","title":"stringable.pony"},{"location":"src/builtin/unsigned/","text":"primitive U8 is _UnsignedInteger[U8] new create(value: U8) = value new from[B: (Number Real[B] val)](a: B) = a.u8() new min_value() = 0 new max_value() = 0xFF fun next_pow2(): U8 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U8 = this fun bit_reverse(): U8 = @ llvm.bitreverse.i8 [U8](this) fun bswap(): U8 = this fun popcount(): U8 = @ llvm.ctpop.i8 [U8](this) fun clz(): U8 = @ llvm.ctlz.i8 [U8](this, false) fun ctz(): U8 = @ llvm.cttz.i8 [U8](this, false) fun clz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i8 [U8](this, true) fun ctz_unsafe(): U8 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i8 [U8](this, true) fun bitwidth(): U8 = 8 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U8): U8 = if this y then this else y end fun max(y: U8): U8 = if this y then this else y end fun addc(y: U8): (U8, Bool) = @ llvm.uadd.with.overflow.i8 [(U8, Bool)](this, y) fun subc(y: U8): (U8, Bool) = @ llvm.usub.with.overflow.i8 [(U8, Bool)](this, y) fun mulc(y: U8): (U8, Bool) = @ llvm.umul.with.overflow.i8 [(U8, Bool)](this, y) fun divc(y: U8): (U8, Bool) = _UnsignedPartialArithmetic.div_checked[U8](this, y) fun remc(y: U8): (U8, Bool) = _UnsignedPartialArithmetic.rem_checked[U8](this, y) fun add_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.add_partial[U8](this, y)? fun sub_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.sub_partial[U8](this, y)? fun mul_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.mul_partial[U8](this, y)? fun div_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.div_partial[U8](this, y)? fun rem_partial(y: U8): U8 ? = _UnsignedPartialArithmetic.rem_partial[U8](this, y)? fun divrem_partial(y: U8): (U8, U8) ? = _UnsignedPartialArithmetic.divrem_partial[U8](this, y)? primitive U16 is _UnsignedInteger[U16] new create(value: U16) = value new from[A: (Number Real[A] val)](a: A) = a.u16() new min_value() = 0 new max_value() = 0xFFFF fun next_pow2(): U16 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U16 = this fun bit_reverse(): U16 = @ llvm.bitreverse.i16 [U16](this) fun bswap(): U16 = @ llvm.bswap.i16 [U16](this) fun popcount(): U16 = @ llvm.ctpop.i16 [U16](this) fun clz(): U16 = @ llvm.ctlz.i16 [U16](this, false) fun ctz(): U16 = @ llvm.cttz.i16 [U16](this, false) fun clz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i16 [U16](this, true) fun ctz_unsafe(): U16 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i16 [U16](this, true) fun bitwidth(): U16 = 16 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U16): U16 = if this y then this else y end fun max(y: U16): U16 = if this y then this else y end fun addc(y: U16): (U16, Bool) = @ llvm.uadd.with.overflow.i16 [(U16, Bool)](this, y) fun subc(y: U16): (U16, Bool) = @ llvm.usub.with.overflow.i16 [(U16, Bool)](this, y) fun mulc(y: U16): (U16, Bool) = @ llvm.umul.with.overflow.i16 [(U16, Bool)](this, y) fun divc(y: U16): (U16, Bool) = _UnsignedPartialArithmetic.div_checked[U16](this, y) fun remc(y: U16): (U16, Bool) = _UnsignedPartialArithmetic.rem_checked[U16](this, y) fun add_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.add_partial[U16](this, y)? fun sub_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.sub_partial[U16](this, y)? fun mul_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.mul_partial[U16](this, y)? fun div_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.div_partial[U16](this, y)? fun rem_partial(y: U16): U16 ? = _UnsignedPartialArithmetic.rem_partial[U16](this, y)? fun divrem_partial(y: U16): (U16, U16) ? = _UnsignedPartialArithmetic.divrem_partial[U16](this, y)? primitive U32 is _UnsignedInteger[U32] new create(value: U32) = value new from[A: (Number Real[A] val)](a: A) = a.u32() new min_value() = 0 new max_value() = 0xFFFF_FFFF fun next_pow2(): U32 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U32 = this fun bit_reverse(): U32 = @ llvm.bitreverse.i32 [U32](this) fun bswap(): U32 = @ llvm.bswap.i32 [U32](this) fun popcount(): U32 = @ llvm.ctpop.i32 [U32](this) fun clz(): U32 = @ llvm.ctlz.i32 [U32](this, false) fun ctz(): U32 = @ llvm.cttz.i32 [U32](this, false) fun clz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i32 [U32](this, true) fun ctz_unsafe(): U32 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i32 [U32](this, true) fun bitwidth(): U32 = 32 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U32): U32 = if this y then this else y end fun max(y: U32): U32 = if this y then this else y end fun addc(y: U32): (U32, Bool) = @ llvm.uadd.with.overflow.i32 [(U32, Bool)](this, y) fun subc(y: U32): (U32, Bool) = @ llvm.usub.with.overflow.i32 [(U32, Bool)](this, y) fun mulc(y: U32): (U32, Bool) = @ llvm.umul.with.overflow.i32 [(U32, Bool)](this, y) fun divc(y: U32): (U32, Bool) = _UnsignedPartialArithmetic.div_checked[U32](this, y) fun remc(y: U32): (U32, Bool) = _UnsignedPartialArithmetic.rem_checked[U32](this, y) fun add_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.add_partial[U32](this, y)? fun sub_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.sub_partial[U32](this, y)? fun mul_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.mul_partial[U32](this, y)? fun div_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.div_partial[U32](this, y)? fun rem_partial(y: U32): U32 ? = _UnsignedPartialArithmetic.rem_partial[U32](this, y)? fun divrem_partial(y: U32): (U32, U32) ? = _UnsignedPartialArithmetic.divrem_partial[U32](this, y)? primitive U64 is _UnsignedInteger[U64] new create(value: U64) = value new from[A: (Number Real[A] val)](a: A) = a.u64() new min_value() = 0 new max_value() = 0xFFFF_FFFF_FFFF_FFFF fun next_pow2(): U64 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U64 = this fun bit_reverse(): U64 = @ llvm.bitreverse.i64 [U64](this) fun bswap(): U64 = @ llvm.bswap.i64 [U64](this) fun popcount(): U64 = @ llvm.ctpop.i64 [U64](this) fun clz(): U64 = @ llvm.ctlz.i64 [U64](this, false) fun ctz(): U64 = @ llvm.cttz.i64 [U64](this, false) fun clz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i64 [U64](this, true) fun ctz_unsafe(): U64 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i64 [U64](this, true) fun bitwidth(): U64 = 64 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U64): U64 = if this y then this else y end fun max(y: U64): U64 = if this y then this else y end fun hash(): USize = ifdef ilp32 then ((this 32).u32() xor this.u32()).hash() else usize().hash() end fun addc(y: U64): (U64, Bool) = @ llvm.uadd.with.overflow.i64 [(U64, Bool)](this, y) fun subc(y: U64): (U64, Bool) = @ llvm.usub.with.overflow.i64 [(U64, Bool)](this, y) fun mulc(y: U64): (U64, Bool) = @ llvm.umul.with.overflow.i64 [(U64, Bool)](this, y) fun divc(y: U64): (U64, Bool) = _UnsignedPartialArithmetic.div_checked[U64](this, y) fun remc(y: U64): (U64, Bool) = _UnsignedPartialArithmetic.rem_checked[U64](this, y) fun add_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.add_partial[U64](this, y)? fun sub_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.sub_partial[U64](this, y)? fun mul_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.mul_partial[U64](this, y)? fun div_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.div_partial[U64](this, y)? fun rem_partial(y: U64): U64 ? = _UnsignedPartialArithmetic.rem_partial[U64](this, y)? fun divrem_partial(y: U64): (U64, U64) ? = _UnsignedPartialArithmetic.divrem_partial[U64](this, y)? primitive ULong is _UnsignedInteger[ULong] new create(value: ULong) = value new from[A: (Number Real[A] val)](a: A) = a.ulong() new min_value() = 0 new max_value() = ifdef ilp32 or llp64 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): ULong = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): ULong = this fun bit_reverse(): ULong = ifdef ilp32 or llp64 then @ llvm.bitreverse.i32 [ULong](this) else @ llvm.bitreverse.i64 [ULong](this) end fun bswap(): ULong = ifdef ilp32 or llp64 then @ llvm.bswap.i32 [ULong](this) else @ llvm.bswap.i64 [ULong](this) end fun popcount(): ULong = ifdef ilp32 or llp64 then @ llvm.ctpop.i32 [ULong](this) else @ llvm.ctpop.i64 [ULong](this) end fun clz(): ULong = ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, false) else @ llvm.ctlz.i64 [ULong](this, false) end fun ctz(): ULong = ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, false) end fun clz_unsafe(): ULong = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 or llp64 then @ llvm.ctlz.i32 [ULong](this, true) else @ llvm.ctlz.i64 [ULong](this, true) end fun ctz_unsafe(): ULong = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 or llp64 then @ llvm.cttz.i32 [ULong](this, false) else @ llvm.cttz.i64 [ULong](this, true) end fun bitwidth(): ULong = ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: ULong): ULong = if this y then this else y end fun max(y: ULong): ULong = if this y then this else y end fun hash(): USize = ifdef ilp32 or llp64 then u32().hash() else u64().hash() end fun addc(y: ULong): (ULong, Bool) = ifdef ilp32 or llp64 then @ llvm.uadd.with.overflow.i32 [(ULong, Bool)](this, y) else @ llvm.uadd.with.overflow.i64 [(ULong, Bool)](this, y) end fun subc(y: ULong): (ULong, Bool) = ifdef ilp32 or llp64 then @ llvm.usub.with.overflow.i32 [(ULong, Bool)](this, y) else @ llvm.usub.with.overflow.i64 [(ULong, Bool)](this, y) end fun mulc(y: ULong): (ULong, Bool) = ifdef ilp32 or llp64 then @ llvm.umul.with.overflow.i32 [(ULong, Bool)](this, y) else @ llvm.umul.with.overflow.i64 [(ULong, Bool)](this, y) end fun divc(y: ULong): (ULong, Bool) = _UnsignedPartialArithmetic.div_checked[ULong](this, y) fun remc(y: ULong): (ULong, Bool) = _UnsignedPartialArithmetic.rem_checked[ULong](this, y) fun add_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.add_partial[ULong](this, y)? fun sub_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.sub_partial[ULong](this, y)? fun mul_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.mul_partial[ULong](this, y)? fun div_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.div_partial[ULong](this, y)? fun rem_partial(y: ULong): ULong ? = _UnsignedPartialArithmetic.rem_partial[ULong](this, y)? fun divrem_partial(y: ULong): (ULong, ULong) ? = _UnsignedPartialArithmetic.divrem_partial[ULong](this, y)? primitive USize is _UnsignedInteger[USize] new create(value: USize) = value new from[A: (Number Real[A] val)](a: A) = a.usize() new min_value() = 0 new max_value() = ifdef ilp32 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): USize = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): USize = this fun bit_reverse(): USize = ifdef ilp32 then @ llvm.bitreverse.i32 [USize](this) else @ llvm.bitreverse.i64 [USize](this) end fun bswap(): USize = ifdef ilp32 then @ llvm.bswap.i32 [USize](this) else @ llvm.bswap.i64 [USize](this) end fun popcount(): USize = ifdef ilp32 then @ llvm.ctpop.i32 [USize](this) else @ llvm.ctpop.i64 [USize](this) end fun clz(): USize = ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, false) else @ llvm.ctlz.i64 [USize](this, false) end fun ctz(): USize = ifdef ilp32 then @ llvm.cttz.i32 [USize](this, false) else @ llvm.cttz.i64 [USize](this, false) end fun clz_unsafe(): USize = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 then @ llvm.ctlz.i32 [USize](this, true) else @ llvm.ctlz.i64 [USize](this, true) end fun ctz_unsafe(): USize = Unsafe operation. If this is 0, the result is undefined. ifdef ilp32 then @ llvm.cttz.i32 [USize](this, true) else @ llvm.cttz.i64 [USize](this, true) end fun bitwidth(): USize = ifdef ilp32 then 32 else 64 end fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: USize): USize = if this y then this else y end fun max(y: USize): USize = if this y then this else y end fun addc(y: USize): (USize, Bool) = ifdef ilp32 then @ llvm.uadd.with.overflow.i32 [(USize, Bool)](this, y) else @ llvm.uadd.with.overflow.i64 [(USize, Bool)](this, y) end fun subc(y: USize): (USize, Bool) = ifdef ilp32 then @ llvm.usub.with.overflow.i32 [(USize, Bool)](this, y) else @ llvm.usub.with.overflow.i64 [(USize, Bool)](this, y) end fun mulc(y: USize): (USize, Bool) = ifdef ilp32 then @ llvm.umul.with.overflow.i32 [(USize, Bool)](this, y) else @ llvm.umul.with.overflow.i64 [(USize, Bool)](this, y) end fun divc(y: USize): (USize, Bool) = _UnsignedPartialArithmetic.div_checked[USize](this, y) fun remc(y: USize): (USize, Bool) = _UnsignedPartialArithmetic.rem_checked[USize](this, y) fun add_partial(y: USize): USize ? = _UnsignedPartialArithmetic.add_partial[USize](this, y)? fun sub_partial(y: USize): USize ? = _UnsignedPartialArithmetic.sub_partial[USize](this, y)? fun mul_partial(y: USize): USize ? = _UnsignedPartialArithmetic.mul_partial[USize](this, y)? fun div_partial(y: USize): USize ? = _UnsignedPartialArithmetic.div_partial[USize](this, y)? fun rem_partial(y: USize): USize ? = _UnsignedPartialArithmetic.rem_partial[USize](this, y)? fun divrem_partial(y: USize): (USize, USize) ? = _UnsignedPartialArithmetic.divrem_partial[USize](this, y)? primitive U128 is _UnsignedInteger[U128] new create(value: U128) = value new from[A: (Number Real[A] val)](a: A) = a.u128() new min_value() = 0 new max_value() = 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun next_pow2(): U128 = let x = (this - 1).clz() 1 (if x == 0 then 0 else bitwidth() - x end) fun abs(): U128 = this fun bit_reverse(): U128 = @ llvm.bitreverse.i128 [U128](this) fun bswap(): U128 = @ llvm.bswap.i128 [U128](this) fun popcount(): U128 = @ llvm.ctpop.i128 [U128](this) fun clz(): U128 = @ llvm.ctlz.i128 [U128](this, false) fun ctz(): U128 = @ llvm.cttz.i128 [U128](this, false) fun clz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.ctlz.i128 [U128](this, true) fun ctz_unsafe(): U128 = Unsafe operation. If this is 0, the result is undefined. @ llvm.cttz.i128 [U128](this, true) fun bitwidth(): U128 = 128 fun bytewidth(): USize = bitwidth().usize() / 8 fun min(y: U128): U128 = if this y then this else y end fun max(y: U128): U128 = if this y then this else y end fun hash(): USize = ifdef ilp32 then ((this 96).u32() xor (this 64).u32() xor (this 32).u32() xor this.u32()).hash() else ((this 64).u64() xor this.u64()).hash() end fun hash64(): U64 = ((this 64).u64() xor this.u64()).hash64() fun string(): String iso^ = _ToString._u128(this, false) fun mul(y: U128): U128 = ifdef native128 then this * y else let x_hi = (this 64).u64() let x_lo = this.u64() let y_hi = (y 64).u64() let y_lo = y.u64() let mask = U64(0x00000000FFFFFFFF) var lo = (x_lo and mask) * (y_lo and mask) var t = lo 32 lo = lo and mask t = t + ((x_lo 32) * (y_lo and mask)) lo = lo + ((t and mask) 32) var hi = t 32 t = lo 32 lo = lo and mask t = t + ((y_lo 32) * (x_lo and mask)) lo = lo + ((t and mask) 32) hi = hi + (t 32) hi = hi + ((x_lo 32) * (y_lo 32)) hi = hi + (x_hi * y_lo) + (x_lo * y_hi) (hi.u128() 64) or lo.u128() end fun divrem(y: U128): (U128, U128) = ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var quot: U128 = 0 var qbit: U128 = 1 var num = this var den = y while den.i128() = 0 do den = den 1 qbit = qbit 1 end while qbit != 0 do if den = num then num = num - den quot = quot + qbit end den = den 1 qbit = qbit 1 end (quot, num) end fun div(y: U128): U128 = ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: U128): U128 = ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: U128): U128 = Unsafe operation. If the operation overflows, the result is undefined. ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: U128): (U128, U128) = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: U128): U128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: U128): U128 = Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. ifdef native128 then this %~ y else this % y end fun f32(): F32 = let v = f64() if v F32.max_value().f64() then F32._inf(false) else v.f32() end fun f64(): F64 = if this == 0 then return 0 end var a = this let sd = bitwidth() - clz() var e = (sd - 1).u64() if sd 53 then match sd | 54 = a = a 1 | 55 = None else a = (a (sd - 55)) or if (a and (-1 ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end end if (a and 4) != 0 then a = a or 1 end a = (a + 1) 2 if (a and (1 53)) != 0 then a = a 1 e = e + 1 end else a = a (53 - sd) end F64.from_bits(((e + 1023) 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF)) fun f32_unsafe(): F32 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 = Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. f64() fun addc(y: U128): (U128, Bool) = ifdef native128 then @ llvm.uadd.with.overflow.i128 [(U128, Bool)](this, y) else let overflow = this (max_value() - y) (this + y, overflow) end fun subc(y: U128): (U128, Bool) = ifdef native128 then @ llvm.usub.with.overflow.i128 [(U128, Bool)](this, y) else let overflow = this y (this - y, overflow) end fun mulc(y: U128): (U128, Bool) = ifdef native128 then @ llvm.umul.with.overflow.i128 [(U128, Bool)](this, y) else let result = this * y let overflow = (this != 0) and ((result / this) != y) (result, overflow) end fun divc(y: U128): (U128, Bool) = _UnsignedPartialArithmetic.div_checked[U128](this, y) fun remc(y: U128): (U128, Bool) = _UnsignedPartialArithmetic.rem_checked[U128](this, y) fun add_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.add_partial[U128](this, y)? fun sub_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.sub_partial[U128](this, y)? fun mul_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.mul_partial[U128](this, y)? fun div_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.div_partial[U128](this, y)? fun rem_partial(y: U128): U128 ? = _UnsignedPartialArithmetic.rem_partial[U128](this, y)? fun divrem_partial(y: U128): (U128, U128) ? = _UnsignedPartialArithmetic.divrem_partial[U128](this, y)? type Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)","title":"unsigned.pony"},{"location":"src/collections/flag/","text":"interface val Flag[A: (Unsigned Integer[A] val)] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. fun value(): A class Flags[A: Flag[B] val, B: (Unsigned Integer[B] val) = U64] is Comparable[Flags[A, B] box] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 = 1 primitive AVX fun value(): U64 = 2 primitive RDTSCP fun value(): U64 = 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. var _value: B = 0 fun value(): B = Returns the bit encoding of the set flags. _value fun apply(flag: A): Bool = Returns true if the flag is set. (_value and flag.value()) 0 fun ref all() = Sets all bits, including undefined flags. _value = -1 fun ref clear() = Unsets all flags. _value = 0 fun ref set(flag: A) = Sets the flag. _value = _value or flag.value() fun ref unset(flag: A) = Unsets the flag. _value = _value and not flag.value() fun ref flip(flag: A) = Sets the flag if it is unset, unsets the flag if it is set. _value = _value xor flag.value() fun ref union(that: Flags[A, B] box) = The union of this and that. _value = this._value or that._value fun ref intersect(that: Flags[A, B] box) = The intersection of this and that. _value = this._value and that._value fun ref difference(that: Flags[A, B] box) = The symmetric difference of this and that. _value = this._value xor that._value fun ref remove(that: Flags[A, B] box) = Unset flags that are set in that. _value = this._value xor that._value fun add(flag: A): Flags[A, B] iso^ = This with the flag set. let f = recover Flags[A, B] end f._value = this._value or flag.value() f fun sub(flag: A): Flags[A, B] iso^ = This with the flag unset. let f = recover Flags[A, B] end f._value = this._value and not flag.value() f fun op_or(that: Flags[A, B] box): Flags[A, B] iso^ = The union of this and that. let f = recover Flags[A, B] end f._value = this._value or that._value f fun op_and(that: Flags[A, B] box): Flags[A, B] iso^ = The intersection of this and that. let f = recover Flags[A, B] end f._value = this._value and that._value f fun op_xor(that: Flags[A, B] box): Flags[A, B] iso^ = The symmetric difference of this and that. let f = recover Flags[A, B] end f._value = this._value xor that._value f fun without(that: Flags[A, B] box): Flags[A, B] iso^ = The flags in this that are not in that. let f = recover Flags[A, B] end f._value = this._value and not that._value f fun clone(): Flags[A, B] iso^ = Create a clone. let f = recover Flags[A, B] end f._value = this._value f fun eq(that: Flags[A, B] box): Bool = Returns true if this has the same flags set as that. _value == that._value fun lt(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. (_value != that._value) and ((_value and not that._value) == 0) fun le(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. ((_value and not that._value) == 0) fun gt(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. (_value != that._value) and ((that._value and not _value) == 0) fun ge(that: Flags[A, B] box): Bool = Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. ((that._value and not _value) == 0)","title":"flag.pony"},{"location":"src/collections/hashable/","text":"interface Hashable Anything with a hash method is hashable. fun hash(): USize interface Hashable64 A version of Hashable that returns 64-bit hashes on every platform. fun hash64(): U64 interface val HashFunction[A] A pluggable hash function. new val create() Data structures create instances internally. Use a primitive if possible. fun hash(x: box- A!): USize Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun eq(x: box- A!, y: box- A!): Bool Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. interface val HashFunction64[A] A pluggable hash function with 64-bit hashes. new val create() Data structures create instances internally. Use a primitive if possible. fun hash64(x: box- A!): U64 Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun eq(x: box- A!, y: box- A!): Bool Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. primitive HashEq[A: (Hashable #read Equatable[A] #read)] is HashFunction[A] fun hash(x: box- A): USize = Use the hash function from the type parameter. x.hash() fun eq(x: box- A, y: box- A): Bool = Use the structural equality function from the type parameter. x == y primitive HashEq64[A: (Hashable64 #read Equatable[A] #read)] is HashFunction64[A] fun hash64(x: box- A): U64 = Use the hash function from the type parameter. x.hash64() fun eq(x: box- A, y: box- A): Bool = Use the structural equality function from the type parameter. x == y primitive HashIs[A] is (HashFunction[A] HashFunction64[A]) fun hash(x: box- A!): USize = Hash the identity rather than the contents. (digestof x).hash() fun hash64(x: box- A!): U64 = Hash the identity rather than the contents. (digestof x).hash64() fun eq(x: box- A!, y: box- A!): Bool = Determine equality by identity rather than structurally. x is y primitive HashByteSeq is (HashFunction[ByteSeq box] HashFunction64[ByteSeq box]) Hash and equality functions for arbitrary ByteSeq. fun hash(x: ByteSeq box): USize = @ponyint_hash_block[USize](x.cpointer(), x.size()) fun hash64(x: ByteSeq box): U64 = @ponyint_hash_block64[U64](x.cpointer(), x.size()) fun eq(x: ByteSeq box, y: ByteSeq box): Bool = if x.size() == y.size() then @memcmp[I32](x.cpointer(), y.cpointer(), x.size()) == 0 else false end","title":"hashable.pony"},{"location":"src/collections/list/","text":"class List[A] is Seq[A] A doubly linked list. var _head: (ListNode[A] | None) = None var _tail: (ListNode[A] | None) = None var _size: USize = 0 new create(len: USize = 0) = Do nothing, but be compatible with Seq. None new unit(a: A) = Builds a new list from an element. push(consume a) new from(seq: Array[A^]) = Builds a new list from the sequence passed in. for value in seq.values() do push(consume value) end fun ref reserve(len: USize) = Do nothing, but be compatible with Seq. None fun size(): USize = Returns the number of items in the list. _size fun apply(i: USize = 0): this- A ? = Get the i-th element, raising an error if the index is out of bounds. index(i)?()? fun ref update(i: USize, value: A): A^ ? = Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. index(i)?()? = consume value fun index(i: USize): this- ListNode[A] ? = Gets the i-th node, raising an error if the index is out of bounds. if i = _size then error end var node = _head as this- ListNode[A] var j = USize(0) while j i do node = node.next() as this- ListNode[A] j = j + 1 end node fun ref remove(i: USize): ListNode[A] ? = Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. index(i)? . remove() fun ref clear() = Empties the list. _head = None _tail = None _size = 0 fun head(): this- ListNode[A] ? = Get the head of the list. _head as this- ListNode[A] fun tail(): this- ListNode[A] ? = Get the tail of the list. _tail as this- ListNode[A] fun ref prepend_node(node: ListNode[A]) = Adds a node to the head of the list. match _head | let head': ListNode[A] = head'.prepend(node) else _set_both(node) end fun ref append_node(node: ListNode[A]) = Adds a node to the tail of the list. match _tail | let tail': ListNode[A] = tail'.append(node) else _set_both(node) end fun ref append_list(that: List[A]) = Remove all nodes from that and append them to this. if this isnt that then while that._size 0 do try append_node(that.head()?) end end end fun ref prepend_list(that: List[A]) = Remove all nodes from that and prepend them to this. if this isnt that then while that._size 0 do try prepend_node(that.tail()?) end end end fun ref push(a: A) = Adds a value to the tail of the list. append_node(ListNode[A](consume a)) fun ref pop(): A^ ? = Removes a value from the tail of the list. tail()? . remove().pop()? fun ref unshift(a: A) = Adds a value to the head of the list. prepend_node(ListNode[A](consume a)) fun ref shift(): A^ ? = Removes a value from the head of the list. head()? . remove().pop()? fun ref append( seq: (ReadSeq[A] ReadElement[A^]), offset: USize = 0, len: USize = -1) = Append len elements from a sequence, starting from the given offset. if offset = seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) let cap = copy_len + offset var i = offset try while i cap do push(seq(i)?) i = i + 1 end end fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) = Add len iterated elements to the end of the list, starting from the given offset. try for i in Range(0, offset) do if iter.has_next() then iter.next()? else return end end for i in Range(0, len) do if iter.has_next() then push(iter.next()?) else return end end end fun ref truncate(len: USize) = Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. try while _size len do pop()? end end fun clone(): List[this- A!]^ = Clone the list. let out = List[this- A!] for v in values() do out.push(v) end out fun map[B](f: {(this- A!): B^} box): List[B]^ = Builds a new list by applying a function to every member of the list. try _map[B](head()?, f, List[B]) else List[B] end fun _map[B]( ln: this- ListNode[A], f: {(this- A!): B^} box, acc: List[B]) : List[B]^ = Private helper for map, recursively working with ListNodes. try acc.push(f(ln()?)) end try _map[B](ln.next() as this- ListNode[A], f, acc) else acc end fun flat_map[B](f: {(this- A!): List[B]} box): List[B]^ = Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. try _flat_map[B](head()?, f, List[B]) else List[B] end fun _flat_map[B]( ln: this- ListNode[A], f: {(this- A!): List[B]} box, acc: List[B]): List[B]^ = Private helper for flat_map, recursively working with ListNodes. try acc.append_list(f(ln()?)) end try _flat_map[B](ln.next() as this- ListNode[A], f, acc) else acc end fun filter(f: {(this- A!): Bool} box): List[this- A!]^ = Builds a new list with those elements that satisfy a provided predicate. try _filter(head()?, f, List[this- A!]) else List[this- A!] end fun _filter( ln: this- ListNode[A], f: {(this- A!): Bool} box, acc: List[this- A!]): List[this- A!] = Private helper for filter, recursively working with ListNodes. try let cur = ln()? if f(cur) then acc.push(cur) end end try _filter(ln.next() as this- ListNode[A], f, acc) else acc end fun fold[B](f: {(B!, this- A!): B^} box, acc: B): B = Folds the elements of the list using the supplied function. let h = try head()? else return acc end _fold[B](h, f, consume acc) fun _fold[B]( ln: this- ListNode[A], f: {(B!, this- A!): B^} box, acc: B) : B = Private helper for fold, recursively working with ListNodes. let nextAcc: B = try f(acc, ln()?) else consume acc end let h = try ln.next() as this- ListNode[A] else return nextAcc end _fold[B](h, f, consume nextAcc) fun every(f: {(this- A!): Bool} box): Bool = Returns true if every element satisfies the provided predicate, false otherwise. try _every(head()?, f) else true end fun _every(ln: this- ListNode[A], f: {(this- A!): Bool} box): Bool = Private helper for every, recursively working with ListNodes. try if not(f(ln()?)) then false else _every(ln.next() as this- ListNode[A], f) end else true end fun exists(f: {(this- A!): Bool} box): Bool = Returns true if at least one element satisfies the provided predicate, false otherwise. try _exists(head()?, f) else false end fun _exists(ln: this- ListNode[A], f: {(this- A!): Bool} box): Bool = Private helper for exists, recursively working with ListNodes. try if f(ln()?) then true else _exists(ln.next() as this- ListNode[A], f) end else false end fun partition( f: {(this- A!): Bool} box) : (List[this- A!]^, List[this- A!]^) = Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. let l1 = List[this- A!] let l2 = List[this- A!] for item in values() do if f(item) then l1.push(item) else l2.push(item) end end (l1, l2) fun drop(n: USize): List[this- A!]^ = Builds a list by dropping the first n elements. let l = List[this- A!] if size() n then try var node = index(n)? for i in Range(n, size()) do l.push(node()?) node = node.next() as this- ListNode[A] end end end l fun take(n: USize): List[this- A!] = Builds a list of the first n elements. let l = List[this- A!] if size() 0 then try var node = head()? for i in Range(0, n.min(size())) do l.push(node()?) node = node.next() as this- ListNode[A] end end end l fun take_while(f: {(this- A!): Bool} box): List[this- A!]^ = Builds a list of elements satisfying the provided predicate until one does not. let l = List[this- A!] if size() 0 then try var node = head()? for i in Range(0, size()) do let item = node()? if f(item) then l.push(item) else return l end node = node.next() as this- ListNode[A] end end end l fun reverse(): List[this- A!]^ = Builds a new list by reversing the elements in the list. try _reverse(head()?, List[this- A!]) else List[this- A!] end fun _reverse(ln: this- ListNode[A], acc: List[this- A!]): List[this- A!]^ = Private helper for reverse, recursively working with ListNodes. try acc.unshift(ln()?) end try _reverse(ln.next() as this- ListNode[A], acc) else acc end fun contains[B: (A HasEq[A!] #read) = A](a: box- B): Bool = Returns true if the list contains the provided element, false otherwise. try _contains[B](head()?, a) else false end fun _contains[B: (A HasEq[A!] #read) = A]( ln: this- ListNode[A], a: box- B) : Bool = Private helper for contains, recursively working with ListNodes. try if a == ln()? then true else _contains[B](ln.next() as this- ListNode[A], a) end else false end fun nodes(): ListNodes[A, this- ListNode[A]]^ = Return an iterator on the nodes in the list. ListNodes[A, this- ListNode[A]](_head) fun rnodes(): ListNodes[A, this- ListNode[A]]^ = Return an iterator on the nodes in the list. ListNodes[A, this- ListNode[A]](_head, true) fun values(): ListValues[A, this- ListNode[A]]^ = Return an iterator on the values in the list. ListValues[A, this- ListNode[A]](_head) fun rvalues(): ListValues[A, this- ListNode[A]]^ = Return an iterator on the values in the list. ListValues[A, this- ListNode[A]](_head, true) fun ref _increment() = _size = _size + 1 fun ref _decrement() = _size = _size - 1 fun ref _set_head(head': (ListNode[A] | None)) = _head = head' fun ref _set_tail(tail': (ListNode[A] | None)) = _tail = tail' fun ref _set_both(node: ListNode[A]) = node._set_list(this) _head = node _tail = node _size = 1 class ListNodes[A, N: ListNode[A] #read] is Iterator[N] Iterate over the nodes in a list. var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) = Keep the next list node to be examined. _next = head _reverse = reverse fun has_next(): Bool = If we have a list node, we have more values. _next isnt None fun ref next(): N ? = Get the list node and replace it with the next one. match _next | let next': N = if _reverse then _next = next'.prev() else _next = next'.next() end next' else error end class ListValues[A, N: ListNode[A] #read] is Iterator[N- A] Iterate over the values in a list. var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) = Keep the next list node to be examined. _next = head _reverse = reverse fun has_next(): Bool = If we have a list node, we have more values. _next isnt None fun ref next(): N- A ? = Get the value of the list node and replace it with the next one. match _next | let next': N = if _reverse then _next = next'.prev() else _next = next'.next() end next'()? else error end","title":"list.pony"},{"location":"src/collections/list_node/","text":"class ListNode[A] A node in a list. var _item: (A | None) var _list: (List[A] | None) = None var _prev: (ListNode[A] | None) = None var _next: (ListNode[A] | None) = None new create(item: (A | None) = None) = Create a node. Initially, it is not in any list. _item = consume item fun apply(): this- A ? = Return the item, if we have one, otherwise raise an error. _item as this- A fun ref update(value: (A | None)): A^ ? = Replace the item and return the previous one. Raise an error if we have no previous value. (_item = consume value) as A^ fun ref pop(): A^ ? = Remove the item from the node, if we have one, otherwise raise an error. (_item = None) as A^ fun ref prepend(that: ListNode[A]): Bool = Prepend a node to this one. If `that` is already in a list, it is removed before it is prepended. Returns true if `that` was removed from another list. if (_prev is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] = in_list = that._list isnt None that.remove() match _prev | let prev': ListNode[A] = prev'._next = that else list'._set_head(that) end that._list = list' that._prev = _prev that._next = this _prev = that list'._increment() end in_list fun ref append(that: ListNode[A]): Bool = Append a node to this one. If `that` is already in a list, it is removed before it is appended. Returns true if `that` was removed from another list. if (_next is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] = in_list = that._list isnt None that.remove() match _next | let next': ListNode[A] = next'._prev = that else list'._set_tail(that) end that._list = list' that._prev = this that._next = _next _next = that list'._increment() end in_list fun ref remove() = Remove a node from a list. match _list | let list': List[A] = match (_prev, _next) | (let prev': ListNode[A], let next': ListNode[A]) = // We're in the middle of the list. prev'._next = _next next'._prev = _prev _prev = None _next = None | (let prev': ListNode[A], None) = // We're the tail. prev'._next = None list'._set_tail(prev') _prev = None | (None, let next': ListNode[A]) = // We're the head. next'._prev = None list'._set_head(next') _next = None | (None, None) = // We're the only member list'._set_head(None) list'._set_tail(None) end list'._decrement() _list = None end fun has_prev(): Bool = Return true if there is a previous node. _prev isnt None fun has_next(): Bool = Return true if there is a next node. _next isnt None fun prev(): (this- ListNode[A] | None) = Return the previous node. _prev fun next(): (this- ListNode[A] | None) = Return the next node. _next fun ref _set_list(list: List[A]): ListNode[A]^ = Make this node the only node on the given list. remove() _list = list this","title":"list_node.pony"},{"location":"src/collections/map/","text":"primitive _MapEmpty primitive _MapDeleted type Map[K: (Hashable #read Equatable[K] #read), V] is HashMap[K, V, HashEq[K]] This is a map that uses structural equality on the key. type MapIs[K, V] is HashMap[K, V, HashIs[K]] This is a map that uses identity comparison on the key. class HashMap[K, V, H: HashFunction[K] val] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. var _size: USize = 0 var _array: Array[((K, V) | _MapEmpty | _MapDeleted)] new create(prealloc: USize = 6) = Create an array with space for prealloc elements without triggering a resize. Defaults to 6. let len = (prealloc * 4) / 3 let n = len.max(8).next_pow2() _array = _array.init(_MapEmpty, n) fun size(): USize = The number of items in the map. _size fun space(): USize = The available space in the map. Resize will happen when size / space = 0.75. _array.space() fun apply(key: box- K!): this- V ? = Gets a value from the map. Raises an error if no such item exists. (let i, let found) = _search(key) if found then _array(i)? as (_, this- V) else error end fun ref update(key: K, value: V): (V^ | None) = Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. try (let i, let found) = _search(key) let k = if found then _array(i)? as (K^, _) else consume key end match _array(i)? = (consume k, consume value) | (_, let v: V) = return consume v else _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) end end end fun ref upsert(key: K, value: V, f: {(V, V): V^} box): V ? = Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key test , which let's say is currently 2. We call m.upsert( test , 4, {(x, y) = x - y }) This changes the value associated with test to -2. If we have not yet added the key new-key to the map and we call m.upsert( new-key , 4, {(x, y) = x - y }) then new-key is added to the map with a value of -4. Returns the value that we set the key to (let i, let found) = _search(key) try if found then (let pkey, let pvalue) = (_array(i)? = _MapEmpty) as (K^, V^) _array(i)? = (consume pkey, f(consume pvalue, consume value)) else let key' = key _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) return this(key')? end end return _array(i)? as (_, V) else error end fun ref insert(key: K, value: V): V ? = Set a value in the map. Returns the new value, allowing reuse. try (let i, let found) = _search(key) let key' = key _array(i)? = (consume key, consume value) if not found then _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) return this(key')? end end _array(i)? as (_, V) else // This is unreachable, since index will never be out-of-bounds. error end fun ref insert_if_absent(key: K, value: V): V ? = Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: ```pony if not my_map.contains(my_key) then my_map(my_key) = my_value end ``` Returns the value, the same as `insert`, allowing 'insert_if_absent' to be used as a drop-in replacement for `insert`. try (let i, let found) = _search(key) let key' = key if not found then _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) (_array.size() * 3) then _resize(_array.size() * 2) return this(key')? end end _array(i)? as (_, V) else // This is unreachable, since index will never be out-of-bounds. error end fun ref remove(key: box- K!): (K^, V^) ? = Delete a value from the map and return it. Raises an error if there was no value for the given key. try (let i, let found) = _search(key) if found then _size = _size - 1 match _array(i)? = _MapDeleted | (let k: K, let v: V) = return (consume k, consume v) end end end error fun get_or_else(key: box- K!, alt: this- V): this- V = Get the value associated with provided key if present. Otherwise, return the provided alternate value. (let i, let found) = _search(key) if found then try _array(i)? as (_, this- V) else // This should never happen as we have already // proven that _array(i) exists consume alt end else consume alt end fun contains(k: box- K!): Bool = Checks whether the map contains the key k (_, let found) = _search(k) found fun ref concat(iter: Iterator[(K^, V^)]) = Add K, V pairs from the iterator to the map. for (k, v) in iter do this(consume k) = consume v end fun add[H2: HashFunction[this- K!] val = H]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2]^ = This with the new (key, value) mapping. let r = clone[H2]() r(key) = value r fun sub[H2: HashFunction[this- K!] val = H]( key: this- K!, value: this- V!) : HashMap[this- K!, this- V!, H2]^ = This without the given key. let r = clone[H2]() try r.remove(key)? end r fun next_index(prev: USize = -1): USize ? = Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. for i in Range(prev + 1, _array.size()) do match _array(i)? | (_, _) = return i end end error fun index(i: USize): (this- K, this- V) ? = Returns the key and value at a given index. Raise an error if the index is not populated. _array(i)? as (this- K, this- V) fun ref compact() = Minimise the memory used for the map. _resize(((_size * 4) / 3).next_pow2().max(8)) fun clone[H2: HashFunction[this- K!] val = H]() : HashMap[this- K!, this- V!, H2]^ = Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. let r = HashMap[this- K!, this- V!, H2](_size) for (k, v) in pairs() do r(k) = v end r fun ref clear() = Remove all entries. _size = 0 // Our default prealloc of 6 corresponds to an array alloc size of 8. let n: USize = 8 _array = _array.init(_MapEmpty, n) fun _search(key: box- K!): (USize, Bool) = Return a slot number and whether or not it's currently occupied. var idx_del = _array.size() let mask = idx_del - 1 let h = H.hash(key).usize() var idx = h and mask try for i in Range(0, _array.size()) do let entry = _array(idx)? match entry | (let k: this- K!, _) = if H.eq(k, key) then return (idx, true) end | _MapEmpty = if idx_del = mask then return (idx_del, false) else return (idx, false) end | _MapDeleted = if idx_del mask then idx_del = idx end end idx = (h + ((i + (i * i)) / 2)) and mask end end (idx_del, false) fun ref _resize(len: USize) = Change the available space. let old = _array let old_len = old.size() _array = _array.init(_MapEmpty, len) _size = 0 try for i in Range(0, old_len) do match old(i)? = _MapDeleted | (let k: K, let v: V) = this(consume k) = consume v end end end fun keys(): MapKeys[K, V, H, this- HashMap[K, V, H]]^ = Return an iterator over the keys. MapKeys[K, V, H, this- HashMap[K, V, H]](this) fun values(): MapValues[K, V, H, this- HashMap[K, V, H]]^ = Return an iterator over the values. MapValues[K, V, H, this- HashMap[K, V, H]](this) fun pairs(): MapPairs[K, V, H, this- HashMap[K, V, H]]^ = Return an iterator over the keys and values. MapPairs[K, V, H, this- HashMap[K, V, H]](this) class MapKeys[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- K] An iterator over the keys in a map. let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) = Creates an iterator for the given map. _map = map fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the map. _count _map.size() fun ref next(): M- K ? = Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._1 class MapValues[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M- V] An iterator over the values in a map. let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) = Creates an iterator for the given map. _map = map fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the map. _count _map.size() fun ref next(): M- V ? = Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._2 class MapPairs[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M- K, M- V)] An iterator over the keys and values in a map. let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) = Creates an iterator for the given map. _map = map fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the map. _count _map.size() fun ref next(): (M- K, M- V) ? = Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?","title":"map.pony"},{"location":"src/collections/range/","text":"class Range[A: (Real[A] val Number) = USize] is Iterator[A] Produces `[min, max)` with a step of `inc` for any `Number` type. ```pony // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end ``` Supports `min` being smaller than `max` with negative `inc` but only for signed integer types and floats: ```pony var previous = 11 for left in Range[I64](10, -5, -1) do if not (left previous) then error end previous = left end ``` If the `step` is not moving `min` towards `max` or if it is `0`, the Range is considered infinite and iterating over it will never terminate: ```pony let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print( will this ever end? ) env.err.print( no, never! ) end ``` When using `Range` with floating point types (`F32` and `F64`) `inc` steps 1.0 are possible. If any of the arguments contains `NaN`, `+Inf` or `-Inf` the range is considered infinite as operations on any of them won't move `min` towards `max`. The actual values produced by such a `Range` are determined by what IEEE 754 defines as the result of `min` + `inc`: ```pony for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end ``` let _min: A let _max: A let _inc: A let _forward: Bool let _infinite: Bool var _idx: A new create(min: A, max: A, inc: A = 1) = _min = min _max = max _inc = inc _idx = min _forward = (_min _max) and (_inc 0) let is_float_infinite = iftype A : FloatingPoint[A] then _min.nan() or _min.infinite() or _max.nan() or _max.infinite() or _inc.nan() or _inc.infinite() else false end _infinite = is_float_infinite or ((_inc == 0) and (min != max)) // no progress or ((_min _max) and (_inc 0)) // progress into other directions or ((_min _max) and (_inc 0)) fun has_next(): Bool = if _forward then _idx _max else _idx _max end fun ref next(): A = if has_next() then _idx = _idx + _inc else _idx end fun ref rewind() = _idx = _min fun is_infinite(): Bool = _infinite","title":"range.pony"},{"location":"src/collections/reverse/","text":"class Reverse[A: (Real[A] val Number) = USize] is Iterator[A] Produces [max, min]. let _min: A let _max: A let _dec: A var _idx: A new create(max: A, min: A, dec: A = 1) = _min = min _max = max _dec = dec _idx = max fun has_next(): Bool = (_idx = _min) and (_idx = _max) fun ref next(): A = if has_next() then _idx = _idx - _dec else _idx + _dec end fun ref rewind() = _idx = _max","title":"reverse.pony"},{"location":"src/collections/ring_buffer/","text":"class RingBuffer[A] A ring buffer. embed _array: Array[A] let _mod: USize var _write: USize = 0 new create(len: USize) = Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. let n = len.max(2).next_pow2() _mod = n - 1 _array = Array[A](n) fun head(): USize ? = The first read that will succeed. If nothing has been written to the ring, this will raise an error. if _write 0 then if _write space() then _write - space() else 0 end else error end fun size(): USize = The number of elements that have been added to the ring. _write fun space(): USize = The available space in the ring. _mod + 1 fun apply(i: USize): this- A ? = Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. if (i = _write) or ((_write - i) space()) then error end _array(i and _mod)? fun ref push(value: A): Bool = Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. var full = false if _write space() then _array.push(consume value) else try _array(_write and _mod)? = consume value end full = true end _write = _write + 1 full fun ref clear() = Clear the queue. _array.clear() _write = 0","title":"ring_buffer.pony"},{"location":"src/collections/set/","text":"type Set[A: (Hashable #read Equatable[A] #read)] is HashSet[A, HashEq[A]] type SetIs[A] is HashSet[A, HashIs[A!]] class HashSet[A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself embed _map: HashMap[A!, A, H] new create(prealloc: USize = 8) = Defaults to a prealloc of 8. _map = _map.create(prealloc) fun size(): USize = The number of items in the set. _map.size() fun space(): USize = The available space in the set. _map.space() fun apply(value: box- A!): this- A ? = Return the value if its in the set, otherwise raise an error. _map(value)? fun contains(value: box- A!): Bool = Checks whether the set contains the value. _map.contains(value) fun ref clear() = Remove all elements from the set. _map.clear() fun ref set(value: A) = Add a value to the set. _map(value) = consume value fun ref unset(value: box- A!) = Remove a value from the set. try _map.remove(value)? end fun ref extract(value: box- A!): A^ ? = Remove a value from the set and return it. Raises an error if the value wasn't in the set. _map.remove(value)?._2 fun ref union(that: Iterator[A^]) = Add everything in that to the set. for value in that do set(consume value) end fun ref intersect[K: HashFunction[box- A!] val = H]( that: HashSet[box- A!, K]) = Remove everything that isn't in that. let start_size = _map.size() var seen: USize = 0 var i: USize = -1 while seen start_size do try i = next_index(i)? if not that.contains(index(i)?) then unset(index(i)?) end end seen = seen + 1 end fun ref difference(that: Iterator[A^]) = Remove elements in this which are also in that. Add elements in that which are not in this. for value in that do try extract(value)? else set(consume value) end end fun ref remove(that: Iterator[box- A!]) = Remove everything that is in that. for value in that do unset(value) end fun add[K: HashFunction[this- A!] val = H]( value: this- A!) : HashSet[this- A!, K]^ = Add a value to the set. clone[K]() . set(value) fun sub[K: HashFunction[this- A!] val = H]( value: box- this- A!) : HashSet[this- A!, K]^ = Remove a value from the set. clone[K]() . unset(value) fun op_or[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements of both this and that. let r = clone[K]() for value in that.values() do r.set(value) end r fun op_and[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements that are in both this and that. let r = HashSet[this- A!, K](size().min(that.size())) for value in values() do try that(value)? r.set(value) end end r fun op_xor[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements that are in either set but not both. let r = HashSet[this- A!, K](size().max(that.size())) for value in values() do try that(value)? else r.set(value) end end for value in that.values() do try this(value)? else r.set(value) end end r fun without[K: HashFunction[this- A!] val = H]( that: this- HashSet[A, H]) : HashSet[this- A!, K]^ = Create a set with the elements of this that are not in that. let r = HashSet[this- A!, K](size()) for value in values() do try that(value)? else r.set(value) end end r fun clone[K: HashFunction[this- A!] val = H](): HashSet[this- A!, K]^ = Create a clone. The element type may be different due to aliasing and viewpoint adaptation. let r = HashSet[this- A!, K](size()) for value in values() do r.set(value) end r fun eq(that: HashSet[A, H] box): Bool = Returns true if the sets contain the same elements. (size() == that.size()) and (this = that) fun ne(that: HashSet[A, H] box): Bool = Returns false if the sets contain the same elements. not (this == that) fun lt(that: HashSet[A, H] box): Bool = Returns true if every element in this is also in that, and this has fewer elements than that. (size() that.size()) and (this = that) fun le(that: HashSet[A, H] box): Bool = Returns true if every element in this is also in that. try for value in values() do that(value)? end true else false end fun gt(that: HashSet[A, H] box): Bool = Returns true if every element in that is also in this, and this has more elements than that. (size() that.size()) and (that = this) fun ge(that: HashSet[A, H] box): Bool = Returns true if every element in that is also in this. that = this fun next_index(prev: USize = -1): USize ? = Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. _map.next_index(prev)? fun index(i: USize): this- A ? = Returns the value at a given index. Raise an error if the index is not populated. _map.index(i)?._2 fun values(): SetValues[A, H, this- HashSet[A, H]]^ = Return an iterator over the values. SetValues[A, H, this- HashSet[A, H]](this) class SetValues[A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S- A] An iterator over the values in a set. let _set: S var _i: USize = -1 var _count: USize = 0 new create(set: S) = Creates an iterator for the given set. _set = set fun has_next(): Bool = True if it believes there are remaining entries. May not be right if values were added or removed from the set. _count _set.size() fun ref next(): S- A ? = Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. _i = _set.next_index(_i)? _count = _count + 1 _set.index(_i)?","title":"set.pony"},{"location":"src/collections/sort/","text":"primitive Sort[A: Seq[B] ref, B: Comparable[B] #read] Implementation of dual-pivot quicksort. fun apply(a: A): A^ = Sort the given seq. try _sort(a, 0, a.size().isize() - 1)? end a fun _sort(a: A, lo: ISize, hi: ISize) ? = if hi = lo then return end // choose outermost elements as pivots if a(lo.usize())? a(hi.usize())? then _swap(a, lo, hi)? end (var p, var q) = (a(lo.usize())?, a(hi.usize())?) // partition according to invariant (var l, var g) = (lo + 1, hi - 1) var k = l while k = g do if a(k.usize())? p then _swap(a, k, l)? l = l + 1 elseif a(k.usize())? = q then while (a(g.usize())? q) and (k g) do g = g - 1 end _swap(a, k, g)? g = g - 1 if a(k.usize())? p then _swap(a, k, l)? l = l + 1 end end k = k + 1 end (l, g) = (l - 1, g + 1) // swap pivots to final positions _swap(a, lo, l)? _swap(a, hi, g)? // recursively sort 3 partitions _sort(a, lo, l - 1)? _sort(a, l + 1, g - 1)? _sort(a, g + 1, hi)? fun _swap(a: A, i: ISize, j: ISize) ? = a(j.usize())? = a(i.usize())? = a(j.usize())?","title":"sort.pony"},{"location":"src/ponytest/_color/","text":"primitive _Color Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. fun reset(): String = Resets all colours and text styles to the default. \\x1B[0m fun red(): String = Bright red text. \\x1B[91m fun green(): String = Bright green text. \\x1B[92m","title":"_color.pony"},{"location":"src/ponytest/_group/","text":"trait tag _Group Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. be apply(runner: _TestRunner) Run the given test, or queue it and run later, as appropriate. be _test_complete(runner: _TestRunner) The specified test has completed. actor _ExclusiveGroup is _Group Test group in which we only ever have one test running at a time. embed _tests: Array[_TestRunner] = Array[_TestRunner] var _next: USize = 0 var _in_test:Bool = false be apply(runner: _TestRunner) = if _in_test then // We're already running one test, save this one for later _tests.push(runner) else // Run test now _in_test = true runner.run() end be _test_complete(runner: _TestRunner) = _in_test = false if _next _tests.size() then // We have queued tests, run the next one try let next_test = _tests(_next)? _next = _next + 1 _in_test = true next_test.run() end end actor _SimultaneousGroup is _Group Test group in which all tests can run concurrently. be apply(runner: _TestRunner) = // Just run the test runner.run() be _test_complete(runner: _TestRunner) = // We don't care about tests finishing None","title":"_group.pony"},{"location":"src/ponytest/pony_test/","text":"# PonyTest package The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: * builtin * time * collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. ## Example program To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. ```pony use ponytest actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String = addition fun apply(h: TestHelper) = h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String = subtraction fun apply(h: TestHelper) = h.assert_eq[U32](2, 4 - 2) ``` The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. ## Test names Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the `--exclude=[prefix]` command line option. You can run only tests whose names start with a given string by using the `--only=[prefix]` command line option. ## Aggregation Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages `foo` and `bar`. ```pony use ponytest use foo = foo use bar = bar actor Main is TestList new create(env: Env) = PonyTest(env, this) new make() = None fun tag tests(test: PonyTest) = foo.Main.make().tests(test) bar.Main.make().tests(test) ``` Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. ## Long tests Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. ## Exclusion groups By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option --sequential prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. ## Labels Test can have label. Labels are used to filter which tests are run, by setting command line argument `--label=[some custom label]`. It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding `label(): String` method in unit test. ```pony use ponytest class iso _I8AddTest is UnitTest fun name(): String = _I8AddTest fun label(): String = simple fun apply(h: TestHelper) = h.assert_eq[I8](1, 1) ``` ## Setting up and tearing down a test environment ### Set Up Any kind of fixture or environment necessary for executing a [UnitTest](ponytest-UnitTest) can be set up either in the tests constructor or in a function called [set_up()](ponytest-UnitTest#set_up). [set_up()](ponytest-UnitTest#set_up) is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's [TestHelper](ponytest-TestHelper) is handed to [set_up()](ponytest-UnitTest#set_up) in order to log messages or access the tests [Env](builtin-Env) via [TestHelper.env](ponytest-TestHelper#let-env-env-val). ### Tear Down Each unit test object may define a [tear_down()](ponytest-UnitTest#tear_down) function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The [tear_down()](ponytest-UnitTest#tear_down) function is called for each test regardless of whether it passed or failed. If a test times out [tear_down()](ponytest-UnitTest#tear_down) will be called after timed_out() returns. When a test is in an exclusion group, the [tear_down()](ponytest-UnitTest#tear_down) call is considered part of the tests run. The next test in the exclusion group will not start until after [tear_down()](ponytest-UnitTest#tear_down) returns on the current test. The test's [TestHelper](ponytest-TestHelper) is handed to [tear_down()](ponytest-UnitTest#tear_down) and it is permitted to log messages and call assert functions during tear down. ### Example The following example creates a temporary directory in the [set_up()](ponytest-UnitTest#set_up) function and removes it in the [tear_down()](ponytest-UnitTest#tear_down) function, thus simplifying the test function itself: ```pony use ponytest use files class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String = temp-dir fun ref set_up(h: TestHelper)? = tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, temp-dir )? fun ref tear_down(h: TestHelper) = try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? = let dir = tmp_dir as FilePath // do something inside the temporary directory ``` use time actor PonyTest Main test framework actor that organises tests, collates information and prints results. embed _groups: Array[(String, _Group)] = Array[(String, _Group)] embed _records: Array[_TestRecord] = Array[_TestRecord] let _env: Env let _timers: Timers = Timers var _do_nothing: Bool = false var _verbose: Bool = false var _sequential: Bool = false var _no_prog: Bool = false var _list_only: Bool = false var _started: USize = 0 var _finished: USize = 0 var _any_found: Bool = false var _all_started: Bool = false // Filtering options var _exclude: String = var _label: String = var _only: String = new create(env: Env, list: TestList tag) = Create a PonyTest object and use it to run the tests from the given TestList _env = env _process_opts() _groups.push(( , _SimultaneousGroup)) list.tests(this) _all_tests_applied() be apply(test: UnitTest iso) = Run the given test, subject to our filters and options. if _do_nothing then return end var name = test.name() // Ignore any tests that satisfy our exclude filter if (_exclude != ) and name.at(_exclude, 0) then return end // Ignore any tests that don't satisfy our only filter if (_only != ) and (not name.at(_only, 0)) then return end // Ignore tests when label arg is set and test label doesn't match if (_label != ) and (_label != test.label()) then return end _any_found = true if _list_only then // Don't actually run tests, just list them _env.out.print(name) return end var index = _records.size() _records.push(_TestRecord(_env, name)) var group = _find_group(test.exclusion_group()) group(_TestRunner(this, index, consume test, group, _verbose, _env, _timers)) fun ref _find_group(group_name: String): _Group = Find the group to use for the given group name, subject to the --sequential flag. var name = group_name if _sequential then // Use the same group for all tests. name = all end for g in _groups.values() do if g._1 == name then return g._2 end end // Group doesn't exist yet, make it. // We only need one simultaneous group, which we've already made. All new // groups are exclusive. let g = _ExclusiveGroup _groups.push((name, g)) g be _test_started(id: USize) = A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. _started = _started + 1 try if not _no_prog then _env.out.print( _started.string() + test + _plural(_started) + started, + _finished.string() + complete: + _records(id)?.name + started ) end end be _test_complete(id: USize, pass: Bool, log: Array[String] val) = A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. _finished = _finished + 1 try _records(id)?._result(pass, log) if not _no_prog then _env.out.print( _started.string() + test + _plural(_started) + started, + _finished.string() + complete: + _records(id)?.name + complete ) end end if _all_started and (_finished == _records.size()) then // All tests have completed _print_report() end be _all_tests_applied() = All our tests have been handed to apply(), setup for finishing if _do_nothing then return end if not _any_found then // No tests left after applying our filters _env.out.print( No tests found ) return end if _list_only then // No tests to run return end _all_started = true if _finished == _records.size() then // All tests have completed _print_report() end fun ref _process_opts() = Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. var exe_name = for arg in _env.args.values() do if exe_name == then exe_name = arg continue end if arg == --sequential then _sequential = true elseif arg == --verbose then _verbose = true elseif arg == --noprog then _no_prog = true elseif arg == --list then _list_only = true elseif arg.compare_sub( --exclude= , 10) is Equal then _exclude = arg.substring(10) elseif arg.compare_sub( --label= , 8) is Equal then _label = arg.substring(8) elseif arg.compare_sub( --only= , 7) is Equal then _only = arg.substring(7) else _env.out.print( Unrecognised argument \\ + arg + \\ ) _env.out.print( ) _env.out.print( Usage: ) _env.out.print( + exe_name + [options] ) _env.out.print( ) _env.out.print( Options: ) _env.out.print( --exclude=prefix - Don't run tests whose names + start with the given prefix. ) _env.out.print( --only=prefix - Only run tests whose names + start with the given prefix. ) _env.out.print( --verbose - Show all test output. ) _env.out.print( --sequential - Run tests sequentially. ) _env.out.print( --noprog - Do not print progress messages. ) _env.out.print( --list - List but do not run tests. ) _env.out.print( --label=label - Only run tests with given label ) _do_nothing = true return end end fun _print_report() = The tests are all complete, print out the results. var pass_count: USize = 0 var fail_count: USize = 0 // First we print the result summary for each test, in the order that they // were given to us. for rec in _records.values() do if rec._report(_verbose) then pass_count = pass_count + 1 else fail_count = fail_count + 1 end end // Next we print the pass / fail stats. _env.out.print( ---- ) _env.out.print( ---- + _records.size().string() + test + _plural(_records.size()) + ran. ) _env.out.print(_Color.green() + ---- Passed: + pass_count.string() + _Color.reset()) if fail_count == 0 then // Success, nothing failed. return end // Not everything passed. _env.out.print(_Color.red() + **** FAILED: + fail_count.string() + test + _plural(fail_count) + , listed below: + _Color.reset()) // Finally print our list of failed tests. for rec in _records.values() do rec._list_failed() end _env.exitcode(-1) fun _plural(n: USize): String = Return a s or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg test or tests . if n == 1 then else s end","title":"pony_test.pony"},{"location":"src/ponytest/test_helper/","text":"interface ITest fun apply() ? class val TestHelper Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. let _runner: _TestRunner let env: Env The process environment. This is useful for getting the [root authority](builtin-AmbientAuth) in order to access the filesystem (See [files](files--index)) or the network (See [net](net--index)) in your tests. new val _create(runner: _TestRunner, env': Env) = Create a new TestHelper. env = env' _runner = runner fun log(msg: String, verbose: Bool = false) = Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. _runner.log(msg, verbose) fun fail(msg: String = Test failed ) = Flag the test as having failed. _runner.fail(msg) fun assert_true(actual: Bool, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the given expression is true. if not actual then fail(_format_loc(loc) + Assert true failed. + msg) return false end log(_format_loc(loc) + Assert true passed. + msg, true) true fun assert_false(actual: Bool, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the given expression is false. if actual then fail(_format_loc(loc) + Assert false failed. + msg) return false end log(_format_loc(loc) + Assert false passed. + msg, true) true fun assert_error(test: ITest box, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the given test function throws an error when run. try test()? fail(_format_loc(loc) + Assert error failed. + msg) false else log(_format_loc(loc) + Assert error passed. + msg, true) true end fun assert_no_error( test: ITest box, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the gived test function does not throw an error when run. try test()? log(_format_loc(loc) + Assert no error passed. + msg, true) true else fail(_format_loc(loc) + Assert no error failed. + msg) true end fun assert_is[A]( expect: A, actual: A, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the 2 given expressions resolve to the same instance _check_is[A]( is , consume expect, consume actual, msg, loc) fun _check_is[A]( check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions resolve to the same instance if expect isnt actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + (digestof expect).string() + ) is ( + (digestof actual).string() + ) ) return false end log( _format_loc(loc) + Assert + check + passed. + msg + Got ( + (digestof expect).string() + ) is ( + (digestof actual).string() + ) , true) true fun assert_eq[A: (Equatable[A] #read Stringable #read)] (expect: A, actual: A, msg: String = , loc: SourceLoc = __loc): Bool = Assert that the 2 given expressions are equal. _check_eq[A]( eq , expect, actual, msg, loc) fun _check_eq[A: (Equatable[A] #read Stringable)] (check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions are equal. if expect != actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + expect.string() + ) == ( + actual.string() + ) ) return false end log(_format_loc(loc) + Assert + check + passed. + msg + Got ( + expect.string() + ) == ( + actual.string() + ) , true) true fun assert_isnt[A]( not_expect: A, actual: A, msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the 2 given expressions resolve to different instances. _check_isnt[A]( isn't , consume not_expect, consume actual, msg, loc) fun _check_isnt[A]( check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions resolve to different instances. if not_expect is actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + (digestof not_expect).string() + ) isnt ( + (digestof actual).string() + ) ) return false end log( _format_loc(loc) + Assert + check + passed. + msg + Got ( + (digestof not_expect).string() + ) isnt ( + (digestof actual).string() + ) , true) true fun assert_ne[A: (Equatable[A] #read Stringable #read)] (not_expect: A, actual: A, msg: String = , loc: SourceLoc = __loc): Bool = Assert that the 2 given expressions are not equal. _check_ne[A]( ne , not_expect, actual, msg, loc) fun _check_ne[A: (Equatable[A] #read Stringable)] (check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool = Check that the 2 given expressions are not equal. if not_expect == actual then fail(_format_loc(loc) + Assert + check + failed. + msg + Expected ( + not_expect.string() + ) != ( + actual.string() + ) ) return false end log( _format_loc(loc) + Assert + check + passed. + msg + Got ( + not_expect.string() + ) != ( + actual.string() + ) , true) true fun assert_array_eq[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the contents of the 2 given ReadSeqs are equal. var ok = true if expect.size() != actual.size() then ok = false else try var i: USize = 0 while i expect.size() do if expect(i)? != actual(i)? then ok = false break end i = i + 1 end else ok = false end end if not ok then fail(_format_loc(loc) + Assert EQ failed. + msg + Expected ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ) ) return false end log( _format_loc(loc) + Assert EQ passed. + msg + Got ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ) , true) true fun assert_array_eq_unordered[A: (Equatable[A] #read Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = , loc: SourceLoc = __loc) : Bool = Assert that the contents of the 2 given ReadSeqs are equal ignoring order. try let missing = Array[box- A] let consumed = Array[Bool].init(false, actual.size()) for e in expect.values() do var found = false var i: USize = -1 for a in actual.values() do i = i + 1 if consumed(i)? then continue end if e == a then consumed.update(i, true)? found = true break end end if not found then missing.push(e) end end let extra = Array[box- A] for (i, c) in consumed.pairs() do if not c then extra.push(actual(i)?) end end if (extra.size() != 0) or (missing.size() != 0) then fail( _format_loc(loc) + Assert EQ_UNORDERED failed. + msg + Expected ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ): + \\nMissing: + _print_array[box- A](missing) + \\nExtra: + _print_array[box- A](extra)) return false end log( _format_loc(loc) + Assert EQ_UNORDERED passed. + msg + Got ( + _print_array[A](expect) + ) == ( + _print_array[A](actual) + ) , true) true else fail( Assert EQ_UNORDERED failed from an internal error. ) false end fun _format_loc(loc: SourceLoc): String = loc.file() + : + loc.line().string() + : fun _print_array[A: Stringable #read](array: ReadSeq[A]): String = Generate a printable string of the contents of the given readseq to use in error messages. [len= + array.size().string() + : + , .join(array.values()) + ] fun long_test(timeout: U64) = Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. _runner.long_test(timeout) fun complete(success: Bool) = MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The success parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. _runner.complete(success) fun expect_action(name: String) = Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. _runner.expect_action(name) fun complete_action(name: String) = MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. _runner.complete_action(name, true) fun fail_action(name: String) = Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. _runner.complete_action(name, false) fun dispose_when_done(disposable: DisposableActor) = Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. _runner.dispose_when_done(disposable)","title":"test_helper.pony"},{"location":"src/ponytest/test_list/","text":"trait TestList Source of unit tests for a PonyTest object. See package doc string for further information and example use. fun tag tests(test: PonyTest) Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: ```pony fun tests(test: PonyTest) = test(_TestClass1) test(_TestClass2) test(_TestClass3) ```","title":"test_list.pony"},{"location":"src/ponytest/unit_test/","text":"trait UnitTest Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. fun name(): String Report the test name, which is used when printing test results and on the command line to select tests to run. fun exclusion_group(): String = Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun ref apply(h: TestHelper) ? Run the test. Raising an error is interpreted as a test failure. fun ref timed_out(h: TestHelper) = Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. None fun ref set_up(h: TestHelper) ? = Set up the testing environment before a test method is called. Default is to do nothing. None fun ref tear_down(h: TestHelper) = Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. None fun label(): String = Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels.","title":"unit_test.pony"},{"location":"src/time/_timing_wheel/","text":"use collections class _TimingWheel A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. let _shift: U64 let _adjust: U64 var _pending: U64 = 0 embed _list: Array[List[Timer]] new create(index: USize) = Create a timing wheel at the given hierarchical level. _shift = (index * _bits()).u64() _adjust = if index 0 then 1 else 0 end _list = Array[List[Timer]](_max()) for i in Range(0, _max()) do _list.push(List[Timer]) end fun ref schedule(timer: Timer) = Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. let slot = ((timer._next() _shift) - _adjust) and _mask() try let list = _list(slot.usize())? _list(slot.usize())?.append_node(timer._get_node()) _pending = _pending or (1 slot) end fun ref advance(list: List[Timer], current: U64, elapsed: U64): Bool = Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. let time = (elapsed _shift).max(1) let pending = if time = _mask() then let slot = time and _mask() let slots = (1 slot) - 1 let old_slot = _slot(current - elapsed) let new_slot = _slot(current) slots.rotl(old_slot) or slots.rotl(new_slot).rotr(slot) or (1 new_slot) else -1 end while (pending and _pending) != 0 do let slot = (pending and _pending).ctz() try list.append_list(_list(slot.usize())?) end _pending = _pending and not (1 slot) end (pending and 1) != 0 fun next(current: U64): U64 = Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. if _pending != 0 then let slot = _slot(current) let mask = (1 _shift) - 1 ((_pending.rotr(slot).ctz() + _adjust).u64() _shift.u64()) - (current and mask) else -1 end fun ref clear() = Cancels all pending timers. for list in _list.values() do for timer in list.values() do timer._cancel() end end fun _slot(time: U64): U64 = Return the slot for a given time. (time _shift) and _mask() fun tag _bits(): USize = 6 fun tag _max(): USize = 1 _bits() fun tag _mask(): U64 = (_max() - 1).u64()","title":"_timing_wheel.pony"},{"location":"src/time/nanos/","text":"primitive Nanos Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. fun from_seconds(t: U64): U64 = t * 1_000_000_000 fun from_millis(t: U64): U64 = t * 1_000_000 fun from_micros(t: U64): U64 = t * 1_000 fun from_seconds_f(t: F64): U64 = (t * 1_000_000_000).trunc().u64() fun from_millis_f(t: F64): U64 = (t * 1_000_000).trunc().u64() fun from_micros_f(t: F64): U64 = (t * 1_000).trunc().u64() fun from_wall_clock(wall: (I64, I64)): U64 = ((wall._1 * 1000000000) + wall._2).u64()","title":"nanos.pony"},{"location":"src/time/posix_date/","text":"class PosixDate Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. var nsec: I32 = 0 var sec: I32 = 0 var min: I32 = 0 var hour: I32 = 0 var day_of_month: I32 = 1 var month: I32 = 1 var year: I32 = 1970 var day_of_week: I32 = 4 var day_of_year: I32 = 1 new create(seconds: I64 = 0, nanoseconds: I64 = 0) = Create a date from a POSIX time. Negative arguments will be changed to zero. @ponyint_gmtime[None](this, _negative_to_zero(seconds), _negative_to_zero(nanoseconds)) fun time(): I64 = Return a POSIX time. Treats the date as UTC. @ponyint_timegm[I64](this) fun ref normal() = Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. @ponyint_gmtime[None](this, time(), nsec) fun format(fmt: String): String = Format the time as for strftime. recover String.from_cstring(@ponyint_formattime[Pointer[U8]](this, fmt.cstring())) end fun _negative_to_zero(value: I64): I64 = if value 0 then value else 0 end","title":"posix_date.pony"},{"location":"src/time/time/","text":"# Time Package The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. use lib:rt if linux use @clock_gettime[I32](clock: U32, ts: Pointer[(I64, I64)]) if lp64 and (linux or bsd) use @clock_gettime[I32](clock: U32, ts: Pointer[(I32, I32)]) if ilp32 and (linux or bsd) use @mach_absolute_time[U64]() if osx type _Clock is (_ClockRealtime | _ClockMonotonic) primitive _ClockRealtime fun apply(): U32 = ifdef linux or bsd then 0 else compile_error no clock_gettime realtime clock end primitive _ClockMonotonic fun apply(): U32 = ifdef linux then 1 elseif bsd then 4 else compile_error no clock_gettime monotonic clock end primitive Time A collection of ways to fetch the current time. fun now(): (I64 /*sec*/, I64 /*nsec*/) = The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) ifdef osx then var ts: (I64, I64) = (0, 0) @gettimeofday[I32](addressof ts, U64(0)) (ts._1, ts._2 * 1000) elseif linux or bsd then _clock_gettime(_ClockRealtime) elseif windows then var ft: (U32, U32) = (0, 0) @GetSystemTimeAsFileTime[None](addressof ft) var qft = ft._1.u64() or (ft._2.u64() 32) var epoch = qft.i64() - 116444736000000000 var sec = epoch / 10000000 var nsec = (epoch - (sec * 10000000)) * 100 (sec, nsec) else compile_error unsupported platform end fun seconds(): I64 = The wall-clock adjusted system time. @time[I64](U64(0)) fun millis(): U64 = Monotonic unadjusted milliseconds. ifdef osx then @mach_absolute_time() / 1000000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000) + (ts._2 / 1000000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000) / qpf else compile_error unsupported platform end fun micros(): U64 = Monotonic unadjusted microseconds. ifdef osx then @mach_absolute_time() / 1000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000) + (ts._2 / 1000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000) / qpf else compile_error unsupported platform end fun nanos(): U64 = Monotonic unadjusted nanoseconds. ifdef osx then @mach_absolute_time() elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000000) + ts._2).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000000) / qpf else compile_error unsupported platform end fun cycles(): U64 = Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. @ llvm.readcyclecounter [U64]() fun perf_begin(): U64 = Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. ifdef x86 then @ internal.x86.cpuid [(I32, I32, I32, I32)](I32(0)) @ llvm.x86.rdtsc [U64]() else compile_error perf_begin only supported on x86 end fun perf_end(): U64 = Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. ifdef x86 then var aux: I32 = 0 var ts = @ internal.x86.rdtscp [U64](addressof aux) @ internal.x86.cpuid [(I32, I32, I32, I32)](I32(0)) ts else compile_error perf_end only supported on x86 end fun _clock_gettime(clock: _Clock): (I64, I64) = Return a clock time on linux and bsd. ifdef lp64 and (linux or bsd) then var ts: (I64, I64) = (0, 0) @clock_gettime(clock(), addressof ts) ts elseif ilp32 and (linux or bsd) then var ts: (I32, I32) = (0, 0) @clock_gettime(clock(), addressof ts) (ts._1.i64(), ts._2.i64()) else compile_error no clock_gettime end fun _query_performance_counter(): (U64 /* qpc */, U64 /* qpf */) = Return QPC and QPF. ifdef windows then var pf: (U32, U32) = (0, 0) var pc: (U32, U32) = (0, 0) @QueryPerformanceFrequency[U32](addressof pf) @QueryPerformanceCounter[U32](addressof pc) let qpf = pf._1.u64() or (pf._2.u64() 32) let qpc = pc._1.u64() or (pc._2.u64() 32) (qpc, qpf) else compile_error no QueryPerformanceCounter end","title":"time.pony"},{"location":"src/time/timer/","text":"use collections class Timer The `Timer` class represents a timer that fires after an expiration time, and then fires at an interval. When a `Timer` fires, it calls the `apply` method of the `TimerNotify` object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the `TimerNotify` object prints how many times it has been called: ```pony use time actor Main new create(env: Env) = let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) = _env = env fun ref apply(timer: Timer, count: U64): Bool = _env.out.print(_counter.string()) _counter = _counter + 1 true ``` var _expiration: U64 var _interval: U64 let _notify: TimerNotify embed _node: ListNode[Timer] new iso create( notify: TimerNotify iso, expiration: U64, interval: U64 = 0) = Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. _expiration = expiration + Time.nanos() _interval = interval _notify = consume notify _node = ListNode[Timer] try _node()? = this end new abs(notify: TimerNotify, expiration: (I64, I64), interval: U64 = 0) = Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. _expiration = _abs_expiration_time(expiration) _interval = interval _notify = notify _node = ListNode[Timer] try _node()? = this end fun ref _cancel() = Remove the timer from any list. _node.remove() _notify.cancel(this) fun ref _get_node(): ListNode[Timer] = Returns the list node pointing to the timer. Used to schedule the timer in a queue. _node fun ref _slop(bits: USize) = Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. _expiration = _expiration bits.u64() if _interval 0 then _interval = (_interval bits.u64()).max(1) end fun ref _fire(current: U64): Bool = A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. let elapsed = current - _expiration if elapsed (1 63) then let count = (elapsed / _interval) + 1 _expiration = _expiration + (count * _interval) if not _notify(this, count) then _notify.cancel(this) return false end end (_interval 0) or ((_expiration - current) (1 63)) fun _next(): U64 = Returns the next expiration time. _expiration fun tag _abs_expiration_time(wall: (I64, I64)): U64 = Converts a wall-clock adjusted system time to absolute expiration time let wall_now = Time.now() Time.nanos() + (((wall._1 * 1000000000) + wall._2) - ((wall_now._1 * 1000000000) + wall_now._2)).u64()","title":"timer.pony"},{"location":"src/time/timer_notify/","text":"interface TimerNotify Notifications for timer. fun ref apply(timer: Timer, count: U64): Bool = Called with the the number of times the timer has fired since this was last called. Usually, the value of `count` will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and `count` is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). true fun ref cancel(timer: Timer) = Called if the timer is cancelled. This is also called if the notifier returns false from its `apply` method. None","title":"timer_notify.pony"},{"location":"src/time/timers/","text":"use collections use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_setnsec[U32](event: AsioEventID, nsec: U64) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) actor Timers A hierarchical set of timing wheels. var _current: U64 = 0 let _slop: USize embed _map: MapIs[Timer tag, Timer] = MapIs[Timer tag, Timer] embed _wheel: Array[_TimingWheel] = Array[_TimingWheel](_wheels()) embed _pending: List[Timer] = List[Timer] var _event: AsioEventID = AsioEvent.none() new create(slop: USize = 20) = Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. _slop = slop _set_time() for i in Range(0, _wheels()) do _wheel.push(_TimingWheel(i)) end be apply(timer: Timer iso) = Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. let timer': Timer ref = consume timer _map(timer') = timer' timer'._slop(_slop) _fire(timer') _advance() be cancel(timer: Timer tag) = Cancels a timer. try (_, let timer') = _map.remove(timer)? timer'._cancel() if (_map.size() == 0) and (not _event.is_null()) then // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end be dispose() = Dispose of this set of timing wheels. for wheel in _wheel.values() do wheel.clear() end _map.clear() if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) = When the event fires, advance the timing wheels. if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif event is _event then _advance() end fun ref _advance() = Update the current time, process all the timing wheels, and set the event for the next time we need to advance. let elapsed = _set_time() try for i in Range(0, _wheels()) do if not _wheel(i)?.advance(_pending, _current, elapsed) then break end end for timer in _pending.values() do _fire(timer) end end _pending.clear() var nsec = _next() if _event.is_null() then if nsec != -1 then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.timer(), nsec, true) end else if nsec != -1 then // Update an existing event. @pony_asio_event_setnsec(_event, nsec) else // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end fun ref _fire(timer: Timer) = Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. if not timer._fire(_current) then try _map.remove(timer)? end return end try let rem = timer._next() - _current _get_wheel(rem)?.schedule(consume timer) end fun _next(): U64 = Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. var next: U64 = -1 try for i in Range(0, _wheels()) do next = next.min(_wheel(i)?.next(_current)) end end if next != -1 then next = next _slop.u64() end next fun ref _set_time(): U64 = Set the current time with precision reduced by the slop bits. Return the elapsed time. let previous = _current = Time.nanos() _slop.u64() _current - previous fun ref _get_wheel(rem: U64): _TimingWheel ? = Get the hierarchical timing wheel for the given time until expiration. let t = rem.min(_expiration_max()) let i = ((t.bitwidth() - t.clz()) - 1).usize() / _bits() _wheel(i)? fun tag _expiration_max(): U64 = Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. ((1 (_wheels() * _bits())) - 1).u64() fun tag _wheels(): USize = 4 fun tag _bits(): USize = 6","title":"timers.pony"}]}